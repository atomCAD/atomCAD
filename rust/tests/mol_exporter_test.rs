use rust_lib_flutter_cad::common::atomic_structure::AtomicStructure;
use rust_lib_flutter_cad::common::mol_exporter::save_mol_v3000;
use glam::f64::DVec3;
use std::fs;
use std::path::Path;

#[test]
fn test_save_mol_v3000_simple_molecule() {
    // Create a simple water molecule (H2O)
    let mut structure = AtomicStructure::new();
    
    // Add oxygen atom at origin
    let oxygen_id = structure.add_atom(8, DVec3::new(0.0, 0.0, 0.0), 1); // Oxygen (atomic number 8)
    
    // Add two hydrogen atoms
    let hydrogen1_id = structure.add_atom(1, DVec3::new(0.757, 0.586, 0.0), 1); // Hydrogen (atomic number 1)
    let hydrogen2_id = structure.add_atom(1, DVec3::new(-0.757, 0.586, 0.0), 1); // Hydrogen (atomic number 1)
    
    // Add bonds (single bonds, multiplicity = 1)
    structure.add_bond(oxygen_id, hydrogen1_id, 1);
    structure.add_bond(oxygen_id, hydrogen2_id, 1);
    
    // Save to a temporary file
    let test_file = "test_water.mol";
    let result = save_mol_v3000(&structure, test_file);
    
    // Check that the save operation succeeded
    assert!(result.is_ok(), "Failed to save MOL file: {:?}", result.err());
    
    // Check that the file was created
    assert!(Path::new(test_file).exists(), "MOL file was not created");
    
    // Read the file content and verify basic structure
    let content = fs::read_to_string(test_file).expect("Failed to read MOL file");
    
    // Verify header
    assert!(content.contains("test_water"), "Title line missing");
    assert!(content.contains("atomCAD 1.0"), "Program line missing");
    assert!(content.contains("Generated by atomCAD"), "Comment line missing");
    assert!(content.contains("V3000"), "V3000 token missing");
    
    // Verify CTAB structure
    assert!(content.contains("M  V30 BEGIN CTAB"), "BEGIN CTAB missing");
    assert!(content.contains("M  V30 COUNTS 3 2 0 0 0"), "COUNTS line incorrect");
    assert!(content.contains("M  V30 BEGIN ATOM"), "BEGIN ATOM missing");
    assert!(content.contains("M  V30 END ATOM"), "END ATOM missing");
    assert!(content.contains("M  V30 BEGIN BOND"), "BEGIN BOND missing");
    assert!(content.contains("M  V30 END BOND"), "END BOND missing");
    assert!(content.contains("M  V30 END CTAB"), "END CTAB missing");
    assert!(content.contains("M  END"), "M END missing");
    
    // Verify atoms (should have O and H elements)
    assert!(content.contains(" O "), "Oxygen atom missing");
    assert!(content.contains(" H "), "Hydrogen atom missing");
    
    // Count actual bond lines more accurately
    let bond_section_start = content.find("M  V30 BEGIN BOND").unwrap();
    let bond_section_end = content.find("M  V30 END BOND").unwrap();
    let bond_section = &content[bond_section_start..bond_section_end];
    let bond_lines: Vec<&str> = bond_section.lines()
        .filter(|line| line.starts_with("M  V30") && !line.contains("BEGIN") && !line.contains("END"))
        .collect();
    assert_eq!(bond_lines.len(), 2, "Should have exactly 2 bonds");
    
    // Clean up
    fs::remove_file(test_file).ok();
}

#[test]
fn test_save_mol_v3000_empty_structure() {
    // Create an empty structure
    let structure = AtomicStructure::new();
    
    // Save to a temporary file
    let test_file = "test_empty.mol";
    let result = save_mol_v3000(&structure, test_file);
    
    // Check that the save operation succeeded
    assert!(result.is_ok(), "Failed to save empty MOL file: {:?}", result.err());
    
    // Check that the file was created
    assert!(Path::new(test_file).exists(), "Empty MOL file was not created");
    
    // Read the file content and verify basic structure
    let content = fs::read_to_string(test_file).expect("Failed to read empty MOL file");
    
    // Verify it has the correct counts for empty structure
    assert!(content.contains("M  V30 COUNTS 0 0 0 0 0"), "Empty COUNTS line incorrect");
    
    // Clean up
    fs::remove_file(test_file).ok();
}

#[test]
fn test_save_mol_v3000_ethane_molecule() {
    // Create ethane molecule (C2H6) - more complex example
    let mut structure = AtomicStructure::new();
    
    // Add two carbon atoms
    let carbon1_id = structure.add_atom(6, DVec3::new(0.0, 0.0, 0.0), 1); // Carbon (atomic number 6)
    let carbon2_id = structure.add_atom(6, DVec3::new(1.53, 0.0, 0.0), 1); // Carbon (atomic number 6)
    
    // Add hydrogen atoms for first carbon
    let h1_id = structure.add_atom(1, DVec3::new(-0.54, 0.935, 0.0), 1);
    let h2_id = structure.add_atom(1, DVec3::new(-0.54, -0.935, 0.0), 1);
    let h3_id = structure.add_atom(1, DVec3::new(0.0, 0.0, 1.09), 1);
    
    // Add hydrogen atoms for second carbon
    let h4_id = structure.add_atom(1, DVec3::new(2.07, 0.935, 0.0), 1);
    let h5_id = structure.add_atom(1, DVec3::new(2.07, -0.935, 0.0), 1);
    let h6_id = structure.add_atom(1, DVec3::new(1.53, 0.0, -1.09), 1);
    
    // Add C-C bond
    structure.add_bond(carbon1_id, carbon2_id, 1);
    
    // Add C-H bonds for first carbon
    structure.add_bond(carbon1_id, h1_id, 1);
    structure.add_bond(carbon1_id, h2_id, 1);
    structure.add_bond(carbon1_id, h3_id, 1);
    
    // Add C-H bonds for second carbon
    structure.add_bond(carbon2_id, h4_id, 1);
    structure.add_bond(carbon2_id, h5_id, 1);
    structure.add_bond(carbon2_id, h6_id, 1);
    
    // Save to a temporary file
    let test_file = "test_ethane.mol";
    let result = save_mol_v3000(&structure, test_file);
    
    // Check that the save operation succeeded
    assert!(result.is_ok(), "Failed to save ethane MOL file: {:?}", result.err());
    
    // Read the file content and verify
    let content = fs::read_to_string(test_file).expect("Failed to read ethane MOL file");
    
    // Verify correct atom and bond counts
    assert!(content.contains("M  V30 COUNTS 8 7 0 0 0"), "Ethane COUNTS line incorrect");
    
    // Verify elements are present
    assert!(content.contains(" C "), "Carbon atoms missing");
    assert!(content.contains(" H "), "Hydrogen atoms missing");
    
    // Count carbon and hydrogen atoms in the output
    let carbon_count = content.matches(" C ").count();
    let hydrogen_count = content.matches(" H ").count();
    assert_eq!(carbon_count, 2, "Should have 2 carbon atoms");
    assert_eq!(hydrogen_count, 6, "Should have 6 hydrogen atoms");
    
    // Clean up
    fs::remove_file(test_file).ok();
}

#[test]
fn test_save_mol_v3000_with_double_bond() {
    // Create ethylene molecule (C2H4) with a double bond
    let mut structure = AtomicStructure::new();
    
    // Add two carbon atoms
    let carbon1_id = structure.add_atom(6, DVec3::new(0.0, 0.0, 0.0), 1);
    let carbon2_id = structure.add_atom(6, DVec3::new(1.33, 0.0, 0.0), 1);
    
    // Add hydrogen atoms
    let h1_id = structure.add_atom(1, DVec3::new(-0.57, 0.93, 0.0), 1);
    let h2_id = structure.add_atom(1, DVec3::new(-0.57, -0.93, 0.0), 1);
    let h3_id = structure.add_atom(1, DVec3::new(1.90, 0.93, 0.0), 1);
    let h4_id = structure.add_atom(1, DVec3::new(1.90, -0.93, 0.0), 1);
    
    // Add double bond between carbons (multiplicity = 2)
    structure.add_bond(carbon1_id, carbon2_id, 2);
    
    // Add single bonds to hydrogens
    structure.add_bond(carbon1_id, h1_id, 1);
    structure.add_bond(carbon1_id, h2_id, 1);
    structure.add_bond(carbon2_id, h3_id, 1);
    structure.add_bond(carbon2_id, h4_id, 1);
    
    // Save to a temporary file
    let test_file = "test_ethylene.mol";
    let result = save_mol_v3000(&structure, test_file);
    
    // Check that the save operation succeeded
    assert!(result.is_ok(), "Failed to save ethylene MOL file: {:?}", result.err());
    
    // Read the file content and verify
    let content = fs::read_to_string(test_file).expect("Failed to read ethylene MOL file");
    
    // Verify correct atom and bond counts
    assert!(content.contains("M  V30 COUNTS 6 5 0 0 0"), "Ethylene COUNTS line incorrect");
    
    // Verify that there's a double bond (bond type 2)
    assert!(content.contains(" 2 "), "Double bond missing");
    
    // Clean up
    fs::remove_file(test_file).ok();
}
