// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.10.0.

#![allow(
    non_camel_case_types,
    unused,
    non_snake_case,
    clippy::needless_return,
    clippy::redundant_closure_call,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::unused_unit,
    clippy::double_parens,
    clippy::let_and_return,
    clippy::too_many_arguments,
    clippy::match_single_binding,
    clippy::clone_on_copy,
    clippy::let_unit_value,
    clippy::deref_addrof,
    clippy::explicit_auto_deref,
    clippy::borrow_deref_ref,
    clippy::needless_borrow
)]

// Section: imports

use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate!(
    default_stream_sink_codec = SseCodec,
    default_rust_opaque = RustOpaqueMoi,
    default_rust_auto_opaque = RustAutoOpaqueMoi,
);
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str = "2.10.0";
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 = -285058643;

// Section: executor

flutter_rust_bridge::frb_generated_default_handler!();

// Section: wire_funcs

fn wire__crate__api__structure_designer__edit_atom_api__add_atom_by_ray_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "add_atom_by_ray",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_atomic_number = <i32>::sse_decode(&mut deserializer);
            let api_plane_normal =
                <crate::api::common_api_types::APIVec3>::sse_decode(&mut deserializer);
            let api_ray_start =
                <crate::api::common_api_types::APIVec3>::sse_decode(&mut deserializer);
            let api_ray_dir =
                <crate::api::common_api_types::APIVec3>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok({
                    crate::api::structure_designer::edit_atom_api::add_atom_by_ray(
                        api_atomic_number,
                        api_plane_normal,
                        api_ray_start,
                        api_ray_dir,
                    );
                })?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__structure_designer__facet_shell_api__add_facet_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "add_facet", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_node_id = <u64>::sse_decode(&mut deserializer);
let api_facet = <crate::api::structure_designer::structure_designer_api_types::APIFacet>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::api::structure_designer::facet_shell_api::add_facet(api_node_id, api_facet))?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__structure_designer__structure_designer_api__add_new_node_network_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "add_new_node_network",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok({
                    crate::api::structure_designer::structure_designer_api::add_new_node_network();
                })?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__structure_designer__structure_designer_api__add_node_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "add_node",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_node_type_name = <String>::sse_decode(&mut deserializer);
            let api_position =
                <crate::api::common_api_types::APIVec2>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::api::structure_designer::structure_designer_api::add_node(
                        &api_node_type_name,
                        api_position,
                    ),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__common_api__adjust_camera_target_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "adjust_camera_target",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_ray_origin =
                <crate::api::common_api_types::APIVec3>::sse_decode(&mut deserializer);
            let api_ray_direction =
                <crate::api::common_api_types::APIVec3>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok({
                    crate::api::common_api::adjust_camera_target(api_ray_origin, api_ray_direction);
                })?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__structure_designer__structure_designer_api__can_connect_nodes_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "can_connect_nodes",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_source_node_id = <u64>::sse_decode(&mut deserializer);
            let api_source_output_pin_index = <i32>::sse_decode(&mut deserializer);
            let api_dest_node_id = <u64>::sse_decode(&mut deserializer);
            let api_dest_param_index = <usize>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::api::structure_designer::structure_designer_api::can_connect_nodes(
                        api_source_node_id,
                        api_source_output_pin_index,
                        api_dest_node_id,
                        api_dest_param_index,
                    ),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__structure_designer__facet_shell_api__clear_facets_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "clear_facets",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_node_id = <u64>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::api::structure_designer::facet_shell_api::clear_facets(api_node_id),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__structure_designer__structure_designer_api__clear_selection_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "clear_selection",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok({
                    crate::api::structure_designer::structure_designer_api::clear_selection();
                })?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__structure_designer__structure_designer_api__connect_nodes_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "connect_nodes",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_source_node_id = <u64>::sse_decode(&mut deserializer);
            let api_source_output_pin_index = <i32>::sse_decode(&mut deserializer);
            let api_dest_node_id = <u64>::sse_decode(&mut deserializer);
            let api_dest_param_index = <usize>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok({
                    crate::api::structure_designer::structure_designer_api::connect_nodes(
                        api_source_node_id,
                        api_source_output_pin_index,
                        api_dest_node_id,
                        api_dest_param_index,
                    );
                })?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__structure_designer__structure_designer_api__delete_node_network_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "delete_node_network",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_network_name = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::api::structure_designer::structure_designer_api::delete_node_network(
                        &api_network_name,
                    ),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__structure_designer__structure_designer_api__delete_selected_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "delete_selected",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok({
                    crate::api::structure_designer::structure_designer_api::delete_selected();
                })?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__structure_designer__edit_atom_api__delete_selected_atoms_and_bonds_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "delete_selected_atoms_and_bonds",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok({
                    crate::api::structure_designer::edit_atom_api::delete_selected_atoms_and_bonds(
                    );
                })?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__structure_designer__edit_atom_api__draw_bond_by_ray_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "draw_bond_by_ray",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_ray_start =
                <crate::api::common_api_types::APIVec3>::sse_decode(&mut deserializer);
            let api_ray_dir =
                <crate::api::common_api_types::APIVec3>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok({
                    crate::api::structure_designer::edit_atom_api::draw_bond_by_ray(
                        api_ray_start,
                        api_ray_dir,
                    );
                })?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__structure_designer__structure_designer_api__duplicate_node_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "duplicate_node",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_node_id = <u64>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::api::structure_designer::structure_designer_api::duplicate_node(
                        api_node_id,
                    ),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__structure_designer__edit_atom_api__edit_atom_redo_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "edit_atom_redo",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok({
                    crate::api::structure_designer::edit_atom_api::edit_atom_redo();
                })?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__structure_designer__edit_atom_api__edit_atom_undo_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "edit_atom_undo",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok({
                    crate::api::structure_designer::edit_atom_api::edit_atom_undo();
                })?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__structure_designer__structure_designer_api__export_visible_atomic_structures_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "export_visible_atomic_structures", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_file_path = <String>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::api::structure_designer::structure_designer_api::export_visible_atomic_structures(api_file_path))?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__common_api__gadget_drag_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "gadget_drag",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_handle_index = <i32>::sse_decode(&mut deserializer);
            let api_ray_origin =
                <crate::api::common_api_types::APIVec3>::sse_decode(&mut deserializer);
            let api_ray_direction =
                <crate::api::common_api_types::APIVec3>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok({
                    crate::api::common_api::gadget_drag(
                        api_handle_index,
                        api_ray_origin,
                        api_ray_direction,
                    );
                })?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__common_api__gadget_end_drag_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "gadget_end_drag",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok({
                    crate::api::common_api::gadget_end_drag();
                })?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__common_api__gadget_hit_test_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "gadget_hit_test",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_ray_origin =
                <crate::api::common_api_types::APIVec3>::sse_decode(&mut deserializer);
            let api_ray_direction =
                <crate::api::common_api_types::APIVec3>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(crate::api::common_api::gadget_hit_test(
                    api_ray_origin,
                    api_ray_direction,
                ))?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__common_api__gadget_start_drag_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "gadget_start_drag",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_handle_index = <i32>::sse_decode(&mut deserializer);
            let api_ray_origin =
                <crate::api::common_api_types::APIVec3>::sse_decode(&mut deserializer);
            let api_ray_direction =
                <crate::api::common_api_types::APIVec3>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok({
                    crate::api::common_api::gadget_start_drag(
                        api_handle_index,
                        api_ray_origin,
                        api_ray_direction,
                    );
                })?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__structure_designer__edit_atom_api__get_active_edit_atom_tool_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_active_edit_atom_tool",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::api::structure_designer::edit_atom_api::get_active_edit_atom_tool(),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__common_api__get_all_elements_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_all_elements",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(crate::api::common_api::get_all_elements())?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__structure_designer__structure_designer_api__get_api_data_type_display_name_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "get_api_data_type_display_name", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_api_data_type = <crate::api::structure_designer::structure_designer_api_types::APIDataType>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::api::structure_designer::structure_designer_api::get_api_data_type_display_name(api_api_data_type))?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__structure_designer__structure_designer_api__get_atom_cut_data_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_atom_cut_data",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_node_id = <u64>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::api::structure_designer::structure_designer_api::get_atom_cut_data(
                        api_node_id,
                    ),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__structure_designer__structure_designer_api__get_atom_fill_data_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_atom_fill_data",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_node_id = <u64>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::api::structure_designer::structure_designer_api::get_atom_fill_data(
                        api_node_id,
                    ),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__structure_designer__structure_designer_api__get_atom_trans_data_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_atom_trans_data",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_node_id = <u64>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::api::structure_designer::structure_designer_api::get_atom_trans_data(
                        api_node_id,
                    ),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__structure_designer__structure_designer_api__get_bool_data_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_bool_data",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_node_id = <u64>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::api::structure_designer::structure_designer_api::get_bool_data(
                        api_node_id,
                    ),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__common_api__get_camera_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_camera",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(crate::api::common_api::get_camera())?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__common_api__get_camera_canonical_view_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_camera_canonical_view",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok =
                    Result::<_, ()>::Ok(crate::api::common_api::get_camera_canonical_view())?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__common_api__get_camera_transform_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_camera_transform",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok =
                    Result::<_, ()>::Ok(crate::api::common_api::get_camera_transform())?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__structure_designer__structure_designer_api__get_circle_data_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_circle_data",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_node_id = <u64>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::api::structure_designer::structure_designer_api::get_circle_data(
                        api_node_id,
                    ),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__structure_designer__geo_to_atom_api__get_crystal_types_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_crystal_types",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::api::structure_designer::geo_to_atom_api::get_crystal_types(),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__structure_designer__structure_designer_api__get_cuboid_data_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_cuboid_data",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_node_id = <u64>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::api::structure_designer::structure_designer_api::get_cuboid_data(
                        api_node_id,
                    ),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__structure_designer__structure_designer_api__get_edit_atom_data_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_edit_atom_data",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_node_id = <u64>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::api::structure_designer::structure_designer_api::get_edit_atom_data(
                        api_node_id,
                    ),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__structure_designer__structure_designer_api__get_export_xyz_data_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_export_xyz_data",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_node_id = <u64>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::api::structure_designer::structure_designer_api::get_export_xyz_data(
                        api_node_id,
                    ),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__structure_designer__structure_designer_api__get_expr_data_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_expr_data",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_node_id = <u64>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::api::structure_designer::structure_designer_api::get_expr_data(
                        api_node_id,
                    ),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__structure_designer__structure_designer_api__get_extrude_data_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_extrude_data",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_node_id = <u64>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::api::structure_designer::structure_designer_api::get_extrude_data(
                        api_node_id,
                    ),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__structure_designer__facet_shell_api__get_facet_shell_data_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_facet_shell_data",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_node_id = <u64>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::api::structure_designer::facet_shell_api::get_facet_shell_data(
                        api_node_id,
                    ),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__structure_designer__structure_designer_api__get_float_data_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_float_data",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_node_id = <u64>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::api::structure_designer::structure_designer_api::get_float_data(
                        api_node_id,
                    ),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__structure_designer__structure_designer_api__get_geo_to_atom_data_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_geo_to_atom_data",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_node_id = <u64>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::api::structure_designer::structure_designer_api::get_geo_to_atom_data(
                        api_node_id,
                    ),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__structure_designer__structure_designer_api__get_geo_trans_data_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_geo_trans_data",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_node_id = <u64>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::api::structure_designer::structure_designer_api::get_geo_trans_data(
                        api_node_id,
                    ),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__structure_designer__structure_designer_api__get_half_plane_data_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_half_plane_data",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_node_id = <u64>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::api::structure_designer::structure_designer_api::get_half_plane_data(
                        api_node_id,
                    ),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__structure_designer__structure_designer_api__get_half_space_data_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_half_space_data",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_node_id = <u64>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::api::structure_designer::structure_designer_api::get_half_space_data(
                        api_node_id,
                    ),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__structure_designer__structure_designer_api__get_import_xyz_data_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_import_xyz_data",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_node_id = <u64>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::api::structure_designer::structure_designer_api::get_import_xyz_data(
                        api_node_id,
                    ),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__structure_designer__structure_designer_api__get_int_data_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_int_data",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_node_id = <u64>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::api::structure_designer::structure_designer_api::get_int_data(
                        api_node_id,
                    ),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__structure_designer__structure_designer_api__get_ivec2_data_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_ivec2_data",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_node_id = <u64>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::api::structure_designer::structure_designer_api::get_ivec2_data(
                        api_node_id,
                    ),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__structure_designer__structure_designer_api__get_ivec3_data_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_ivec3_data",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_node_id = <u64>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::api::structure_designer::structure_designer_api::get_ivec3_data(
                        api_node_id,
                    ),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__structure_designer__structure_designer_api__get_lattice_symop_data_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_lattice_symop_data",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_node_id = <u64>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::api::structure_designer::structure_designer_api::get_lattice_symop_data(
                        api_node_id,
                    ),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__structure_designer__structure_designer_api__get_map_data_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_map_data",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_node_id = <u64>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::api::structure_designer::structure_designer_api::get_map_data(
                        api_node_id,
                    ),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__structure_designer__structure_designer_api__get_motif_data_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_motif_data",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_node_id = <u64>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::api::structure_designer::structure_designer_api::get_motif_data(
                        api_node_id,
                    ),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__structure_designer__structure_designer_api__get_node_network_names_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_node_network_names",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::api::structure_designer::structure_designer_api::get_node_network_names(
                    ),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__structure_designer__structure_designer_api__get_node_network_view_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_node_network_view",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::api::structure_designer::structure_designer_api::get_node_network_view(),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__structure_designer__structure_designer_api__get_node_networks_with_validation_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "get_node_networks_with_validation", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::api::structure_designer::structure_designer_api::get_node_networks_with_validation())?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__structure_designer__structure_designer_api__get_node_type_names_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_node_type_names",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::api::structure_designer::structure_designer_api::get_node_type_names(),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__common_api__get_ortho_half_height_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_ortho_half_height",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok =
                    Result::<_, ()>::Ok(crate::api::common_api::get_ortho_half_height())?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__structure_designer__structure_designer_api__get_parameter_data_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_parameter_data",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_node_id = <u64>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::api::structure_designer::structure_designer_api::get_parameter_data(
                        api_node_id,
                    ),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__structure_designer__structure_designer_api__get_range_data_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_range_data",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_node_id = <u64>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::api::structure_designer::structure_designer_api::get_range_data(
                        api_node_id,
                    ),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__structure_designer__structure_designer_api__get_rect_data_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_rect_data",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_node_id = <u64>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::api::structure_designer::structure_designer_api::get_rect_data(
                        api_node_id,
                    ),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__structure_designer__structure_designer_api__get_reg_poly_data_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_reg_poly_data",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_node_id = <u64>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::api::structure_designer::structure_designer_api::get_reg_poly_data(
                        api_node_id,
                    ),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__structure_designer__relax_api__get_relax_message_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_relax_message",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::api::structure_designer::relax_api::get_relax_message(),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__structure_designer__structure_designer_api__get_sphere_data_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_sphere_data",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_node_id = <u64>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::api::structure_designer::structure_designer_api::get_sphere_data(
                        api_node_id,
                    ),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__structure_designer__structure_designer_api__get_string_data_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_string_data",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_node_id = <u64>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::api::structure_designer::structure_designer_api::get_string_data(
                        api_node_id,
                    ),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__structure_designer__structure_designer_api__get_structure_designer_preferences_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "get_structure_designer_preferences", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::api::structure_designer::structure_designer_api::get_structure_designer_preferences())?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__structure_designer__structure_designer_api__get_unit_cell_data_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_unit_cell_data",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_node_id = <u64>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::api::structure_designer::structure_designer_api::get_unit_cell_data(
                        api_node_id,
                    ),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__structure_designer__geo_to_atom_api__get_unit_cell_size_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_unit_cell_size",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_primary_atomic_number = <i32>::sse_decode(&mut deserializer);
            let api_secondary_atomic_number = <i32>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::api::structure_designer::geo_to_atom_api::get_unit_cell_size(
                        api_primary_atomic_number,
                        api_secondary_atomic_number,
                    ),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__structure_designer__structure_designer_api__get_vec2_data_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_vec2_data",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_node_id = <u64>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::api::structure_designer::structure_designer_api::get_vec2_data(
                        api_node_id,
                    ),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__structure_designer__structure_designer_api__get_vec3_data_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_vec3_data",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_node_id = <u64>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::api::structure_designer::structure_designer_api::get_vec3_data(
                        api_node_id,
                    ),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__common_api__greet_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "greet",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_name = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(crate::api::common_api::greet(api_name))?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__structure_designer__import_xyz_api__import_xyz_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "import_xyz",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_node_id = <u64>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::api::structure_designer::import_xyz_api::import_xyz(api_node_id),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__common_api__init_app_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "init_app",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok({
                        crate::api::common_api::init_app();
                    })?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__structure_designer__structure_designer_api__is_node_type_active_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "is_node_type_active",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_node_type = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::api::structure_designer::structure_designer_api::is_node_type_active(
                        api_node_type,
                    ),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__common_api__is_orthographic_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "is_orthographic",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(crate::api::common_api::is_orthographic())?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__structure_designer__geo_to_atom_api__is_unit_cell_size_estimated_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "is_unit_cell_size_estimated",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_primary_atomic_number = <i32>::sse_decode(&mut deserializer);
            let api_secondary_atomic_number = <i32>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::api::structure_designer::geo_to_atom_api::is_unit_cell_size_estimated(
                        api_primary_atomic_number,
                        api_secondary_atomic_number,
                    ),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__structure_designer__structure_designer_api__load_node_networks_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "load_node_networks",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_file_path = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::api::structure_designer::structure_designer_api::load_node_networks(
                        api_file_path,
                    ),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__common_api__move_camera_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "move_camera",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_eye = <crate::api::common_api_types::APIVec3>::sse_decode(&mut deserializer);
            let api_target = <crate::api::common_api_types::APIVec3>::sse_decode(&mut deserializer);
            let api_up = <crate::api::common_api_types::APIVec3>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok({
                    crate::api::common_api::move_camera(api_eye, api_target, api_up);
                })?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__structure_designer__structure_designer_api__move_node_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "move_node",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_node_id = <u64>::sse_decode(&mut deserializer);
            let api_position =
                <crate::api::common_api_types::APIVec2>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok({
                    crate::api::structure_designer::structure_designer_api::move_node(
                        api_node_id,
                        api_position,
                    );
                })?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__common_api__provide_texture_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "provide_texture",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_texture_ptr = <u64>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok =
                    Result::<_, ()>::Ok(crate::api::common_api::provide_texture(api_texture_ptr))?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__structure_designer__facet_shell_api__remove_facet_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "remove_facet",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_node_id = <u64>::sse_decode(&mut deserializer);
            let api_index = <usize>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::api::structure_designer::facet_shell_api::remove_facet(
                        api_node_id,
                        api_index,
                    ),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__structure_designer__structure_designer_api__rename_node_network_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "rename_node_network",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_old_name = <String>::sse_decode(&mut deserializer);
            let api_new_name = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::api::structure_designer::structure_designer_api::rename_node_network(
                        &api_old_name,
                        &api_new_name,
                    ),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__structure_designer__edit_atom_api__replace_selected_atoms_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "replace_selected_atoms",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_atomic_number = <i32>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok({
                    crate::api::structure_designer::edit_atom_api::replace_selected_atoms(
                        api_atomic_number,
                    );
                })?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__structure_designer__structure_designer_api__save_node_networks_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "save_node_networks",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_file_path = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::api::structure_designer::structure_designer_api::save_node_networks(
                        api_file_path,
                    ),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__structure_designer__edit_atom_api__select_atom_or_bond_by_ray_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "select_atom_or_bond_by_ray",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_ray_start =
                <crate::api::common_api_types::APIVec3>::sse_decode(&mut deserializer);
            let api_ray_dir =
                <crate::api::common_api_types::APIVec3>::sse_decode(&mut deserializer);
            let api_select_modifier =
                <crate::api::common_api_types::SelectModifier>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::api::structure_designer::edit_atom_api::select_atom_or_bond_by_ray(
                        api_ray_start,
                        api_ray_dir,
                        api_select_modifier,
                    ),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__structure_designer__facet_shell_api__select_facet_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "select_facet",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_node_id = <u64>::sse_decode(&mut deserializer);
            let api_index = <Option<usize>>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::api::structure_designer::facet_shell_api::select_facet(
                        api_node_id,
                        api_index,
                    ),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__structure_designer__facet_shell_api__select_facet_by_ray_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "select_facet_by_ray",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_ray_start =
                <crate::api::common_api_types::APIVec3>::sse_decode(&mut deserializer);
            let api_ray_dir =
                <crate::api::common_api_types::APIVec3>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok({
                    crate::api::structure_designer::facet_shell_api::select_facet_by_ray(
                        api_ray_start,
                        api_ray_dir,
                    );
                })?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__structure_designer__structure_designer_api__select_node_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "select_node",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_node_id = <u64>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::api::structure_designer::structure_designer_api::select_node(
                        api_node_id,
                    ),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__structure_designer__structure_designer_api__select_wire_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "select_wire",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_source_node_id = <u64>::sse_decode(&mut deserializer);
            let api_source_output_pin_index = <i32>::sse_decode(&mut deserializer);
            let api_destination_node_id = <u64>::sse_decode(&mut deserializer);
            let api_destination_argument_index = <usize>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::api::structure_designer::structure_designer_api::select_wire(
                        api_source_node_id,
                        api_source_output_pin_index,
                        api_destination_node_id,
                        api_destination_argument_index,
                    ),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__structure_designer__edit_atom_api__set_active_edit_atom_tool_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "set_active_edit_atom_tool", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_tool = <crate::api::structure_designer::structure_designer_api_types::APIEditAtomTool>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::api::structure_designer::edit_atom_api::set_active_edit_atom_tool(api_tool))?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__structure_designer__structure_designer_api__set_active_node_network_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "set_active_node_network",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_node_network_name = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok({
                    crate::api::structure_designer::structure_designer_api::set_active_node_network(
                        &api_node_network_name,
                    );
                })?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__structure_designer__structure_designer_api__set_atom_cut_data_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "set_atom_cut_data", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_node_id = <u64>::sse_decode(&mut deserializer);
let api_data = <crate::api::structure_designer::structure_designer_api_types::APIAtomCutData>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok({ crate::api::structure_designer::structure_designer_api::set_atom_cut_data(api_node_id, api_data); })?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__structure_designer__structure_designer_api__set_atom_fill_data_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "set_atom_fill_data", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_node_id = <u64>::sse_decode(&mut deserializer);
let api_data = <crate::api::structure_designer::structure_designer_api_types::APIAtomFillData>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::api::structure_designer::structure_designer_api::set_atom_fill_data(api_node_id, api_data))?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__structure_designer__structure_designer_api__set_atom_trans_data_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "set_atom_trans_data", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_node_id = <u64>::sse_decode(&mut deserializer);
let api_data = <crate::api::structure_designer::structure_designer_api_types::APIAtomTransData>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok({ crate::api::structure_designer::structure_designer_api::set_atom_trans_data(api_node_id, api_data); })?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__structure_designer__structure_designer_api__set_bool_data_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "set_bool_data", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_node_id = <u64>::sse_decode(&mut deserializer);
let api_data = <crate::api::structure_designer::structure_designer_api_types::APIBoolData>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok({ crate::api::structure_designer::structure_designer_api::set_bool_data(api_node_id, api_data); })?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__common_api__set_camera_canonical_view_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "set_camera_canonical_view",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_view = <crate::api::common_api_types::APICameraCanonicalView>::sse_decode(
                &mut deserializer,
            );
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok({
                    crate::api::common_api::set_camera_canonical_view(api_view);
                })?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__common_api__set_camera_transform_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "set_camera_transform",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_transform =
                <crate::api::common_api_types::APITransform>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok({
                    crate::api::common_api::set_camera_transform(api_transform);
                })?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__structure_designer__structure_designer_api__set_circle_data_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "set_circle_data", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_node_id = <u64>::sse_decode(&mut deserializer);
let api_data = <crate::api::structure_designer::structure_designer_api_types::APICircleData>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok({ crate::api::structure_designer::structure_designer_api::set_circle_data(api_node_id, api_data); })?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__structure_designer__structure_designer_api__set_cuboid_data_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "set_cuboid_data", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_node_id = <u64>::sse_decode(&mut deserializer);
let api_data = <crate::api::structure_designer::structure_designer_api_types::APICuboidData>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok({ crate::api::structure_designer::structure_designer_api::set_cuboid_data(api_node_id, api_data); })?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__structure_designer__edit_atom_api__set_edit_atom_add_atom_data_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "set_edit_atom_add_atom_data",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_atomic_number = <i32>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::api::structure_designer::edit_atom_api::set_edit_atom_add_atom_data(
                        api_atomic_number,
                    ),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__structure_designer__edit_atom_api__set_edit_atom_default_data_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "set_edit_atom_default_data",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_replacement_atomic_number = <i32>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::api::structure_designer::edit_atom_api::set_edit_atom_default_data(
                        api_replacement_atomic_number,
                    ),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__structure_designer__structure_designer_api__set_export_xyz_data_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "set_export_xyz_data", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_node_id = <u64>::sse_decode(&mut deserializer);
let api_data = <crate::api::structure_designer::structure_designer_api_types::APIExportXYZData>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok({ crate::api::structure_designer::structure_designer_api::set_export_xyz_data(api_node_id, api_data); })?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__structure_designer__structure_designer_api__set_expr_data_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "set_expr_data", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_node_id = <u64>::sse_decode(&mut deserializer);
let api_data = <crate::api::structure_designer::structure_designer_api_types::APIExprData>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::api::structure_designer::structure_designer_api::set_expr_data(api_node_id, api_data))?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__structure_designer__structure_designer_api__set_extrude_data_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "set_extrude_data", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_node_id = <u64>::sse_decode(&mut deserializer);
let api_data = <crate::api::structure_designer::structure_designer_api_types::APIExtrudeData>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok({ crate::api::structure_designer::structure_designer_api::set_extrude_data(api_node_id, api_data); })?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__structure_designer__facet_shell_api__set_facet_shell_center_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "set_facet_shell_center",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_node_id = <u64>::sse_decode(&mut deserializer);
            let api_center =
                <crate::api::common_api_types::APIIVec3>::sse_decode(&mut deserializer);
            let api_max_miller_index = <i32>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::api::structure_designer::facet_shell_api::set_facet_shell_center(
                        api_node_id,
                        api_center,
                        api_max_miller_index,
                    ),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__structure_designer__structure_designer_api__set_float_data_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "set_float_data", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_node_id = <u64>::sse_decode(&mut deserializer);
let api_data = <crate::api::structure_designer::structure_designer_api_types::APIFloatData>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok({ crate::api::structure_designer::structure_designer_api::set_float_data(api_node_id, api_data); })?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__structure_designer__structure_designer_api__set_geo_to_atom_data_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "set_geo_to_atom_data", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_node_id = <u64>::sse_decode(&mut deserializer);
let api_data = <crate::api::structure_designer::structure_designer_api_types::APIGeoToAtomData>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::api::structure_designer::structure_designer_api::set_geo_to_atom_data(api_node_id, api_data))?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__structure_designer__structure_designer_api__set_geo_trans_data_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "set_geo_trans_data", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_node_id = <u64>::sse_decode(&mut deserializer);
let api_data = <crate::api::structure_designer::structure_designer_api_types::APIGeoTransData>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok({ crate::api::structure_designer::structure_designer_api::set_geo_trans_data(api_node_id, api_data); })?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__structure_designer__structure_designer_api__set_half_plane_data_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "set_half_plane_data", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_node_id = <u64>::sse_decode(&mut deserializer);
let api_data = <crate::api::structure_designer::structure_designer_api_types::APIHalfPlaneData>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok({ crate::api::structure_designer::structure_designer_api::set_half_plane_data(api_node_id, api_data); })?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__structure_designer__structure_designer_api__set_half_space_data_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "set_half_space_data", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_node_id = <u64>::sse_decode(&mut deserializer);
let api_data = <crate::api::structure_designer::structure_designer_api_types::APIHalfSpaceData>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok({ crate::api::structure_designer::structure_designer_api::set_half_space_data(api_node_id, api_data); })?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__structure_designer__structure_designer_api__set_import_xyz_data_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "set_import_xyz_data", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_node_id = <u64>::sse_decode(&mut deserializer);
let api_data = <crate::api::structure_designer::structure_designer_api_types::APIImportXYZData>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok({ crate::api::structure_designer::structure_designer_api::set_import_xyz_data(api_node_id, api_data); })?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__structure_designer__structure_designer_api__set_int_data_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "set_int_data", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_node_id = <u64>::sse_decode(&mut deserializer);
let api_data = <crate::api::structure_designer::structure_designer_api_types::APIIntData>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok({ crate::api::structure_designer::structure_designer_api::set_int_data(api_node_id, api_data); })?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__structure_designer__structure_designer_api__set_ivec2_data_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "set_ivec2_data", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_node_id = <u64>::sse_decode(&mut deserializer);
let api_data = <crate::api::structure_designer::structure_designer_api_types::APIIVec2Data>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok({ crate::api::structure_designer::structure_designer_api::set_ivec2_data(api_node_id, api_data); })?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__structure_designer__structure_designer_api__set_ivec3_data_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "set_ivec3_data", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_node_id = <u64>::sse_decode(&mut deserializer);
let api_data = <crate::api::structure_designer::structure_designer_api_types::APIIVec3Data>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok({ crate::api::structure_designer::structure_designer_api::set_ivec3_data(api_node_id, api_data); })?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__structure_designer__structure_designer_api__set_lattice_symop_data_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "set_lattice_symop_data", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_node_id = <u64>::sse_decode(&mut deserializer);
let api_data = <crate::api::structure_designer::structure_designer_api_types::APILatticeSymopData>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok({ crate::api::structure_designer::structure_designer_api::set_lattice_symop_data(api_node_id, api_data); })?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__structure_designer__structure_designer_api__set_map_data_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "set_map_data", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_node_id = <u64>::sse_decode(&mut deserializer);
let api_data = <crate::api::structure_designer::structure_designer_api_types::APIMapData>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok({ crate::api::structure_designer::structure_designer_api::set_map_data(api_node_id, api_data); })?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__structure_designer__structure_designer_api__set_motif_data_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "set_motif_data", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_node_id = <u64>::sse_decode(&mut deserializer);
let api_data = <crate::api::structure_designer::structure_designer_api_types::APIMotifData>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::api::structure_designer::structure_designer_api::set_motif_data(api_node_id, api_data))?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__structure_designer__structure_designer_api__set_node_display_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "set_node_display",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_node_id = <u64>::sse_decode(&mut deserializer);
            let api_is_displayed = <bool>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok({
                    crate::api::structure_designer::structure_designer_api::set_node_display(
                        api_node_id,
                        api_is_displayed,
                    );
                })?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__common_api__set_ortho_half_height_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "set_ortho_half_height",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_half_height = <f64>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok({
                    crate::api::common_api::set_ortho_half_height(api_half_height);
                })?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__common_api__set_orthographic_mode_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "set_orthographic_mode",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_orthographic = <bool>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok({
                    crate::api::common_api::set_orthographic_mode(api_orthographic);
                })?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__structure_designer__structure_designer_api__set_parameter_data_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "set_parameter_data", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_node_id = <u64>::sse_decode(&mut deserializer);
let api_data = <crate::api::structure_designer::structure_designer_api_types::APIParameterData>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok({ crate::api::structure_designer::structure_designer_api::set_parameter_data(api_node_id, api_data); })?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__structure_designer__structure_designer_api__set_range_data_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "set_range_data", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_node_id = <u64>::sse_decode(&mut deserializer);
let api_data = <crate::api::structure_designer::structure_designer_api_types::APIRangeData>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok({ crate::api::structure_designer::structure_designer_api::set_range_data(api_node_id, api_data); })?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__structure_designer__structure_designer_api__set_rect_data_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "set_rect_data", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_node_id = <u64>::sse_decode(&mut deserializer);
let api_data = <crate::api::structure_designer::structure_designer_api_types::APIRectData>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok({ crate::api::structure_designer::structure_designer_api::set_rect_data(api_node_id, api_data); })?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__structure_designer__structure_designer_api__set_reg_poly_data_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "set_reg_poly_data", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_node_id = <u64>::sse_decode(&mut deserializer);
let api_data = <crate::api::structure_designer::structure_designer_api_types::APIRegPolyData>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok({ crate::api::structure_designer::structure_designer_api::set_reg_poly_data(api_node_id, api_data); })?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__structure_designer__structure_designer_api__set_return_node_id_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "set_return_node_id",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_node_id = <Option<u64>>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::api::structure_designer::structure_designer_api::set_return_node_id(
                        api_node_id,
                    ),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__structure_designer__structure_designer_api__set_sphere_data_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "set_sphere_data", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_node_id = <u64>::sse_decode(&mut deserializer);
let api_data = <crate::api::structure_designer::structure_designer_api_types::APISphereData>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok({ crate::api::structure_designer::structure_designer_api::set_sphere_data(api_node_id, api_data); })?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__structure_designer__structure_designer_api__set_string_data_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "set_string_data", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_node_id = <u64>::sse_decode(&mut deserializer);
let api_data = <crate::api::structure_designer::structure_designer_api_types::APIStringData>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok({ crate::api::structure_designer::structure_designer_api::set_string_data(api_node_id, api_data); })?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__structure_designer__structure_designer_api__set_structure_designer_preferences_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "set_structure_designer_preferences", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_preferences = <crate::api::structure_designer::structure_designer_preferences::StructureDesignerPreferences>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok({ crate::api::structure_designer::structure_designer_api::set_structure_designer_preferences(api_preferences); })?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__structure_designer__structure_designer_api__set_unit_cell_data_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "set_unit_cell_data", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_node_id = <u64>::sse_decode(&mut deserializer);
let api_data = <crate::api::structure_designer::structure_designer_api_types::APIUnitCellData>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok({ crate::api::structure_designer::structure_designer_api::set_unit_cell_data(api_node_id, api_data); })?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__structure_designer__structure_designer_api__set_vec2_data_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "set_vec2_data", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_node_id = <u64>::sse_decode(&mut deserializer);
let api_data = <crate::api::structure_designer::structure_designer_api_types::APIVec2Data>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok({ crate::api::structure_designer::structure_designer_api::set_vec2_data(api_node_id, api_data); })?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__structure_designer__structure_designer_api__set_vec3_data_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "set_vec3_data", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_node_id = <u64>::sse_decode(&mut deserializer);
let api_data = <crate::api::structure_designer::structure_designer_api_types::APIVec3Data>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok({ crate::api::structure_designer::structure_designer_api::set_vec3_data(api_node_id, api_data); })?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__common_api__set_viewport_size_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "set_viewport_size",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_width = <u32>::sse_decode(&mut deserializer);
            let api_height = <u32>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok({
                    crate::api::common_api::set_viewport_size(api_width, api_height);
                })?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__structure_designer__facet_shell_api__split_symmetry_members_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "split_symmetry_members",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_node_id = <u64>::sse_decode(&mut deserializer);
            let api_facet_index = <usize>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::api::structure_designer::facet_shell_api::split_symmetry_members(
                        api_node_id,
                        api_facet_index,
                    ),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__structure_designer__structure_designer_preferences__structure_designer_preferences_clone_self_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "structure_designer_preferences_clone_self", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::api::structure_designer::structure_designer_preferences::StructureDesignerPreferences>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::api::structure_designer::structure_designer_preferences::StructureDesignerPreferences::clone_self(&api_that))?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__structure_designer__structure_designer_preferences__structure_designer_preferences_new_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "structure_designer_preferences_new", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::api::structure_designer::structure_designer_preferences::StructureDesignerPreferences::new())?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__common_api__sync_gadget_data_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "sync_gadget_data",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(crate::api::common_api::sync_gadget_data())?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__structure_designer__edit_atom_api__transform_selected_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "transform_selected",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_abs_transform =
                <crate::api::common_api_types::APITransform>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok({
                    crate::api::structure_designer::edit_atom_api::transform_selected(
                        api_abs_transform,
                    );
                })?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__structure_designer__facet_shell_api__update_facet_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "update_facet", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_node_id = <u64>::sse_decode(&mut deserializer);
let api_index = <usize>::sse_decode(&mut deserializer);
let api_facet = <crate::api::structure_designer::structure_designer_api_types::APIFacet>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::api::structure_designer::facet_shell_api::update_facet(api_node_id, api_index, api_facet))?;   Ok(output_ok)
                })()) })
}

// Section: dart2rust

impl SseDecode
    for std::collections::HashMap<
        u64,
        crate::api::structure_designer::structure_designer_api_types::NodeView,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<(
            u64,
            crate::api::structure_designer::structure_designer_api_types::NodeView,
        )>>::sse_decode(deserializer);
        return inner.into_iter().collect();
    }
}

impl SseDecode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return String::from_utf8(inner).unwrap();
    }
}

impl SseDecode for crate::api::structure_designer::structure_designer_api_types::APIAtomCutData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_cutSdfValue = <f64>::sse_decode(deserializer);
        let mut var_unitCellSize = <f64>::sse_decode(deserializer);
        return crate::api::structure_designer::structure_designer_api_types::APIAtomCutData {
            cut_sdf_value: var_cutSdfValue,
            unit_cell_size: var_unitCellSize,
        };
    }
}

impl SseDecode for crate::api::structure_designer::structure_designer_api_types::APIAtomFillData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_parameterElementValueDefinition = <String>::sse_decode(deserializer);
        let mut var_motifOffset = <crate::api::common_api_types::APIVec3>::sse_decode(deserializer);
        let mut var_hydrogenPassivation = <bool>::sse_decode(deserializer);
        let mut var_error = <Option<String>>::sse_decode(deserializer);
        return crate::api::structure_designer::structure_designer_api_types::APIAtomFillData {
            parameter_element_value_definition: var_parameterElementValueDefinition,
            motif_offset: var_motifOffset,
            hydrogen_passivation: var_hydrogenPassivation,
            error: var_error,
        };
    }
}

impl SseDecode for crate::api::structure_designer::structure_designer_api_types::APIAtomTransData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_translation = <crate::api::common_api_types::APIVec3>::sse_decode(deserializer);
        let mut var_rotation = <crate::api::common_api_types::APIVec3>::sse_decode(deserializer);
        return crate::api::structure_designer::structure_designer_api_types::APIAtomTransData {
            translation: var_translation,
            rotation: var_rotation,
        };
    }
}

impl SseDecode for crate::api::structure_designer::structure_designer_api_types::APIBoolData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_value = <bool>::sse_decode(deserializer);
        return crate::api::structure_designer::structure_designer_api_types::APIBoolData {
            value: var_value,
        };
    }
}

impl SseDecode for crate::api::common_api_types::APICamera {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_eye = <crate::api::common_api_types::APIVec3>::sse_decode(deserializer);
        let mut var_target = <crate::api::common_api_types::APIVec3>::sse_decode(deserializer);
        let mut var_up = <crate::api::common_api_types::APIVec3>::sse_decode(deserializer);
        let mut var_aspect = <f64>::sse_decode(deserializer);
        let mut var_fovy = <f64>::sse_decode(deserializer);
        let mut var_znear = <f64>::sse_decode(deserializer);
        let mut var_zfar = <f64>::sse_decode(deserializer);
        let mut var_orthographic = <bool>::sse_decode(deserializer);
        let mut var_orthoHalfHeight = <f64>::sse_decode(deserializer);
        let mut var_pivotPoint = <crate::api::common_api_types::APIVec3>::sse_decode(deserializer);
        return crate::api::common_api_types::APICamera {
            eye: var_eye,
            target: var_target,
            up: var_up,
            aspect: var_aspect,
            fovy: var_fovy,
            znear: var_znear,
            zfar: var_zfar,
            orthographic: var_orthographic,
            ortho_half_height: var_orthoHalfHeight,
            pivot_point: var_pivotPoint,
        };
    }
}

impl SseDecode for crate::api::common_api_types::APICameraCanonicalView {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::common_api_types::APICameraCanonicalView::Custom,
            1 => crate::api::common_api_types::APICameraCanonicalView::Top,
            2 => crate::api::common_api_types::APICameraCanonicalView::Bottom,
            3 => crate::api::common_api_types::APICameraCanonicalView::Front,
            4 => crate::api::common_api_types::APICameraCanonicalView::Back,
            5 => crate::api::common_api_types::APICameraCanonicalView::Left,
            6 => crate::api::common_api_types::APICameraCanonicalView::Right,
            _ => unreachable!("Invalid variant for APICameraCanonicalView: {}", inner),
        };
    }
}

impl SseDecode for crate::api::structure_designer::structure_designer_api_types::APICircleData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_center = <crate::api::common_api_types::APIIVec2>::sse_decode(deserializer);
        let mut var_radius = <i32>::sse_decode(deserializer);
        return crate::api::structure_designer::structure_designer_api_types::APICircleData {
            center: var_center,
            radius: var_radius,
        };
    }
}

impl SseDecode
    for crate::api::structure_designer::structure_designer_api_types::APICrystalTypeInfo
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_primaryAtomicNumber = <i32>::sse_decode(deserializer);
        let mut var_secondaryAtomicNumber = <i32>::sse_decode(deserializer);
        let mut var_unitCellSize = <f64>::sse_decode(deserializer);
        let mut var_name = <String>::sse_decode(deserializer);
        return crate::api::structure_designer::structure_designer_api_types::APICrystalTypeInfo {
            primary_atomic_number: var_primaryAtomicNumber,
            secondary_atomic_number: var_secondaryAtomicNumber,
            unit_cell_size: var_unitCellSize,
            name: var_name,
        };
    }
}

impl SseDecode for crate::api::structure_designer::structure_designer_api_types::APICuboidData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_minCorner = <crate::api::common_api_types::APIIVec3>::sse_decode(deserializer);
        let mut var_extent = <crate::api::common_api_types::APIIVec3>::sse_decode(deserializer);
        return crate::api::structure_designer::structure_designer_api_types::APICuboidData {
            min_corner: var_minCorner,
            extent: var_extent,
        };
    }
}

impl SseDecode for crate::api::structure_designer::structure_designer_api_types::APIDataType {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_dataTypeBase = <crate::api::structure_designer::structure_designer_api_types::APIDataTypeBase>::sse_decode(deserializer);
        let mut var_customDataType = <Option<String>>::sse_decode(deserializer);
        let mut var_array = <bool>::sse_decode(deserializer);
        return crate::api::structure_designer::structure_designer_api_types::APIDataType {
            data_type_base: var_dataTypeBase,
            custom_data_type: var_customDataType,
            array: var_array,
        };
    }
}

impl SseDecode for crate::api::structure_designer::structure_designer_api_types::APIDataTypeBase {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::structure_designer::structure_designer_api_types::APIDataTypeBase::None,
1 => crate::api::structure_designer::structure_designer_api_types::APIDataTypeBase::Bool,
2 => crate::api::structure_designer::structure_designer_api_types::APIDataTypeBase::String,
3 => crate::api::structure_designer::structure_designer_api_types::APIDataTypeBase::Int,
4 => crate::api::structure_designer::structure_designer_api_types::APIDataTypeBase::Float,
5 => crate::api::structure_designer::structure_designer_api_types::APIDataTypeBase::Vec2,
6 => crate::api::structure_designer::structure_designer_api_types::APIDataTypeBase::Vec3,
7 => crate::api::structure_designer::structure_designer_api_types::APIDataTypeBase::IVec2,
8 => crate::api::structure_designer::structure_designer_api_types::APIDataTypeBase::IVec3,
9 => crate::api::structure_designer::structure_designer_api_types::APIDataTypeBase::UnitCell,
10 => crate::api::structure_designer::structure_designer_api_types::APIDataTypeBase::Geometry2D,
11 => crate::api::structure_designer::structure_designer_api_types::APIDataTypeBase::Geometry,
12 => crate::api::structure_designer::structure_designer_api_types::APIDataTypeBase::Atomic,
13 => crate::api::structure_designer::structure_designer_api_types::APIDataTypeBase::Motif,
14 => crate::api::structure_designer::structure_designer_api_types::APIDataTypeBase::Custom,
            _ => unreachable!("Invalid variant for APIDataTypeBase: {}", inner),
        };
    }
}

impl SseDecode for crate::api::structure_designer::structure_designer_api_types::APIEditAtomData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_activeTool = <crate::api::structure_designer::structure_designer_api_types::APIEditAtomTool>::sse_decode(deserializer);
        let mut var_canUndo = <bool>::sse_decode(deserializer);
        let mut var_canRedo = <bool>::sse_decode(deserializer);
        let mut var_bondToolLastAtomId = <Option<u64>>::sse_decode(deserializer);
        let mut var_replacementAtomicNumber = <Option<i32>>::sse_decode(deserializer);
        let mut var_addAtomToolAtomicNumber = <Option<i32>>::sse_decode(deserializer);
        let mut var_hasSelectedAtoms = <bool>::sse_decode(deserializer);
        let mut var_hasSelection = <bool>::sse_decode(deserializer);
        let mut var_selectionTransform =
            <Option<crate::api::common_api_types::APITransform>>::sse_decode(deserializer);
        return crate::api::structure_designer::structure_designer_api_types::APIEditAtomData {
            active_tool: var_activeTool,
            can_undo: var_canUndo,
            can_redo: var_canRedo,
            bond_tool_last_atom_id: var_bondToolLastAtomId,
            replacement_atomic_number: var_replacementAtomicNumber,
            add_atom_tool_atomic_number: var_addAtomToolAtomicNumber,
            has_selected_atoms: var_hasSelectedAtoms,
            has_selection: var_hasSelection,
            selection_transform: var_selectionTransform,
        };
    }
}

impl SseDecode for crate::api::structure_designer::structure_designer_api_types::APIEditAtomTool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::structure_designer::structure_designer_api_types::APIEditAtomTool::Default,
1 => crate::api::structure_designer::structure_designer_api_types::APIEditAtomTool::AddAtom,
2 => crate::api::structure_designer::structure_designer_api_types::APIEditAtomTool::AddBond,
            _ => unreachable!("Invalid variant for APIEditAtomTool: {}", inner),
        };
    }
}

impl SseDecode for crate::api::structure_designer::structure_designer_api_types::APIExportXYZData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_fileName = <String>::sse_decode(deserializer);
        return crate::api::structure_designer::structure_designer_api_types::APIExportXYZData {
            file_name: var_fileName,
        };
    }
}

impl SseDecode for crate::api::structure_designer::structure_designer_api_types::APIExprData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_parameters = <Vec<
            crate::api::structure_designer::structure_designer_api_types::APIExprParameter,
        >>::sse_decode(deserializer);
        let mut var_expression = <String>::sse_decode(deserializer);
        let mut var_error = <Option<String>>::sse_decode(deserializer);
        let mut var_outputType = <Option<
            crate::api::structure_designer::structure_designer_api_types::APIDataType,
        >>::sse_decode(deserializer);
        return crate::api::structure_designer::structure_designer_api_types::APIExprData {
            parameters: var_parameters,
            expression: var_expression,
            error: var_error,
            output_type: var_outputType,
        };
    }
}

impl SseDecode for crate::api::structure_designer::structure_designer_api_types::APIExprParameter {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_dataType =
            <crate::api::structure_designer::structure_designer_api_types::APIDataType>::sse_decode(
                deserializer,
            );
        return crate::api::structure_designer::structure_designer_api_types::APIExprParameter {
            name: var_name,
            data_type: var_dataType,
        };
    }
}

impl SseDecode for crate::api::structure_designer::structure_designer_api_types::APIExtrudeData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_height = <i32>::sse_decode(deserializer);
        return crate::api::structure_designer::structure_designer_api_types::APIExtrudeData {
            height: var_height,
        };
    }
}

impl SseDecode for crate::api::structure_designer::structure_designer_api_types::APIFacet {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_millerIndex =
            <crate::api::common_api_types::APIIVec3>::sse_decode(deserializer);
        let mut var_shift = <i32>::sse_decode(deserializer);
        let mut var_symmetrize = <bool>::sse_decode(deserializer);
        let mut var_visible = <bool>::sse_decode(deserializer);
        return crate::api::structure_designer::structure_designer_api_types::APIFacet {
            miller_index: var_millerIndex,
            shift: var_shift,
            symmetrize: var_symmetrize,
            visible: var_visible,
        };
    }
}

impl SseDecode for crate::api::structure_designer::structure_designer_api_types::APIFacetShellData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_maxMillerIndex = <i32>::sse_decode(deserializer);
        let mut var_center = <crate::api::common_api_types::APIIVec3>::sse_decode(deserializer);
        let mut var_facets = <Vec<
            crate::api::structure_designer::structure_designer_api_types::APIFacet,
        >>::sse_decode(deserializer);
        let mut var_selectedFacetIndex = <Option<usize>>::sse_decode(deserializer);
        return crate::api::structure_designer::structure_designer_api_types::APIFacetShellData {
            max_miller_index: var_maxMillerIndex,
            center: var_center,
            facets: var_facets,
            selected_facet_index: var_selectedFacetIndex,
        };
    }
}

impl SseDecode for crate::api::structure_designer::structure_designer_api_types::APIFloatData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_value = <f64>::sse_decode(deserializer);
        return crate::api::structure_designer::structure_designer_api_types::APIFloatData {
            value: var_value,
        };
    }
}

impl SseDecode for crate::api::structure_designer::structure_designer_api_types::APIGeoToAtomData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_primaryAtomicNumber = <i32>::sse_decode(deserializer);
        let mut var_secondaryAtomicNumber = <i32>::sse_decode(deserializer);
        let mut var_hydrogenPassivation = <bool>::sse_decode(deserializer);
        return crate::api::structure_designer::structure_designer_api_types::APIGeoToAtomData {
            primary_atomic_number: var_primaryAtomicNumber,
            secondary_atomic_number: var_secondaryAtomicNumber,
            hydrogen_passivation: var_hydrogenPassivation,
        };
    }
}

impl SseDecode for crate::api::structure_designer::structure_designer_api_types::APIGeoTransData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_translation =
            <crate::api::common_api_types::APIIVec3>::sse_decode(deserializer);
        let mut var_rotation = <crate::api::common_api_types::APIIVec3>::sse_decode(deserializer);
        let mut var_transformOnlyFrame = <bool>::sse_decode(deserializer);
        return crate::api::structure_designer::structure_designer_api_types::APIGeoTransData {
            translation: var_translation,
            rotation: var_rotation,
            transform_only_frame: var_transformOnlyFrame,
        };
    }
}

impl SseDecode for crate::api::structure_designer::structure_designer_api_types::APIHalfPlaneData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_point1 = <crate::api::common_api_types::APIIVec2>::sse_decode(deserializer);
        let mut var_point2 = <crate::api::common_api_types::APIIVec2>::sse_decode(deserializer);
        return crate::api::structure_designer::structure_designer_api_types::APIHalfPlaneData {
            point1: var_point1,
            point2: var_point2,
        };
    }
}

impl SseDecode for crate::api::structure_designer::structure_designer_api_types::APIHalfSpaceData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_maxMillerIndex = <i32>::sse_decode(deserializer);
        let mut var_millerIndex =
            <crate::api::common_api_types::APIIVec3>::sse_decode(deserializer);
        let mut var_center = <crate::api::common_api_types::APIIVec3>::sse_decode(deserializer);
        let mut var_shift = <i32>::sse_decode(deserializer);
        return crate::api::structure_designer::structure_designer_api_types::APIHalfSpaceData {
            max_miller_index: var_maxMillerIndex,
            miller_index: var_millerIndex,
            center: var_center,
            shift: var_shift,
        };
    }
}

impl SseDecode for crate::api::structure_designer::structure_designer_api_types::APIImportXYZData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_fileName = <Option<String>>::sse_decode(deserializer);
        return crate::api::structure_designer::structure_designer_api_types::APIImportXYZData {
            file_name: var_fileName,
        };
    }
}

impl SseDecode for crate::api::structure_designer::structure_designer_api_types::APIIntData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_value = <i32>::sse_decode(deserializer);
        return crate::api::structure_designer::structure_designer_api_types::APIIntData {
            value: var_value,
        };
    }
}

impl SseDecode
    for crate::api::structure_designer::structure_designer_api_types::APILatticeSymopData
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_translation =
            <crate::api::common_api_types::APIIVec3>::sse_decode(deserializer);
        let mut var_rotationAxis =
            <Option<crate::api::common_api_types::APIVec3>>::sse_decode(deserializer);
        let mut var_rotationAngleDegrees = <f64>::sse_decode(deserializer);
        let mut var_transformOnlyFrame = <bool>::sse_decode(deserializer);
        let mut var_rotationalSymmetries = <Vec<
            crate::api::structure_designer::structure_designer_api_types::APIRotationalSymmetry,
        >>::sse_decode(deserializer);
        let mut var_crystalSystem = <String>::sse_decode(deserializer);
        return crate::api::structure_designer::structure_designer_api_types::APILatticeSymopData {
            translation: var_translation,
            rotation_axis: var_rotationAxis,
            rotation_angle_degrees: var_rotationAngleDegrees,
            transform_only_frame: var_transformOnlyFrame,
            rotational_symmetries: var_rotationalSymmetries,
            crystal_system: var_crystalSystem,
        };
    }
}

impl SseDecode for crate::api::structure_designer::structure_designer_api_types::APIMapData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_inputType =
            <crate::api::structure_designer::structure_designer_api_types::APIDataType>::sse_decode(
                deserializer,
            );
        let mut var_outputType =
            <crate::api::structure_designer::structure_designer_api_types::APIDataType>::sse_decode(
                deserializer,
            );
        return crate::api::structure_designer::structure_designer_api_types::APIMapData {
            input_type: var_inputType,
            output_type: var_outputType,
        };
    }
}

impl SseDecode for crate::api::structure_designer::structure_designer_api_types::APIMotifData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_definition = <String>::sse_decode(deserializer);
        let mut var_name = <Option<String>>::sse_decode(deserializer);
        let mut var_error = <Option<String>>::sse_decode(deserializer);
        return crate::api::structure_designer::structure_designer_api_types::APIMotifData {
            definition: var_definition,
            name: var_name,
            error: var_error,
        };
    }
}

impl SseDecode
    for crate::api::structure_designer::structure_designer_api_types::APINetworkWithValidationErrors
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_validationErrors = <Option<String>>::sse_decode(deserializer);
        return crate::api::structure_designer::structure_designer_api_types::APINetworkWithValidationErrors{name: var_name, validation_errors: var_validationErrors};
    }
}

impl SseDecode for crate::api::structure_designer::structure_designer_api_types::APIParameterData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_paramIndex = <usize>::sse_decode(deserializer);
        let mut var_paramName = <String>::sse_decode(deserializer);
        let mut var_dataType =
            <crate::api::structure_designer::structure_designer_api_types::APIDataType>::sse_decode(
                deserializer,
            );
        let mut var_sortOrder = <i32>::sse_decode(deserializer);
        let mut var_error = <Option<String>>::sse_decode(deserializer);
        return crate::api::structure_designer::structure_designer_api_types::APIParameterData {
            param_index: var_paramIndex,
            param_name: var_paramName,
            data_type: var_dataType,
            sort_order: var_sortOrder,
            error: var_error,
        };
    }
}

impl SseDecode for crate::api::structure_designer::structure_designer_api_types::APIRangeData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_start = <i32>::sse_decode(deserializer);
        let mut var_step = <i32>::sse_decode(deserializer);
        let mut var_count = <i32>::sse_decode(deserializer);
        return crate::api::structure_designer::structure_designer_api_types::APIRangeData {
            start: var_start,
            step: var_step,
            count: var_count,
        };
    }
}

impl SseDecode for crate::api::structure_designer::structure_designer_api_types::APIRectData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_minCorner = <crate::api::common_api_types::APIIVec2>::sse_decode(deserializer);
        let mut var_extent = <crate::api::common_api_types::APIIVec2>::sse_decode(deserializer);
        return crate::api::structure_designer::structure_designer_api_types::APIRectData {
            min_corner: var_minCorner,
            extent: var_extent,
        };
    }
}

impl SseDecode for crate::api::structure_designer::structure_designer_api_types::APIRegPolyData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_numSides = <i32>::sse_decode(deserializer);
        let mut var_radius = <i32>::sse_decode(deserializer);
        return crate::api::structure_designer::structure_designer_api_types::APIRegPolyData {
            num_sides: var_numSides,
            radius: var_radius,
        };
    }
}

impl SseDecode for crate::api::common_api_types::APIResult {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_success = <bool>::sse_decode(deserializer);
        let mut var_errorMessage = <String>::sse_decode(deserializer);
        return crate::api::common_api_types::APIResult {
            success: var_success,
            error_message: var_errorMessage,
        };
    }
}

impl SseDecode
    for crate::api::structure_designer::structure_designer_api_types::APIRotationalSymmetry
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_axis = <crate::api::common_api_types::APIVec3>::sse_decode(deserializer);
        let mut var_nFold = <u32>::sse_decode(deserializer);
        return crate::api::structure_designer::structure_designer_api_types::APIRotationalSymmetry{axis: var_axis, n_fold: var_nFold};
    }
}

impl SseDecode for crate::api::structure_designer::structure_designer_api_types::APISphereData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_center = <crate::api::common_api_types::APIIVec3>::sse_decode(deserializer);
        let mut var_radius = <i32>::sse_decode(deserializer);
        return crate::api::structure_designer::structure_designer_api_types::APISphereData {
            center: var_center,
            radius: var_radius,
        };
    }
}

impl SseDecode for crate::api::structure_designer::structure_designer_api_types::APIStringData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_value = <String>::sse_decode(deserializer);
        return crate::api::structure_designer::structure_designer_api_types::APIStringData {
            value: var_value,
        };
    }
}

impl SseDecode for crate::api::common_api_types::APITransform {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_translation = <crate::api::common_api_types::APIVec3>::sse_decode(deserializer);
        let mut var_rotation = <crate::api::common_api_types::APIVec3>::sse_decode(deserializer);
        return crate::api::common_api_types::APITransform {
            translation: var_translation,
            rotation: var_rotation,
        };
    }
}

impl SseDecode for crate::api::structure_designer::structure_designer_api_types::APIUnitCellData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_cellLengthA = <f64>::sse_decode(deserializer);
        let mut var_cellLengthB = <f64>::sse_decode(deserializer);
        let mut var_cellLengthC = <f64>::sse_decode(deserializer);
        let mut var_cellAngleAlpha = <f64>::sse_decode(deserializer);
        let mut var_cellAngleBeta = <f64>::sse_decode(deserializer);
        let mut var_cellAngleGamma = <f64>::sse_decode(deserializer);
        let mut var_crystalSystem = <String>::sse_decode(deserializer);
        return crate::api::structure_designer::structure_designer_api_types::APIUnitCellData {
            cell_length_a: var_cellLengthA,
            cell_length_b: var_cellLengthB,
            cell_length_c: var_cellLengthC,
            cell_angle_alpha: var_cellAngleAlpha,
            cell_angle_beta: var_cellAngleBeta,
            cell_angle_gamma: var_cellAngleGamma,
            crystal_system: var_crystalSystem,
        };
    }
}

impl SseDecode for crate::api::common_api_types::APIVec2 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_x = <f64>::sse_decode(deserializer);
        let mut var_y = <f64>::sse_decode(deserializer);
        return crate::api::common_api_types::APIVec2 { x: var_x, y: var_y };
    }
}

impl SseDecode for crate::api::structure_designer::structure_designer_api_types::APIVec2Data {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_value = <crate::api::common_api_types::APIVec2>::sse_decode(deserializer);
        return crate::api::structure_designer::structure_designer_api_types::APIVec2Data {
            value: var_value,
        };
    }
}

impl SseDecode for crate::api::common_api_types::APIVec3 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_x = <f64>::sse_decode(deserializer);
        let mut var_y = <f64>::sse_decode(deserializer);
        let mut var_z = <f64>::sse_decode(deserializer);
        return crate::api::common_api_types::APIVec3 {
            x: var_x,
            y: var_y,
            z: var_z,
        };
    }
}

impl SseDecode for crate::api::structure_designer::structure_designer_api_types::APIVec3Data {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_value = <crate::api::common_api_types::APIVec3>::sse_decode(deserializer);
        return crate::api::structure_designer::structure_designer_api_types::APIVec3Data {
            value: var_value,
        };
    }
}

impl SseDecode for crate::api::common_api_types::APIIVec2 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_x = <i32>::sse_decode(deserializer);
        let mut var_y = <i32>::sse_decode(deserializer);
        return crate::api::common_api_types::APIIVec2 { x: var_x, y: var_y };
    }
}

impl SseDecode for crate::api::structure_designer::structure_designer_api_types::APIIVec2Data {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_value = <crate::api::common_api_types::APIIVec2>::sse_decode(deserializer);
        return crate::api::structure_designer::structure_designer_api_types::APIIVec2Data {
            value: var_value,
        };
    }
}

impl SseDecode for crate::api::common_api_types::APIIVec3 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_x = <i32>::sse_decode(deserializer);
        let mut var_y = <i32>::sse_decode(deserializer);
        let mut var_z = <i32>::sse_decode(deserializer);
        return crate::api::common_api_types::APIIVec3 {
            x: var_x,
            y: var_y,
            z: var_z,
        };
    }
}

impl SseDecode for crate::api::structure_designer::structure_designer_api_types::APIIVec3Data {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_value = <crate::api::common_api_types::APIIVec3>::sse_decode(deserializer);
        return crate::api::structure_designer::structure_designer_api_types::APIIVec3Data {
            value: var_value,
        };
    }
}

impl SseDecode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap() != 0
    }
}

impl SseDecode for crate::api::common_api_types::ElementSummary {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_atomicNumber = <i32>::sse_decode(deserializer);
        let mut var_elementName = <String>::sse_decode(deserializer);
        return crate::api::common_api_types::ElementSummary {
            atomic_number: var_atomicNumber,
            element_name: var_elementName,
        };
    }
}

impl SseDecode for f64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_f64::<NativeEndian>().unwrap()
    }
}

impl SseDecode
    for crate::api::structure_designer::structure_designer_preferences::GeometryVisualization
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::structure_designer::structure_designer_preferences::GeometryVisualization::SurfaceSplatting,
1 => crate::api::structure_designer::structure_designer_preferences::GeometryVisualization::DualContouring,
2 => crate::api::structure_designer::structure_designer_preferences::GeometryVisualization::ExplicitMesh,
            _ => unreachable!("Invalid variant for GeometryVisualization: {}", inner),
        };
    }
}

impl SseDecode for crate::api::structure_designer::structure_designer_preferences::GeometryVisualizationPreferences {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut var_geometryVisualization = <crate::api::structure_designer::structure_designer_preferences::GeometryVisualization>::sse_decode(deserializer);
let mut var_wireframeGeometry = <bool>::sse_decode(deserializer);
let mut var_samplesPerUnitCell = <i32>::sse_decode(deserializer);
let mut var_sharpnessAngleThresholdDegree = <f64>::sse_decode(deserializer);
let mut var_meshSmoothing = <crate::api::structure_designer::structure_designer_preferences::MeshSmoothing>::sse_decode(deserializer);
let mut var_displayCameraTarget = <bool>::sse_decode(deserializer);
return crate::api::structure_designer::structure_designer_preferences::GeometryVisualizationPreferences{geometry_visualization: var_geometryVisualization, wireframe_geometry: var_wireframeGeometry, samples_per_unit_cell: var_samplesPerUnitCell, sharpness_angle_threshold_degree: var_sharpnessAngleThresholdDegree, mesh_smoothing: var_meshSmoothing, display_camera_target: var_displayCameraTarget};}
                }

impl SseDecode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for crate::api::structure_designer::structure_designer_api_types::InputPinView {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_dataType = <String>::sse_decode(deserializer);
        let mut var_multi = <bool>::sse_decode(deserializer);
        return crate::api::structure_designer::structure_designer_api_types::InputPinView {
            name: var_name,
            data_type: var_dataType,
            multi: var_multi,
        };
    }
}

impl SseDecode for Vec<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<String>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode
    for Vec<crate::api::structure_designer::structure_designer_api_types::APICrystalTypeInfo>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::structure_designer::structure_designer_api_types::APICrystalTypeInfo>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode
    for Vec<crate::api::structure_designer::structure_designer_api_types::APIExprParameter>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::structure_designer::structure_designer_api_types::APIExprParameter>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::structure_designer::structure_designer_api_types::APIFacet> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::structure_designer::structure_designer_api_types::APIFacet>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::structure_designer::structure_designer_api_types::APINetworkWithValidationErrors> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ { ans_.push(<crate::api::structure_designer::structure_designer_api_types::APINetworkWithValidationErrors>::sse_decode(deserializer)); }
        return ans_;}
                }

impl SseDecode
    for Vec<crate::api::structure_designer::structure_designer_api_types::APIRotationalSymmetry>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::structure_designer::structure_designer_api_types::APIRotationalSymmetry>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::common_api_types::ElementSummary> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::common_api_types::ElementSummary>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::structure_designer::structure_designer_api_types::InputPinView> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::structure_designer::structure_designer_api_types::InputPinView>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<u8>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode
    for Vec<(
        u64,
        crate::api::structure_designer::structure_designer_api_types::NodeView,
    )>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<(
                u64,
                crate::api::structure_designer::structure_designer_api_types::NodeView,
            )>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::structure_designer::structure_designer_api_types::WireView> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::structure_designer::structure_designer_api_types::WireView>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for crate::api::structure_designer::structure_designer_preferences::MeshSmoothing {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::structure_designer::structure_designer_preferences::MeshSmoothing::Smooth,
1 => crate::api::structure_designer::structure_designer_preferences::MeshSmoothing::Sharp,
2 => crate::api::structure_designer::structure_designer_preferences::MeshSmoothing::SmoothingGroupBased,
            _ => unreachable!("Invalid variant for MeshSmoothing: {}", inner),
        };
    }
}

impl SseDecode
    for crate::api::structure_designer::structure_designer_preferences::NodeDisplayPolicy
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::structure_designer::structure_designer_preferences::NodeDisplayPolicy::Manual,
1 => crate::api::structure_designer::structure_designer_preferences::NodeDisplayPolicy::PreferSelected,
2 => crate::api::structure_designer::structure_designer_preferences::NodeDisplayPolicy::PreferFrontier,
            _ => unreachable!("Invalid variant for NodeDisplayPolicy: {}", inner),
        };
    }
}

impl SseDecode
    for crate::api::structure_designer::structure_designer_preferences::NodeDisplayPreferences
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_displayPolicy = <crate::api::structure_designer::structure_designer_preferences::NodeDisplayPolicy>::sse_decode(deserializer);
        return crate::api::structure_designer::structure_designer_preferences::NodeDisplayPreferences{display_policy: var_displayPolicy};
    }
}

impl SseDecode for crate::api::structure_designer::structure_designer_api_types::NodeNetworkView {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_nodes = <std::collections::HashMap<
            u64,
            crate::api::structure_designer::structure_designer_api_types::NodeView,
        >>::sse_decode(deserializer);
        let mut var_wires = <Vec<
            crate::api::structure_designer::structure_designer_api_types::WireView,
        >>::sse_decode(deserializer);
        return crate::api::structure_designer::structure_designer_api_types::NodeNetworkView {
            name: var_name,
            nodes: var_nodes,
            wires: var_wires,
        };
    }
}

impl SseDecode for crate::api::structure_designer::structure_designer_api_types::NodeView {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_id = <u64>::sse_decode(deserializer);
        let mut var_nodeTypeName = <String>::sse_decode(deserializer);
        let mut var_position = <crate::api::common_api_types::APIVec2>::sse_decode(deserializer);
        let mut var_inputPins = <Vec<
            crate::api::structure_designer::structure_designer_api_types::InputPinView,
        >>::sse_decode(deserializer);
        let mut var_outputType = <String>::sse_decode(deserializer);
        let mut var_functionType = <String>::sse_decode(deserializer);
        let mut var_selected = <bool>::sse_decode(deserializer);
        let mut var_displayed = <bool>::sse_decode(deserializer);
        let mut var_returnNode = <bool>::sse_decode(deserializer);
        let mut var_error = <Option<String>>::sse_decode(deserializer);
        let mut var_outputString = <Option<String>>::sse_decode(deserializer);
        let mut var_subtitle = <Option<String>>::sse_decode(deserializer);
        return crate::api::structure_designer::structure_designer_api_types::NodeView {
            id: var_id,
            node_type_name: var_nodeTypeName,
            position: var_position,
            input_pins: var_inputPins,
            output_type: var_outputType,
            function_type: var_functionType,
            selected: var_selected,
            displayed: var_displayed,
            return_node: var_returnNode,
            error: var_error,
            output_string: var_outputString,
            subtitle: var_subtitle,
        };
    }
}

impl SseDecode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<String>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode
    for Option<crate::api::structure_designer::structure_designer_api_types::APIAtomCutData>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::structure_designer::structure_designer_api_types::APIAtomCutData>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode
    for Option<crate::api::structure_designer::structure_designer_api_types::APIAtomFillData>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::structure_designer::structure_designer_api_types::APIAtomFillData>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode
    for Option<crate::api::structure_designer::structure_designer_api_types::APIAtomTransData>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::structure_designer::structure_designer_api_types::APIAtomTransData>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode
    for Option<crate::api::structure_designer::structure_designer_api_types::APIBoolData>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::structure_designer::structure_designer_api_types::APIBoolData>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::common_api_types::APICamera> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::common_api_types::APICamera>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode
    for Option<crate::api::structure_designer::structure_designer_api_types::APICircleData>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::structure_designer::structure_designer_api_types::APICircleData>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode
    for Option<crate::api::structure_designer::structure_designer_api_types::APICuboidData>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::structure_designer::structure_designer_api_types::APICuboidData>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode
    for Option<crate::api::structure_designer::structure_designer_api_types::APIDataType>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::structure_designer::structure_designer_api_types::APIDataType>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode
    for Option<crate::api::structure_designer::structure_designer_api_types::APIEditAtomData>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::structure_designer::structure_designer_api_types::APIEditAtomData>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode
    for Option<crate::api::structure_designer::structure_designer_api_types::APIEditAtomTool>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::structure_designer::structure_designer_api_types::APIEditAtomTool>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode
    for Option<crate::api::structure_designer::structure_designer_api_types::APIExportXYZData>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::structure_designer::structure_designer_api_types::APIExportXYZData>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode
    for Option<crate::api::structure_designer::structure_designer_api_types::APIExprData>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::structure_designer::structure_designer_api_types::APIExprData>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode
    for Option<crate::api::structure_designer::structure_designer_api_types::APIExtrudeData>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::structure_designer::structure_designer_api_types::APIExtrudeData>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode
    for Option<crate::api::structure_designer::structure_designer_api_types::APIFacetShellData>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::structure_designer::structure_designer_api_types::APIFacetShellData>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode
    for Option<crate::api::structure_designer::structure_designer_api_types::APIFloatData>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::structure_designer::structure_designer_api_types::APIFloatData>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode
    for Option<crate::api::structure_designer::structure_designer_api_types::APIGeoToAtomData>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::structure_designer::structure_designer_api_types::APIGeoToAtomData>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode
    for Option<crate::api::structure_designer::structure_designer_api_types::APIGeoTransData>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::structure_designer::structure_designer_api_types::APIGeoTransData>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode
    for Option<crate::api::structure_designer::structure_designer_api_types::APIHalfPlaneData>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::structure_designer::structure_designer_api_types::APIHalfPlaneData>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode
    for Option<crate::api::structure_designer::structure_designer_api_types::APIHalfSpaceData>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::structure_designer::structure_designer_api_types::APIHalfSpaceData>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode
    for Option<crate::api::structure_designer::structure_designer_api_types::APIImportXYZData>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::structure_designer::structure_designer_api_types::APIImportXYZData>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode
    for Option<crate::api::structure_designer::structure_designer_api_types::APIIntData>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::structure_designer::structure_designer_api_types::APIIntData>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode
    for Option<crate::api::structure_designer::structure_designer_api_types::APILatticeSymopData>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::structure_designer::structure_designer_api_types::APILatticeSymopData>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode
    for Option<crate::api::structure_designer::structure_designer_api_types::APIMapData>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::structure_designer::structure_designer_api_types::APIMapData>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode
    for Option<crate::api::structure_designer::structure_designer_api_types::APIMotifData>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::structure_designer::structure_designer_api_types::APIMotifData>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode
    for Option<crate::api::structure_designer::structure_designer_api_types::APIParameterData>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::structure_designer::structure_designer_api_types::APIParameterData>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode
    for Option<crate::api::structure_designer::structure_designer_api_types::APIRangeData>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::structure_designer::structure_designer_api_types::APIRangeData>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode
    for Option<crate::api::structure_designer::structure_designer_api_types::APIRectData>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::structure_designer::structure_designer_api_types::APIRectData>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode
    for Option<crate::api::structure_designer::structure_designer_api_types::APIRegPolyData>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::structure_designer::structure_designer_api_types::APIRegPolyData>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode
    for Option<crate::api::structure_designer::structure_designer_api_types::APISphereData>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::structure_designer::structure_designer_api_types::APISphereData>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode
    for Option<crate::api::structure_designer::structure_designer_api_types::APIStringData>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::structure_designer::structure_designer_api_types::APIStringData>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::common_api_types::APITransform> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::common_api_types::APITransform>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode
    for Option<crate::api::structure_designer::structure_designer_api_types::APIUnitCellData>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::structure_designer::structure_designer_api_types::APIUnitCellData>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode
    for Option<crate::api::structure_designer::structure_designer_api_types::APIVec2Data>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::structure_designer::structure_designer_api_types::APIVec2Data>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::common_api_types::APIVec3> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::common_api_types::APIVec3>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode
    for Option<crate::api::structure_designer::structure_designer_api_types::APIVec3Data>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::structure_designer::structure_designer_api_types::APIVec3Data>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode
    for Option<crate::api::structure_designer::structure_designer_api_types::APIIVec2Data>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::structure_designer::structure_designer_api_types::APIIVec2Data>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode
    for Option<crate::api::structure_designer::structure_designer_api_types::APIIVec3Data>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::structure_designer::structure_designer_api_types::APIIVec3Data>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<i32> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<i32>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode
    for Option<crate::api::structure_designer::structure_designer_api_types::NodeNetworkView>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::structure_designer::structure_designer_api_types::NodeNetworkView>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::structure_designer::structure_designer_preferences::StructureDesignerPreferences> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {if (<bool>::sse_decode(deserializer)) {
                return Some(<crate::api::structure_designer::structure_designer_preferences::StructureDesignerPreferences>::sse_decode(deserializer));
            } else {
                return None;
            }}
                }

impl SseDecode for Option<u64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<u64>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<usize> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<usize>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Vec<String>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Vec<String>>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Vec<crate::api::structure_designer::structure_designer_api_types::APINetworkWithValidationErrors>> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {if (<bool>::sse_decode(deserializer)) {
                return Some(<Vec<crate::api::structure_designer::structure_designer_api_types::APINetworkWithValidationErrors>>::sse_decode(deserializer));
            } else {
                return None;
            }}
                }

impl SseDecode
    for (
        u64,
        crate::api::structure_designer::structure_designer_api_types::NodeView,
    )
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <u64>::sse_decode(deserializer);
        let mut var_field1 =
            <crate::api::structure_designer::structure_designer_api_types::NodeView>::sse_decode(
                deserializer,
            );
        return (var_field0, var_field1);
    }
}

impl SseDecode for crate::api::common_api_types::SelectModifier {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::common_api_types::SelectModifier::Replace,
            1 => crate::api::common_api_types::SelectModifier::Toggle,
            2 => crate::api::common_api_types::SelectModifier::Expand,
            _ => unreachable!("Invalid variant for SelectModifier: {}", inner),
        };
    }
}

impl SseDecode
    for crate::api::structure_designer::structure_designer_preferences::StructureDesignerPreferences
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_geometryVisualizationPreferences = <crate::api::structure_designer::structure_designer_preferences::GeometryVisualizationPreferences>::sse_decode(deserializer);
        let mut var_nodeDisplayPreferences = <crate::api::structure_designer::structure_designer_preferences::NodeDisplayPreferences>::sse_decode(deserializer);
        return crate::api::structure_designer::structure_designer_preferences::StructureDesignerPreferences{geometry_visualization_preferences: var_geometryVisualizationPreferences, node_display_preferences: var_nodeDisplayPreferences};
    }
}

impl SseDecode for u32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for u64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap()
    }
}

impl SseDecode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {}
}

impl SseDecode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u64::<NativeEndian>().unwrap() as _
    }
}

impl SseDecode for crate::api::structure_designer::structure_designer_api_types::WireView {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_sourceNodeId = <u64>::sse_decode(deserializer);
        let mut var_sourceOutputPinIndex = <i32>::sse_decode(deserializer);
        let mut var_destNodeId = <u64>::sse_decode(deserializer);
        let mut var_destParamIndex = <usize>::sse_decode(deserializer);
        let mut var_selected = <bool>::sse_decode(deserializer);
        return crate::api::structure_designer::structure_designer_api_types::WireView {
            source_node_id: var_sourceNodeId,
            source_output_pin_index: var_sourceOutputPinIndex,
            dest_node_id: var_destNodeId,
            dest_param_index: var_destParamIndex,
            selected: var_selected,
        };
    }
}

fn pde_ffi_dispatcher_primary_impl(
    func_id: i32,
    port: flutter_rust_bridge::for_generated::MessagePort,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        71 => wire__crate__api__common_api__init_app_impl(port, ptr, rust_vec_len, data_len),
        _ => unreachable!(),
    }
}

fn pde_ffi_dispatcher_sync_impl(
    func_id: i32,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
                        1 => wire__crate__api__structure_designer__edit_atom_api__add_atom_by_ray_impl(ptr, rust_vec_len, data_len),
2 => wire__crate__api__structure_designer__facet_shell_api__add_facet_impl(ptr, rust_vec_len, data_len),
3 => wire__crate__api__structure_designer__structure_designer_api__add_new_node_network_impl(ptr, rust_vec_len, data_len),
4 => wire__crate__api__structure_designer__structure_designer_api__add_node_impl(ptr, rust_vec_len, data_len),
5 => wire__crate__api__common_api__adjust_camera_target_impl(ptr, rust_vec_len, data_len),
6 => wire__crate__api__structure_designer__structure_designer_api__can_connect_nodes_impl(ptr, rust_vec_len, data_len),
7 => wire__crate__api__structure_designer__facet_shell_api__clear_facets_impl(ptr, rust_vec_len, data_len),
8 => wire__crate__api__structure_designer__structure_designer_api__clear_selection_impl(ptr, rust_vec_len, data_len),
9 => wire__crate__api__structure_designer__structure_designer_api__connect_nodes_impl(ptr, rust_vec_len, data_len),
10 => wire__crate__api__structure_designer__structure_designer_api__delete_node_network_impl(ptr, rust_vec_len, data_len),
11 => wire__crate__api__structure_designer__structure_designer_api__delete_selected_impl(ptr, rust_vec_len, data_len),
12 => wire__crate__api__structure_designer__edit_atom_api__delete_selected_atoms_and_bonds_impl(ptr, rust_vec_len, data_len),
13 => wire__crate__api__structure_designer__edit_atom_api__draw_bond_by_ray_impl(ptr, rust_vec_len, data_len),
14 => wire__crate__api__structure_designer__structure_designer_api__duplicate_node_impl(ptr, rust_vec_len, data_len),
15 => wire__crate__api__structure_designer__edit_atom_api__edit_atom_redo_impl(ptr, rust_vec_len, data_len),
16 => wire__crate__api__structure_designer__edit_atom_api__edit_atom_undo_impl(ptr, rust_vec_len, data_len),
17 => wire__crate__api__structure_designer__structure_designer_api__export_visible_atomic_structures_impl(ptr, rust_vec_len, data_len),
18 => wire__crate__api__common_api__gadget_drag_impl(ptr, rust_vec_len, data_len),
19 => wire__crate__api__common_api__gadget_end_drag_impl(ptr, rust_vec_len, data_len),
20 => wire__crate__api__common_api__gadget_hit_test_impl(ptr, rust_vec_len, data_len),
21 => wire__crate__api__common_api__gadget_start_drag_impl(ptr, rust_vec_len, data_len),
22 => wire__crate__api__structure_designer__edit_atom_api__get_active_edit_atom_tool_impl(ptr, rust_vec_len, data_len),
23 => wire__crate__api__common_api__get_all_elements_impl(ptr, rust_vec_len, data_len),
24 => wire__crate__api__structure_designer__structure_designer_api__get_api_data_type_display_name_impl(ptr, rust_vec_len, data_len),
25 => wire__crate__api__structure_designer__structure_designer_api__get_atom_cut_data_impl(ptr, rust_vec_len, data_len),
26 => wire__crate__api__structure_designer__structure_designer_api__get_atom_fill_data_impl(ptr, rust_vec_len, data_len),
27 => wire__crate__api__structure_designer__structure_designer_api__get_atom_trans_data_impl(ptr, rust_vec_len, data_len),
28 => wire__crate__api__structure_designer__structure_designer_api__get_bool_data_impl(ptr, rust_vec_len, data_len),
29 => wire__crate__api__common_api__get_camera_impl(ptr, rust_vec_len, data_len),
30 => wire__crate__api__common_api__get_camera_canonical_view_impl(ptr, rust_vec_len, data_len),
31 => wire__crate__api__common_api__get_camera_transform_impl(ptr, rust_vec_len, data_len),
32 => wire__crate__api__structure_designer__structure_designer_api__get_circle_data_impl(ptr, rust_vec_len, data_len),
33 => wire__crate__api__structure_designer__geo_to_atom_api__get_crystal_types_impl(ptr, rust_vec_len, data_len),
34 => wire__crate__api__structure_designer__structure_designer_api__get_cuboid_data_impl(ptr, rust_vec_len, data_len),
35 => wire__crate__api__structure_designer__structure_designer_api__get_edit_atom_data_impl(ptr, rust_vec_len, data_len),
36 => wire__crate__api__structure_designer__structure_designer_api__get_export_xyz_data_impl(ptr, rust_vec_len, data_len),
37 => wire__crate__api__structure_designer__structure_designer_api__get_expr_data_impl(ptr, rust_vec_len, data_len),
38 => wire__crate__api__structure_designer__structure_designer_api__get_extrude_data_impl(ptr, rust_vec_len, data_len),
39 => wire__crate__api__structure_designer__facet_shell_api__get_facet_shell_data_impl(ptr, rust_vec_len, data_len),
40 => wire__crate__api__structure_designer__structure_designer_api__get_float_data_impl(ptr, rust_vec_len, data_len),
41 => wire__crate__api__structure_designer__structure_designer_api__get_geo_to_atom_data_impl(ptr, rust_vec_len, data_len),
42 => wire__crate__api__structure_designer__structure_designer_api__get_geo_trans_data_impl(ptr, rust_vec_len, data_len),
43 => wire__crate__api__structure_designer__structure_designer_api__get_half_plane_data_impl(ptr, rust_vec_len, data_len),
44 => wire__crate__api__structure_designer__structure_designer_api__get_half_space_data_impl(ptr, rust_vec_len, data_len),
45 => wire__crate__api__structure_designer__structure_designer_api__get_import_xyz_data_impl(ptr, rust_vec_len, data_len),
46 => wire__crate__api__structure_designer__structure_designer_api__get_int_data_impl(ptr, rust_vec_len, data_len),
47 => wire__crate__api__structure_designer__structure_designer_api__get_ivec2_data_impl(ptr, rust_vec_len, data_len),
48 => wire__crate__api__structure_designer__structure_designer_api__get_ivec3_data_impl(ptr, rust_vec_len, data_len),
49 => wire__crate__api__structure_designer__structure_designer_api__get_lattice_symop_data_impl(ptr, rust_vec_len, data_len),
50 => wire__crate__api__structure_designer__structure_designer_api__get_map_data_impl(ptr, rust_vec_len, data_len),
51 => wire__crate__api__structure_designer__structure_designer_api__get_motif_data_impl(ptr, rust_vec_len, data_len),
52 => wire__crate__api__structure_designer__structure_designer_api__get_node_network_names_impl(ptr, rust_vec_len, data_len),
53 => wire__crate__api__structure_designer__structure_designer_api__get_node_network_view_impl(ptr, rust_vec_len, data_len),
54 => wire__crate__api__structure_designer__structure_designer_api__get_node_networks_with_validation_impl(ptr, rust_vec_len, data_len),
55 => wire__crate__api__structure_designer__structure_designer_api__get_node_type_names_impl(ptr, rust_vec_len, data_len),
56 => wire__crate__api__common_api__get_ortho_half_height_impl(ptr, rust_vec_len, data_len),
57 => wire__crate__api__structure_designer__structure_designer_api__get_parameter_data_impl(ptr, rust_vec_len, data_len),
58 => wire__crate__api__structure_designer__structure_designer_api__get_range_data_impl(ptr, rust_vec_len, data_len),
59 => wire__crate__api__structure_designer__structure_designer_api__get_rect_data_impl(ptr, rust_vec_len, data_len),
60 => wire__crate__api__structure_designer__structure_designer_api__get_reg_poly_data_impl(ptr, rust_vec_len, data_len),
61 => wire__crate__api__structure_designer__relax_api__get_relax_message_impl(ptr, rust_vec_len, data_len),
62 => wire__crate__api__structure_designer__structure_designer_api__get_sphere_data_impl(ptr, rust_vec_len, data_len),
63 => wire__crate__api__structure_designer__structure_designer_api__get_string_data_impl(ptr, rust_vec_len, data_len),
64 => wire__crate__api__structure_designer__structure_designer_api__get_structure_designer_preferences_impl(ptr, rust_vec_len, data_len),
65 => wire__crate__api__structure_designer__structure_designer_api__get_unit_cell_data_impl(ptr, rust_vec_len, data_len),
66 => wire__crate__api__structure_designer__geo_to_atom_api__get_unit_cell_size_impl(ptr, rust_vec_len, data_len),
67 => wire__crate__api__structure_designer__structure_designer_api__get_vec2_data_impl(ptr, rust_vec_len, data_len),
68 => wire__crate__api__structure_designer__structure_designer_api__get_vec3_data_impl(ptr, rust_vec_len, data_len),
69 => wire__crate__api__common_api__greet_impl(ptr, rust_vec_len, data_len),
70 => wire__crate__api__structure_designer__import_xyz_api__import_xyz_impl(ptr, rust_vec_len, data_len),
72 => wire__crate__api__structure_designer__structure_designer_api__is_node_type_active_impl(ptr, rust_vec_len, data_len),
73 => wire__crate__api__common_api__is_orthographic_impl(ptr, rust_vec_len, data_len),
74 => wire__crate__api__structure_designer__geo_to_atom_api__is_unit_cell_size_estimated_impl(ptr, rust_vec_len, data_len),
75 => wire__crate__api__structure_designer__structure_designer_api__load_node_networks_impl(ptr, rust_vec_len, data_len),
76 => wire__crate__api__common_api__move_camera_impl(ptr, rust_vec_len, data_len),
77 => wire__crate__api__structure_designer__structure_designer_api__move_node_impl(ptr, rust_vec_len, data_len),
78 => wire__crate__api__common_api__provide_texture_impl(ptr, rust_vec_len, data_len),
79 => wire__crate__api__structure_designer__facet_shell_api__remove_facet_impl(ptr, rust_vec_len, data_len),
80 => wire__crate__api__structure_designer__structure_designer_api__rename_node_network_impl(ptr, rust_vec_len, data_len),
81 => wire__crate__api__structure_designer__edit_atom_api__replace_selected_atoms_impl(ptr, rust_vec_len, data_len),
82 => wire__crate__api__structure_designer__structure_designer_api__save_node_networks_impl(ptr, rust_vec_len, data_len),
83 => wire__crate__api__structure_designer__edit_atom_api__select_atom_or_bond_by_ray_impl(ptr, rust_vec_len, data_len),
84 => wire__crate__api__structure_designer__facet_shell_api__select_facet_impl(ptr, rust_vec_len, data_len),
85 => wire__crate__api__structure_designer__facet_shell_api__select_facet_by_ray_impl(ptr, rust_vec_len, data_len),
86 => wire__crate__api__structure_designer__structure_designer_api__select_node_impl(ptr, rust_vec_len, data_len),
87 => wire__crate__api__structure_designer__structure_designer_api__select_wire_impl(ptr, rust_vec_len, data_len),
88 => wire__crate__api__structure_designer__edit_atom_api__set_active_edit_atom_tool_impl(ptr, rust_vec_len, data_len),
89 => wire__crate__api__structure_designer__structure_designer_api__set_active_node_network_impl(ptr, rust_vec_len, data_len),
90 => wire__crate__api__structure_designer__structure_designer_api__set_atom_cut_data_impl(ptr, rust_vec_len, data_len),
91 => wire__crate__api__structure_designer__structure_designer_api__set_atom_fill_data_impl(ptr, rust_vec_len, data_len),
92 => wire__crate__api__structure_designer__structure_designer_api__set_atom_trans_data_impl(ptr, rust_vec_len, data_len),
93 => wire__crate__api__structure_designer__structure_designer_api__set_bool_data_impl(ptr, rust_vec_len, data_len),
94 => wire__crate__api__common_api__set_camera_canonical_view_impl(ptr, rust_vec_len, data_len),
95 => wire__crate__api__common_api__set_camera_transform_impl(ptr, rust_vec_len, data_len),
96 => wire__crate__api__structure_designer__structure_designer_api__set_circle_data_impl(ptr, rust_vec_len, data_len),
97 => wire__crate__api__structure_designer__structure_designer_api__set_cuboid_data_impl(ptr, rust_vec_len, data_len),
98 => wire__crate__api__structure_designer__edit_atom_api__set_edit_atom_add_atom_data_impl(ptr, rust_vec_len, data_len),
99 => wire__crate__api__structure_designer__edit_atom_api__set_edit_atom_default_data_impl(ptr, rust_vec_len, data_len),
100 => wire__crate__api__structure_designer__structure_designer_api__set_export_xyz_data_impl(ptr, rust_vec_len, data_len),
101 => wire__crate__api__structure_designer__structure_designer_api__set_expr_data_impl(ptr, rust_vec_len, data_len),
102 => wire__crate__api__structure_designer__structure_designer_api__set_extrude_data_impl(ptr, rust_vec_len, data_len),
103 => wire__crate__api__structure_designer__facet_shell_api__set_facet_shell_center_impl(ptr, rust_vec_len, data_len),
104 => wire__crate__api__structure_designer__structure_designer_api__set_float_data_impl(ptr, rust_vec_len, data_len),
105 => wire__crate__api__structure_designer__structure_designer_api__set_geo_to_atom_data_impl(ptr, rust_vec_len, data_len),
106 => wire__crate__api__structure_designer__structure_designer_api__set_geo_trans_data_impl(ptr, rust_vec_len, data_len),
107 => wire__crate__api__structure_designer__structure_designer_api__set_half_plane_data_impl(ptr, rust_vec_len, data_len),
108 => wire__crate__api__structure_designer__structure_designer_api__set_half_space_data_impl(ptr, rust_vec_len, data_len),
109 => wire__crate__api__structure_designer__structure_designer_api__set_import_xyz_data_impl(ptr, rust_vec_len, data_len),
110 => wire__crate__api__structure_designer__structure_designer_api__set_int_data_impl(ptr, rust_vec_len, data_len),
111 => wire__crate__api__structure_designer__structure_designer_api__set_ivec2_data_impl(ptr, rust_vec_len, data_len),
112 => wire__crate__api__structure_designer__structure_designer_api__set_ivec3_data_impl(ptr, rust_vec_len, data_len),
113 => wire__crate__api__structure_designer__structure_designer_api__set_lattice_symop_data_impl(ptr, rust_vec_len, data_len),
114 => wire__crate__api__structure_designer__structure_designer_api__set_map_data_impl(ptr, rust_vec_len, data_len),
115 => wire__crate__api__structure_designer__structure_designer_api__set_motif_data_impl(ptr, rust_vec_len, data_len),
116 => wire__crate__api__structure_designer__structure_designer_api__set_node_display_impl(ptr, rust_vec_len, data_len),
117 => wire__crate__api__common_api__set_ortho_half_height_impl(ptr, rust_vec_len, data_len),
118 => wire__crate__api__common_api__set_orthographic_mode_impl(ptr, rust_vec_len, data_len),
119 => wire__crate__api__structure_designer__structure_designer_api__set_parameter_data_impl(ptr, rust_vec_len, data_len),
120 => wire__crate__api__structure_designer__structure_designer_api__set_range_data_impl(ptr, rust_vec_len, data_len),
121 => wire__crate__api__structure_designer__structure_designer_api__set_rect_data_impl(ptr, rust_vec_len, data_len),
122 => wire__crate__api__structure_designer__structure_designer_api__set_reg_poly_data_impl(ptr, rust_vec_len, data_len),
123 => wire__crate__api__structure_designer__structure_designer_api__set_return_node_id_impl(ptr, rust_vec_len, data_len),
124 => wire__crate__api__structure_designer__structure_designer_api__set_sphere_data_impl(ptr, rust_vec_len, data_len),
125 => wire__crate__api__structure_designer__structure_designer_api__set_string_data_impl(ptr, rust_vec_len, data_len),
126 => wire__crate__api__structure_designer__structure_designer_api__set_structure_designer_preferences_impl(ptr, rust_vec_len, data_len),
127 => wire__crate__api__structure_designer__structure_designer_api__set_unit_cell_data_impl(ptr, rust_vec_len, data_len),
128 => wire__crate__api__structure_designer__structure_designer_api__set_vec2_data_impl(ptr, rust_vec_len, data_len),
129 => wire__crate__api__structure_designer__structure_designer_api__set_vec3_data_impl(ptr, rust_vec_len, data_len),
130 => wire__crate__api__common_api__set_viewport_size_impl(ptr, rust_vec_len, data_len),
131 => wire__crate__api__structure_designer__facet_shell_api__split_symmetry_members_impl(ptr, rust_vec_len, data_len),
132 => wire__crate__api__structure_designer__structure_designer_preferences__structure_designer_preferences_clone_self_impl(ptr, rust_vec_len, data_len),
133 => wire__crate__api__structure_designer__structure_designer_preferences__structure_designer_preferences_new_impl(ptr, rust_vec_len, data_len),
134 => wire__crate__api__common_api__sync_gadget_data_impl(ptr, rust_vec_len, data_len),
135 => wire__crate__api__structure_designer__edit_atom_api__transform_selected_impl(ptr, rust_vec_len, data_len),
136 => wire__crate__api__structure_designer__facet_shell_api__update_facet_impl(ptr, rust_vec_len, data_len),
                        _ => unreachable!(),
                    }
}

// Section: rust2dart

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::structure_designer::structure_designer_api_types::APIAtomCutData
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.cut_sdf_value.into_into_dart().into_dart(),
            self.unit_cell_size.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::structure_designer::structure_designer_api_types::APIAtomCutData
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::structure_designer::structure_designer_api_types::APIAtomCutData,
    > for crate::api::structure_designer::structure_designer_api_types::APIAtomCutData
{
    fn into_into_dart(
        self,
    ) -> crate::api::structure_designer::structure_designer_api_types::APIAtomCutData {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::structure_designer::structure_designer_api_types::APIAtomFillData
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.parameter_element_value_definition
                .into_into_dart()
                .into_dart(),
            self.motif_offset.into_into_dart().into_dart(),
            self.hydrogen_passivation.into_into_dart().into_dart(),
            self.error.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::structure_designer::structure_designer_api_types::APIAtomFillData
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::structure_designer::structure_designer_api_types::APIAtomFillData,
    > for crate::api::structure_designer::structure_designer_api_types::APIAtomFillData
{
    fn into_into_dart(
        self,
    ) -> crate::api::structure_designer::structure_designer_api_types::APIAtomFillData {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::structure_designer::structure_designer_api_types::APIAtomTransData
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.translation.into_into_dart().into_dart(),
            self.rotation.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::structure_designer::structure_designer_api_types::APIAtomTransData
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::structure_designer::structure_designer_api_types::APIAtomTransData,
    > for crate::api::structure_designer::structure_designer_api_types::APIAtomTransData
{
    fn into_into_dart(
        self,
    ) -> crate::api::structure_designer::structure_designer_api_types::APIAtomTransData {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::structure_designer::structure_designer_api_types::APIBoolData
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.value.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::structure_designer::structure_designer_api_types::APIBoolData
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::structure_designer::structure_designer_api_types::APIBoolData,
    > for crate::api::structure_designer::structure_designer_api_types::APIBoolData
{
    fn into_into_dart(
        self,
    ) -> crate::api::structure_designer::structure_designer_api_types::APIBoolData {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::common_api_types::APICamera {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.eye.into_into_dart().into_dart(),
            self.target.into_into_dart().into_dart(),
            self.up.into_into_dart().into_dart(),
            self.aspect.into_into_dart().into_dart(),
            self.fovy.into_into_dart().into_dart(),
            self.znear.into_into_dart().into_dart(),
            self.zfar.into_into_dart().into_dart(),
            self.orthographic.into_into_dart().into_dart(),
            self.ortho_half_height.into_into_dart().into_dart(),
            self.pivot_point.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::common_api_types::APICamera
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::common_api_types::APICamera>
    for crate::api::common_api_types::APICamera
{
    fn into_into_dart(self) -> crate::api::common_api_types::APICamera {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::common_api_types::APICameraCanonicalView {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Custom => 0.into_dart(),
            Self::Top => 1.into_dart(),
            Self::Bottom => 2.into_dart(),
            Self::Front => 3.into_dart(),
            Self::Back => 4.into_dart(),
            Self::Left => 5.into_dart(),
            Self::Right => 6.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::common_api_types::APICameraCanonicalView
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::common_api_types::APICameraCanonicalView>
    for crate::api::common_api_types::APICameraCanonicalView
{
    fn into_into_dart(self) -> crate::api::common_api_types::APICameraCanonicalView {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::structure_designer::structure_designer_api_types::APICircleData
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.center.into_into_dart().into_dart(),
            self.radius.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::structure_designer::structure_designer_api_types::APICircleData
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::structure_designer::structure_designer_api_types::APICircleData,
    > for crate::api::structure_designer::structure_designer_api_types::APICircleData
{
    fn into_into_dart(
        self,
    ) -> crate::api::structure_designer::structure_designer_api_types::APICircleData {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::structure_designer::structure_designer_api_types::APICrystalTypeInfo
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.primary_atomic_number.into_into_dart().into_dart(),
            self.secondary_atomic_number.into_into_dart().into_dart(),
            self.unit_cell_size.into_into_dart().into_dart(),
            self.name.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::structure_designer::structure_designer_api_types::APICrystalTypeInfo
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::structure_designer::structure_designer_api_types::APICrystalTypeInfo,
    > for crate::api::structure_designer::structure_designer_api_types::APICrystalTypeInfo
{
    fn into_into_dart(
        self,
    ) -> crate::api::structure_designer::structure_designer_api_types::APICrystalTypeInfo {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::structure_designer::structure_designer_api_types::APICuboidData
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.min_corner.into_into_dart().into_dart(),
            self.extent.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::structure_designer::structure_designer_api_types::APICuboidData
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::structure_designer::structure_designer_api_types::APICuboidData,
    > for crate::api::structure_designer::structure_designer_api_types::APICuboidData
{
    fn into_into_dart(
        self,
    ) -> crate::api::structure_designer::structure_designer_api_types::APICuboidData {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::structure_designer::structure_designer_api_types::APIDataType
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.data_type_base.into_into_dart().into_dart(),
            self.custom_data_type.into_into_dart().into_dart(),
            self.array.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::structure_designer::structure_designer_api_types::APIDataType
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::structure_designer::structure_designer_api_types::APIDataType,
    > for crate::api::structure_designer::structure_designer_api_types::APIDataType
{
    fn into_into_dart(
        self,
    ) -> crate::api::structure_designer::structure_designer_api_types::APIDataType {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::structure_designer::structure_designer_api_types::APIDataTypeBase
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::None => 0.into_dart(),
            Self::Bool => 1.into_dart(),
            Self::String => 2.into_dart(),
            Self::Int => 3.into_dart(),
            Self::Float => 4.into_dart(),
            Self::Vec2 => 5.into_dart(),
            Self::Vec3 => 6.into_dart(),
            Self::IVec2 => 7.into_dart(),
            Self::IVec3 => 8.into_dart(),
            Self::UnitCell => 9.into_dart(),
            Self::Geometry2D => 10.into_dart(),
            Self::Geometry => 11.into_dart(),
            Self::Atomic => 12.into_dart(),
            Self::Motif => 13.into_dart(),
            Self::Custom => 14.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::structure_designer::structure_designer_api_types::APIDataTypeBase
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::structure_designer::structure_designer_api_types::APIDataTypeBase,
    > for crate::api::structure_designer::structure_designer_api_types::APIDataTypeBase
{
    fn into_into_dart(
        self,
    ) -> crate::api::structure_designer::structure_designer_api_types::APIDataTypeBase {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::structure_designer::structure_designer_api_types::APIEditAtomData
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.active_tool.into_into_dart().into_dart(),
            self.can_undo.into_into_dart().into_dart(),
            self.can_redo.into_into_dart().into_dart(),
            self.bond_tool_last_atom_id.into_into_dart().into_dart(),
            self.replacement_atomic_number.into_into_dart().into_dart(),
            self.add_atom_tool_atomic_number
                .into_into_dart()
                .into_dart(),
            self.has_selected_atoms.into_into_dart().into_dart(),
            self.has_selection.into_into_dart().into_dart(),
            self.selection_transform.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::structure_designer::structure_designer_api_types::APIEditAtomData
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::structure_designer::structure_designer_api_types::APIEditAtomData,
    > for crate::api::structure_designer::structure_designer_api_types::APIEditAtomData
{
    fn into_into_dart(
        self,
    ) -> crate::api::structure_designer::structure_designer_api_types::APIEditAtomData {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::structure_designer::structure_designer_api_types::APIEditAtomTool
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Default => 0.into_dart(),
            Self::AddAtom => 1.into_dart(),
            Self::AddBond => 2.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::structure_designer::structure_designer_api_types::APIEditAtomTool
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::structure_designer::structure_designer_api_types::APIEditAtomTool,
    > for crate::api::structure_designer::structure_designer_api_types::APIEditAtomTool
{
    fn into_into_dart(
        self,
    ) -> crate::api::structure_designer::structure_designer_api_types::APIEditAtomTool {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::structure_designer::structure_designer_api_types::APIExportXYZData
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.file_name.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::structure_designer::structure_designer_api_types::APIExportXYZData
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::structure_designer::structure_designer_api_types::APIExportXYZData,
    > for crate::api::structure_designer::structure_designer_api_types::APIExportXYZData
{
    fn into_into_dart(
        self,
    ) -> crate::api::structure_designer::structure_designer_api_types::APIExportXYZData {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::structure_designer::structure_designer_api_types::APIExprData
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.parameters.into_into_dart().into_dart(),
            self.expression.into_into_dart().into_dart(),
            self.error.into_into_dart().into_dart(),
            self.output_type.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::structure_designer::structure_designer_api_types::APIExprData
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::structure_designer::structure_designer_api_types::APIExprData,
    > for crate::api::structure_designer::structure_designer_api_types::APIExprData
{
    fn into_into_dart(
        self,
    ) -> crate::api::structure_designer::structure_designer_api_types::APIExprData {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::structure_designer::structure_designer_api_types::APIExprParameter
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.name.into_into_dart().into_dart(),
            self.data_type.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::structure_designer::structure_designer_api_types::APIExprParameter
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::structure_designer::structure_designer_api_types::APIExprParameter,
    > for crate::api::structure_designer::structure_designer_api_types::APIExprParameter
{
    fn into_into_dart(
        self,
    ) -> crate::api::structure_designer::structure_designer_api_types::APIExprParameter {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::structure_designer::structure_designer_api_types::APIExtrudeData
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.height.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::structure_designer::structure_designer_api_types::APIExtrudeData
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::structure_designer::structure_designer_api_types::APIExtrudeData,
    > for crate::api::structure_designer::structure_designer_api_types::APIExtrudeData
{
    fn into_into_dart(
        self,
    ) -> crate::api::structure_designer::structure_designer_api_types::APIExtrudeData {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::structure_designer::structure_designer_api_types::APIFacet
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.miller_index.into_into_dart().into_dart(),
            self.shift.into_into_dart().into_dart(),
            self.symmetrize.into_into_dart().into_dart(),
            self.visible.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::structure_designer::structure_designer_api_types::APIFacet
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::structure_designer::structure_designer_api_types::APIFacet,
    > for crate::api::structure_designer::structure_designer_api_types::APIFacet
{
    fn into_into_dart(
        self,
    ) -> crate::api::structure_designer::structure_designer_api_types::APIFacet {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::structure_designer::structure_designer_api_types::APIFacetShellData
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.max_miller_index.into_into_dart().into_dart(),
            self.center.into_into_dart().into_dart(),
            self.facets.into_into_dart().into_dart(),
            self.selected_facet_index.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::structure_designer::structure_designer_api_types::APIFacetShellData
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::structure_designer::structure_designer_api_types::APIFacetShellData,
    > for crate::api::structure_designer::structure_designer_api_types::APIFacetShellData
{
    fn into_into_dart(
        self,
    ) -> crate::api::structure_designer::structure_designer_api_types::APIFacetShellData {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::structure_designer::structure_designer_api_types::APIFloatData
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.value.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::structure_designer::structure_designer_api_types::APIFloatData
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::structure_designer::structure_designer_api_types::APIFloatData,
    > for crate::api::structure_designer::structure_designer_api_types::APIFloatData
{
    fn into_into_dart(
        self,
    ) -> crate::api::structure_designer::structure_designer_api_types::APIFloatData {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::structure_designer::structure_designer_api_types::APIGeoToAtomData
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.primary_atomic_number.into_into_dart().into_dart(),
            self.secondary_atomic_number.into_into_dart().into_dart(),
            self.hydrogen_passivation.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::structure_designer::structure_designer_api_types::APIGeoToAtomData
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::structure_designer::structure_designer_api_types::APIGeoToAtomData,
    > for crate::api::structure_designer::structure_designer_api_types::APIGeoToAtomData
{
    fn into_into_dart(
        self,
    ) -> crate::api::structure_designer::structure_designer_api_types::APIGeoToAtomData {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::structure_designer::structure_designer_api_types::APIGeoTransData
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.translation.into_into_dart().into_dart(),
            self.rotation.into_into_dart().into_dart(),
            self.transform_only_frame.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::structure_designer::structure_designer_api_types::APIGeoTransData
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::structure_designer::structure_designer_api_types::APIGeoTransData,
    > for crate::api::structure_designer::structure_designer_api_types::APIGeoTransData
{
    fn into_into_dart(
        self,
    ) -> crate::api::structure_designer::structure_designer_api_types::APIGeoTransData {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::structure_designer::structure_designer_api_types::APIHalfPlaneData
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.point1.into_into_dart().into_dart(),
            self.point2.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::structure_designer::structure_designer_api_types::APIHalfPlaneData
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::structure_designer::structure_designer_api_types::APIHalfPlaneData,
    > for crate::api::structure_designer::structure_designer_api_types::APIHalfPlaneData
{
    fn into_into_dart(
        self,
    ) -> crate::api::structure_designer::structure_designer_api_types::APIHalfPlaneData {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::structure_designer::structure_designer_api_types::APIHalfSpaceData
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.max_miller_index.into_into_dart().into_dart(),
            self.miller_index.into_into_dart().into_dart(),
            self.center.into_into_dart().into_dart(),
            self.shift.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::structure_designer::structure_designer_api_types::APIHalfSpaceData
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::structure_designer::structure_designer_api_types::APIHalfSpaceData,
    > for crate::api::structure_designer::structure_designer_api_types::APIHalfSpaceData
{
    fn into_into_dart(
        self,
    ) -> crate::api::structure_designer::structure_designer_api_types::APIHalfSpaceData {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::structure_designer::structure_designer_api_types::APIImportXYZData
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.file_name.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::structure_designer::structure_designer_api_types::APIImportXYZData
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::structure_designer::structure_designer_api_types::APIImportXYZData,
    > for crate::api::structure_designer::structure_designer_api_types::APIImportXYZData
{
    fn into_into_dart(
        self,
    ) -> crate::api::structure_designer::structure_designer_api_types::APIImportXYZData {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::structure_designer::structure_designer_api_types::APIIntData
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.value.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::structure_designer::structure_designer_api_types::APIIntData
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::structure_designer::structure_designer_api_types::APIIntData,
    > for crate::api::structure_designer::structure_designer_api_types::APIIntData
{
    fn into_into_dart(
        self,
    ) -> crate::api::structure_designer::structure_designer_api_types::APIIntData {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::structure_designer::structure_designer_api_types::APILatticeSymopData
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.translation.into_into_dart().into_dart(),
            self.rotation_axis.into_into_dart().into_dart(),
            self.rotation_angle_degrees.into_into_dart().into_dart(),
            self.transform_only_frame.into_into_dart().into_dart(),
            self.rotational_symmetries.into_into_dart().into_dart(),
            self.crystal_system.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::structure_designer::structure_designer_api_types::APILatticeSymopData
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::structure_designer::structure_designer_api_types::APILatticeSymopData,
    > for crate::api::structure_designer::structure_designer_api_types::APILatticeSymopData
{
    fn into_into_dart(
        self,
    ) -> crate::api::structure_designer::structure_designer_api_types::APILatticeSymopData {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::structure_designer::structure_designer_api_types::APIMapData
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.input_type.into_into_dart().into_dart(),
            self.output_type.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::structure_designer::structure_designer_api_types::APIMapData
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::structure_designer::structure_designer_api_types::APIMapData,
    > for crate::api::structure_designer::structure_designer_api_types::APIMapData
{
    fn into_into_dart(
        self,
    ) -> crate::api::structure_designer::structure_designer_api_types::APIMapData {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::structure_designer::structure_designer_api_types::APIMotifData
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.definition.into_into_dart().into_dart(),
            self.name.into_into_dart().into_dart(),
            self.error.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::structure_designer::structure_designer_api_types::APIMotifData
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::structure_designer::structure_designer_api_types::APIMotifData,
    > for crate::api::structure_designer::structure_designer_api_types::APIMotifData
{
    fn into_into_dart(
        self,
    ) -> crate::api::structure_designer::structure_designer_api_types::APIMotifData {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::structure_designer::structure_designer_api_types::APINetworkWithValidationErrors
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.name.into_into_dart().into_dart(),
            self.validation_errors.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::structure_designer::structure_designer_api_types::APINetworkWithValidationErrors
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::structure_designer::structure_designer_api_types::APINetworkWithValidationErrors> for crate::api::structure_designer::structure_designer_api_types::APINetworkWithValidationErrors {
            fn into_into_dart(self) -> crate::api::structure_designer::structure_designer_api_types::APINetworkWithValidationErrors {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::structure_designer::structure_designer_api_types::APIParameterData
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.param_index.into_into_dart().into_dart(),
            self.param_name.into_into_dart().into_dart(),
            self.data_type.into_into_dart().into_dart(),
            self.sort_order.into_into_dart().into_dart(),
            self.error.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::structure_designer::structure_designer_api_types::APIParameterData
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::structure_designer::structure_designer_api_types::APIParameterData,
    > for crate::api::structure_designer::structure_designer_api_types::APIParameterData
{
    fn into_into_dart(
        self,
    ) -> crate::api::structure_designer::structure_designer_api_types::APIParameterData {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::structure_designer::structure_designer_api_types::APIRangeData
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.start.into_into_dart().into_dart(),
            self.step.into_into_dart().into_dart(),
            self.count.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::structure_designer::structure_designer_api_types::APIRangeData
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::structure_designer::structure_designer_api_types::APIRangeData,
    > for crate::api::structure_designer::structure_designer_api_types::APIRangeData
{
    fn into_into_dart(
        self,
    ) -> crate::api::structure_designer::structure_designer_api_types::APIRangeData {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::structure_designer::structure_designer_api_types::APIRectData
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.min_corner.into_into_dart().into_dart(),
            self.extent.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::structure_designer::structure_designer_api_types::APIRectData
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::structure_designer::structure_designer_api_types::APIRectData,
    > for crate::api::structure_designer::structure_designer_api_types::APIRectData
{
    fn into_into_dart(
        self,
    ) -> crate::api::structure_designer::structure_designer_api_types::APIRectData {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::structure_designer::structure_designer_api_types::APIRegPolyData
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.num_sides.into_into_dart().into_dart(),
            self.radius.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::structure_designer::structure_designer_api_types::APIRegPolyData
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::structure_designer::structure_designer_api_types::APIRegPolyData,
    > for crate::api::structure_designer::structure_designer_api_types::APIRegPolyData
{
    fn into_into_dart(
        self,
    ) -> crate::api::structure_designer::structure_designer_api_types::APIRegPolyData {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::common_api_types::APIResult {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.success.into_into_dart().into_dart(),
            self.error_message.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::common_api_types::APIResult
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::common_api_types::APIResult>
    for crate::api::common_api_types::APIResult
{
    fn into_into_dart(self) -> crate::api::common_api_types::APIResult {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::structure_designer::structure_designer_api_types::APIRotationalSymmetry
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.axis.into_into_dart().into_dart(),
            self.n_fold.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::structure_designer::structure_designer_api_types::APIRotationalSymmetry
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::structure_designer::structure_designer_api_types::APIRotationalSymmetry,
    > for crate::api::structure_designer::structure_designer_api_types::APIRotationalSymmetry
{
    fn into_into_dart(
        self,
    ) -> crate::api::structure_designer::structure_designer_api_types::APIRotationalSymmetry {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::structure_designer::structure_designer_api_types::APISphereData
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.center.into_into_dart().into_dart(),
            self.radius.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::structure_designer::structure_designer_api_types::APISphereData
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::structure_designer::structure_designer_api_types::APISphereData,
    > for crate::api::structure_designer::structure_designer_api_types::APISphereData
{
    fn into_into_dart(
        self,
    ) -> crate::api::structure_designer::structure_designer_api_types::APISphereData {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::structure_designer::structure_designer_api_types::APIStringData
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.value.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::structure_designer::structure_designer_api_types::APIStringData
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::structure_designer::structure_designer_api_types::APIStringData,
    > for crate::api::structure_designer::structure_designer_api_types::APIStringData
{
    fn into_into_dart(
        self,
    ) -> crate::api::structure_designer::structure_designer_api_types::APIStringData {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::common_api_types::APITransform {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.translation.into_into_dart().into_dart(),
            self.rotation.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::common_api_types::APITransform
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::common_api_types::APITransform>
    for crate::api::common_api_types::APITransform
{
    fn into_into_dart(self) -> crate::api::common_api_types::APITransform {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::structure_designer::structure_designer_api_types::APIUnitCellData
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.cell_length_a.into_into_dart().into_dart(),
            self.cell_length_b.into_into_dart().into_dart(),
            self.cell_length_c.into_into_dart().into_dart(),
            self.cell_angle_alpha.into_into_dart().into_dart(),
            self.cell_angle_beta.into_into_dart().into_dart(),
            self.cell_angle_gamma.into_into_dart().into_dart(),
            self.crystal_system.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::structure_designer::structure_designer_api_types::APIUnitCellData
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::structure_designer::structure_designer_api_types::APIUnitCellData,
    > for crate::api::structure_designer::structure_designer_api_types::APIUnitCellData
{
    fn into_into_dart(
        self,
    ) -> crate::api::structure_designer::structure_designer_api_types::APIUnitCellData {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::common_api_types::APIVec2 {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.x.into_into_dart().into_dart(),
            self.y.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::common_api_types::APIVec2
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::common_api_types::APIVec2>
    for crate::api::common_api_types::APIVec2
{
    fn into_into_dart(self) -> crate::api::common_api_types::APIVec2 {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::structure_designer::structure_designer_api_types::APIVec2Data
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.value.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::structure_designer::structure_designer_api_types::APIVec2Data
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::structure_designer::structure_designer_api_types::APIVec2Data,
    > for crate::api::structure_designer::structure_designer_api_types::APIVec2Data
{
    fn into_into_dart(
        self,
    ) -> crate::api::structure_designer::structure_designer_api_types::APIVec2Data {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::common_api_types::APIVec3 {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.x.into_into_dart().into_dart(),
            self.y.into_into_dart().into_dart(),
            self.z.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::common_api_types::APIVec3
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::common_api_types::APIVec3>
    for crate::api::common_api_types::APIVec3
{
    fn into_into_dart(self) -> crate::api::common_api_types::APIVec3 {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::structure_designer::structure_designer_api_types::APIVec3Data
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.value.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::structure_designer::structure_designer_api_types::APIVec3Data
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::structure_designer::structure_designer_api_types::APIVec3Data,
    > for crate::api::structure_designer::structure_designer_api_types::APIVec3Data
{
    fn into_into_dart(
        self,
    ) -> crate::api::structure_designer::structure_designer_api_types::APIVec3Data {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::common_api_types::APIIVec2 {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.x.into_into_dart().into_dart(),
            self.y.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::common_api_types::APIIVec2
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::common_api_types::APIIVec2>
    for crate::api::common_api_types::APIIVec2
{
    fn into_into_dart(self) -> crate::api::common_api_types::APIIVec2 {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::structure_designer::structure_designer_api_types::APIIVec2Data
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.value.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::structure_designer::structure_designer_api_types::APIIVec2Data
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::structure_designer::structure_designer_api_types::APIIVec2Data,
    > for crate::api::structure_designer::structure_designer_api_types::APIIVec2Data
{
    fn into_into_dart(
        self,
    ) -> crate::api::structure_designer::structure_designer_api_types::APIIVec2Data {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::common_api_types::APIIVec3 {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.x.into_into_dart().into_dart(),
            self.y.into_into_dart().into_dart(),
            self.z.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::common_api_types::APIIVec3
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::common_api_types::APIIVec3>
    for crate::api::common_api_types::APIIVec3
{
    fn into_into_dart(self) -> crate::api::common_api_types::APIIVec3 {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::structure_designer::structure_designer_api_types::APIIVec3Data
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.value.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::structure_designer::structure_designer_api_types::APIIVec3Data
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::structure_designer::structure_designer_api_types::APIIVec3Data,
    > for crate::api::structure_designer::structure_designer_api_types::APIIVec3Data
{
    fn into_into_dart(
        self,
    ) -> crate::api::structure_designer::structure_designer_api_types::APIIVec3Data {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::common_api_types::ElementSummary {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.atomic_number.into_into_dart().into_dart(),
            self.element_name.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::common_api_types::ElementSummary
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::common_api_types::ElementSummary>
    for crate::api::common_api_types::ElementSummary
{
    fn into_into_dart(self) -> crate::api::common_api_types::ElementSummary {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::structure_designer::structure_designer_preferences::GeometryVisualization
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::SurfaceSplatting => 0.into_dart(),
            Self::DualContouring => 1.into_dart(),
            Self::ExplicitMesh => 2.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::structure_designer::structure_designer_preferences::GeometryVisualization
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::structure_designer::structure_designer_preferences::GeometryVisualization,
    > for crate::api::structure_designer::structure_designer_preferences::GeometryVisualization
{
    fn into_into_dart(
        self,
    ) -> crate::api::structure_designer::structure_designer_preferences::GeometryVisualization {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::structure_designer::structure_designer_preferences::GeometryVisualizationPreferences {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    [
                    self.geometry_visualization.into_into_dart().into_dart(),
self.wireframe_geometry.into_into_dart().into_dart(),
self.samples_per_unit_cell.into_into_dart().into_dart(),
self.sharpness_angle_threshold_degree.into_into_dart().into_dart(),
self.mesh_smoothing.into_into_dart().into_dart(),
self.display_camera_target.into_into_dart().into_dart()
                ].into_dart()
                }
            }
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::structure_designer::structure_designer_preferences::GeometryVisualizationPreferences {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::structure_designer::structure_designer_preferences::GeometryVisualizationPreferences> for crate::api::structure_designer::structure_designer_preferences::GeometryVisualizationPreferences {
            fn into_into_dart(self) -> crate::api::structure_designer::structure_designer_preferences::GeometryVisualizationPreferences {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::structure_designer::structure_designer_api_types::InputPinView
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.name.into_into_dart().into_dart(),
            self.data_type.into_into_dart().into_dart(),
            self.multi.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::structure_designer::structure_designer_api_types::InputPinView
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::structure_designer::structure_designer_api_types::InputPinView,
    > for crate::api::structure_designer::structure_designer_api_types::InputPinView
{
    fn into_into_dart(
        self,
    ) -> crate::api::structure_designer::structure_designer_api_types::InputPinView {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::structure_designer::structure_designer_preferences::MeshSmoothing
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Smooth => 0.into_dart(),
            Self::Sharp => 1.into_dart(),
            Self::SmoothingGroupBased => 2.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::structure_designer::structure_designer_preferences::MeshSmoothing
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::structure_designer::structure_designer_preferences::MeshSmoothing,
    > for crate::api::structure_designer::structure_designer_preferences::MeshSmoothing
{
    fn into_into_dart(
        self,
    ) -> crate::api::structure_designer::structure_designer_preferences::MeshSmoothing {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::structure_designer::structure_designer_preferences::NodeDisplayPolicy
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Manual => 0.into_dart(),
            Self::PreferSelected => 1.into_dart(),
            Self::PreferFrontier => 2.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::structure_designer::structure_designer_preferences::NodeDisplayPolicy
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::structure_designer::structure_designer_preferences::NodeDisplayPolicy,
    > for crate::api::structure_designer::structure_designer_preferences::NodeDisplayPolicy
{
    fn into_into_dart(
        self,
    ) -> crate::api::structure_designer::structure_designer_preferences::NodeDisplayPolicy {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::structure_designer::structure_designer_preferences::NodeDisplayPreferences
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.display_policy.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::structure_designer::structure_designer_preferences::NodeDisplayPreferences
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::structure_designer::structure_designer_preferences::NodeDisplayPreferences,
    > for crate::api::structure_designer::structure_designer_preferences::NodeDisplayPreferences
{
    fn into_into_dart(
        self,
    ) -> crate::api::structure_designer::structure_designer_preferences::NodeDisplayPreferences
    {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::structure_designer::structure_designer_api_types::NodeNetworkView
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.name.into_into_dart().into_dart(),
            self.nodes.into_into_dart().into_dart(),
            self.wires.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::structure_designer::structure_designer_api_types::NodeNetworkView
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::structure_designer::structure_designer_api_types::NodeNetworkView,
    > for crate::api::structure_designer::structure_designer_api_types::NodeNetworkView
{
    fn into_into_dart(
        self,
    ) -> crate::api::structure_designer::structure_designer_api_types::NodeNetworkView {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::structure_designer::structure_designer_api_types::NodeView
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.id.into_into_dart().into_dart(),
            self.node_type_name.into_into_dart().into_dart(),
            self.position.into_into_dart().into_dart(),
            self.input_pins.into_into_dart().into_dart(),
            self.output_type.into_into_dart().into_dart(),
            self.function_type.into_into_dart().into_dart(),
            self.selected.into_into_dart().into_dart(),
            self.displayed.into_into_dart().into_dart(),
            self.return_node.into_into_dart().into_dart(),
            self.error.into_into_dart().into_dart(),
            self.output_string.into_into_dart().into_dart(),
            self.subtitle.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::structure_designer::structure_designer_api_types::NodeView
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::structure_designer::structure_designer_api_types::NodeView,
    > for crate::api::structure_designer::structure_designer_api_types::NodeView
{
    fn into_into_dart(
        self,
    ) -> crate::api::structure_designer::structure_designer_api_types::NodeView {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::common_api_types::SelectModifier {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Replace => 0.into_dart(),
            Self::Toggle => 1.into_dart(),
            Self::Expand => 2.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::common_api_types::SelectModifier
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::common_api_types::SelectModifier>
    for crate::api::common_api_types::SelectModifier
{
    fn into_into_dart(self) -> crate::api::common_api_types::SelectModifier {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::structure_designer::structure_designer_preferences::StructureDesignerPreferences
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.geometry_visualization_preferences
                .into_into_dart()
                .into_dart(),
            self.node_display_preferences.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::structure_designer::structure_designer_preferences::StructureDesignerPreferences
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::structure_designer::structure_designer_preferences::StructureDesignerPreferences> for crate::api::structure_designer::structure_designer_preferences::StructureDesignerPreferences {
            fn into_into_dart(self) -> crate::api::structure_designer::structure_designer_preferences::StructureDesignerPreferences {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::structure_designer::structure_designer_api_types::WireView
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.source_node_id.into_into_dart().into_dart(),
            self.source_output_pin_index.into_into_dart().into_dart(),
            self.dest_node_id.into_into_dart().into_dart(),
            self.dest_param_index.into_into_dart().into_dart(),
            self.selected.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::structure_designer::structure_designer_api_types::WireView
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::structure_designer::structure_designer_api_types::WireView,
    > for crate::api::structure_designer::structure_designer_api_types::WireView
{
    fn into_into_dart(
        self,
    ) -> crate::api::structure_designer::structure_designer_api_types::WireView {
        self
    }
}

impl SseEncode
    for std::collections::HashMap<
        u64,
        crate::api::structure_designer::structure_designer_api_types::NodeView,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<(
            u64,
            crate::api::structure_designer::structure_designer_api_types::NodeView,
        )>>::sse_encode(self.into_iter().collect(), serializer);
    }
}

impl SseEncode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
    }
}

impl SseEncode for crate::api::structure_designer::structure_designer_api_types::APIAtomCutData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <f64>::sse_encode(self.cut_sdf_value, serializer);
        <f64>::sse_encode(self.unit_cell_size, serializer);
    }
}

impl SseEncode for crate::api::structure_designer::structure_designer_api_types::APIAtomFillData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.parameter_element_value_definition, serializer);
        <crate::api::common_api_types::APIVec3>::sse_encode(self.motif_offset, serializer);
        <bool>::sse_encode(self.hydrogen_passivation, serializer);
        <Option<String>>::sse_encode(self.error, serializer);
    }
}

impl SseEncode for crate::api::structure_designer::structure_designer_api_types::APIAtomTransData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::common_api_types::APIVec3>::sse_encode(self.translation, serializer);
        <crate::api::common_api_types::APIVec3>::sse_encode(self.rotation, serializer);
    }
}

impl SseEncode for crate::api::structure_designer::structure_designer_api_types::APIBoolData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.value, serializer);
    }
}

impl SseEncode for crate::api::common_api_types::APICamera {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::common_api_types::APIVec3>::sse_encode(self.eye, serializer);
        <crate::api::common_api_types::APIVec3>::sse_encode(self.target, serializer);
        <crate::api::common_api_types::APIVec3>::sse_encode(self.up, serializer);
        <f64>::sse_encode(self.aspect, serializer);
        <f64>::sse_encode(self.fovy, serializer);
        <f64>::sse_encode(self.znear, serializer);
        <f64>::sse_encode(self.zfar, serializer);
        <bool>::sse_encode(self.orthographic, serializer);
        <f64>::sse_encode(self.ortho_half_height, serializer);
        <crate::api::common_api_types::APIVec3>::sse_encode(self.pivot_point, serializer);
    }
}

impl SseEncode for crate::api::common_api_types::APICameraCanonicalView {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::api::common_api_types::APICameraCanonicalView::Custom => 0,
                crate::api::common_api_types::APICameraCanonicalView::Top => 1,
                crate::api::common_api_types::APICameraCanonicalView::Bottom => 2,
                crate::api::common_api_types::APICameraCanonicalView::Front => 3,
                crate::api::common_api_types::APICameraCanonicalView::Back => 4,
                crate::api::common_api_types::APICameraCanonicalView::Left => 5,
                crate::api::common_api_types::APICameraCanonicalView::Right => 6,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::api::structure_designer::structure_designer_api_types::APICircleData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::common_api_types::APIIVec2>::sse_encode(self.center, serializer);
        <i32>::sse_encode(self.radius, serializer);
    }
}

impl SseEncode
    for crate::api::structure_designer::structure_designer_api_types::APICrystalTypeInfo
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.primary_atomic_number, serializer);
        <i32>::sse_encode(self.secondary_atomic_number, serializer);
        <f64>::sse_encode(self.unit_cell_size, serializer);
        <String>::sse_encode(self.name, serializer);
    }
}

impl SseEncode for crate::api::structure_designer::structure_designer_api_types::APICuboidData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::common_api_types::APIIVec3>::sse_encode(self.min_corner, serializer);
        <crate::api::common_api_types::APIIVec3>::sse_encode(self.extent, serializer);
    }
}

impl SseEncode for crate::api::structure_designer::structure_designer_api_types::APIDataType {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::structure_designer::structure_designer_api_types::APIDataTypeBase>::sse_encode(
            self.data_type_base,
            serializer,
        );
        <Option<String>>::sse_encode(self.custom_data_type, serializer);
        <bool>::sse_encode(self.array, serializer);
    }
}

impl SseEncode for crate::api::structure_designer::structure_designer_api_types::APIDataTypeBase {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(match self {crate::api::structure_designer::structure_designer_api_types::APIDataTypeBase::None => { 0 }
crate::api::structure_designer::structure_designer_api_types::APIDataTypeBase::Bool => { 1 }
crate::api::structure_designer::structure_designer_api_types::APIDataTypeBase::String => { 2 }
crate::api::structure_designer::structure_designer_api_types::APIDataTypeBase::Int => { 3 }
crate::api::structure_designer::structure_designer_api_types::APIDataTypeBase::Float => { 4 }
crate::api::structure_designer::structure_designer_api_types::APIDataTypeBase::Vec2 => { 5 }
crate::api::structure_designer::structure_designer_api_types::APIDataTypeBase::Vec3 => { 6 }
crate::api::structure_designer::structure_designer_api_types::APIDataTypeBase::IVec2 => { 7 }
crate::api::structure_designer::structure_designer_api_types::APIDataTypeBase::IVec3 => { 8 }
crate::api::structure_designer::structure_designer_api_types::APIDataTypeBase::UnitCell => { 9 }
crate::api::structure_designer::structure_designer_api_types::APIDataTypeBase::Geometry2D => { 10 }
crate::api::structure_designer::structure_designer_api_types::APIDataTypeBase::Geometry => { 11 }
crate::api::structure_designer::structure_designer_api_types::APIDataTypeBase::Atomic => { 12 }
crate::api::structure_designer::structure_designer_api_types::APIDataTypeBase::Motif => { 13 }
crate::api::structure_designer::structure_designer_api_types::APIDataTypeBase::Custom => { 14 }
 _ => { unimplemented!(""); }}, serializer);
    }
}

impl SseEncode for crate::api::structure_designer::structure_designer_api_types::APIEditAtomData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::structure_designer::structure_designer_api_types::APIEditAtomTool>::sse_encode(
            self.active_tool,
            serializer,
        );
        <bool>::sse_encode(self.can_undo, serializer);
        <bool>::sse_encode(self.can_redo, serializer);
        <Option<u64>>::sse_encode(self.bond_tool_last_atom_id, serializer);
        <Option<i32>>::sse_encode(self.replacement_atomic_number, serializer);
        <Option<i32>>::sse_encode(self.add_atom_tool_atomic_number, serializer);
        <bool>::sse_encode(self.has_selected_atoms, serializer);
        <bool>::sse_encode(self.has_selection, serializer);
        <Option<crate::api::common_api_types::APITransform>>::sse_encode(
            self.selection_transform,
            serializer,
        );
    }
}

impl SseEncode for crate::api::structure_designer::structure_designer_api_types::APIEditAtomTool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(match self {crate::api::structure_designer::structure_designer_api_types::APIEditAtomTool::Default => { 0 }
crate::api::structure_designer::structure_designer_api_types::APIEditAtomTool::AddAtom => { 1 }
crate::api::structure_designer::structure_designer_api_types::APIEditAtomTool::AddBond => { 2 }
 _ => { unimplemented!(""); }}, serializer);
    }
}

impl SseEncode for crate::api::structure_designer::structure_designer_api_types::APIExportXYZData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.file_name, serializer);
    }
}

impl SseEncode for crate::api::structure_designer::structure_designer_api_types::APIExprData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<crate::api::structure_designer::structure_designer_api_types::APIExprParameter>>::sse_encode(self.parameters, serializer);
        <String>::sse_encode(self.expression, serializer);
        <Option<String>>::sse_encode(self.error, serializer);
        <Option<crate::api::structure_designer::structure_designer_api_types::APIDataType>>::sse_encode(self.output_type, serializer);
    }
}

impl SseEncode for crate::api::structure_designer::structure_designer_api_types::APIExprParameter {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.name, serializer);
        <crate::api::structure_designer::structure_designer_api_types::APIDataType>::sse_encode(
            self.data_type,
            serializer,
        );
    }
}

impl SseEncode for crate::api::structure_designer::structure_designer_api_types::APIExtrudeData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.height, serializer);
    }
}

impl SseEncode for crate::api::structure_designer::structure_designer_api_types::APIFacet {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::common_api_types::APIIVec3>::sse_encode(self.miller_index, serializer);
        <i32>::sse_encode(self.shift, serializer);
        <bool>::sse_encode(self.symmetrize, serializer);
        <bool>::sse_encode(self.visible, serializer);
    }
}

impl SseEncode for crate::api::structure_designer::structure_designer_api_types::APIFacetShellData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.max_miller_index, serializer);
        <crate::api::common_api_types::APIIVec3>::sse_encode(self.center, serializer);
        <Vec<crate::api::structure_designer::structure_designer_api_types::APIFacet>>::sse_encode(
            self.facets,
            serializer,
        );
        <Option<usize>>::sse_encode(self.selected_facet_index, serializer);
    }
}

impl SseEncode for crate::api::structure_designer::structure_designer_api_types::APIFloatData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <f64>::sse_encode(self.value, serializer);
    }
}

impl SseEncode for crate::api::structure_designer::structure_designer_api_types::APIGeoToAtomData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.primary_atomic_number, serializer);
        <i32>::sse_encode(self.secondary_atomic_number, serializer);
        <bool>::sse_encode(self.hydrogen_passivation, serializer);
    }
}

impl SseEncode for crate::api::structure_designer::structure_designer_api_types::APIGeoTransData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::common_api_types::APIIVec3>::sse_encode(self.translation, serializer);
        <crate::api::common_api_types::APIIVec3>::sse_encode(self.rotation, serializer);
        <bool>::sse_encode(self.transform_only_frame, serializer);
    }
}

impl SseEncode for crate::api::structure_designer::structure_designer_api_types::APIHalfPlaneData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::common_api_types::APIIVec2>::sse_encode(self.point1, serializer);
        <crate::api::common_api_types::APIIVec2>::sse_encode(self.point2, serializer);
    }
}

impl SseEncode for crate::api::structure_designer::structure_designer_api_types::APIHalfSpaceData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.max_miller_index, serializer);
        <crate::api::common_api_types::APIIVec3>::sse_encode(self.miller_index, serializer);
        <crate::api::common_api_types::APIIVec3>::sse_encode(self.center, serializer);
        <i32>::sse_encode(self.shift, serializer);
    }
}

impl SseEncode for crate::api::structure_designer::structure_designer_api_types::APIImportXYZData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<String>>::sse_encode(self.file_name, serializer);
    }
}

impl SseEncode for crate::api::structure_designer::structure_designer_api_types::APIIntData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.value, serializer);
    }
}

impl SseEncode
    for crate::api::structure_designer::structure_designer_api_types::APILatticeSymopData
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::common_api_types::APIIVec3>::sse_encode(self.translation, serializer);
        <Option<crate::api::common_api_types::APIVec3>>::sse_encode(self.rotation_axis, serializer);
        <f64>::sse_encode(self.rotation_angle_degrees, serializer);
        <bool>::sse_encode(self.transform_only_frame, serializer);
        <Vec<crate::api::structure_designer::structure_designer_api_types::APIRotationalSymmetry>>::sse_encode(self.rotational_symmetries, serializer);
        <String>::sse_encode(self.crystal_system, serializer);
    }
}

impl SseEncode for crate::api::structure_designer::structure_designer_api_types::APIMapData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::structure_designer::structure_designer_api_types::APIDataType>::sse_encode(
            self.input_type,
            serializer,
        );
        <crate::api::structure_designer::structure_designer_api_types::APIDataType>::sse_encode(
            self.output_type,
            serializer,
        );
    }
}

impl SseEncode for crate::api::structure_designer::structure_designer_api_types::APIMotifData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.definition, serializer);
        <Option<String>>::sse_encode(self.name, serializer);
        <Option<String>>::sse_encode(self.error, serializer);
    }
}

impl SseEncode
    for crate::api::structure_designer::structure_designer_api_types::APINetworkWithValidationErrors
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.name, serializer);
        <Option<String>>::sse_encode(self.validation_errors, serializer);
    }
}

impl SseEncode for crate::api::structure_designer::structure_designer_api_types::APIParameterData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <usize>::sse_encode(self.param_index, serializer);
        <String>::sse_encode(self.param_name, serializer);
        <crate::api::structure_designer::structure_designer_api_types::APIDataType>::sse_encode(
            self.data_type,
            serializer,
        );
        <i32>::sse_encode(self.sort_order, serializer);
        <Option<String>>::sse_encode(self.error, serializer);
    }
}

impl SseEncode for crate::api::structure_designer::structure_designer_api_types::APIRangeData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.start, serializer);
        <i32>::sse_encode(self.step, serializer);
        <i32>::sse_encode(self.count, serializer);
    }
}

impl SseEncode for crate::api::structure_designer::structure_designer_api_types::APIRectData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::common_api_types::APIIVec2>::sse_encode(self.min_corner, serializer);
        <crate::api::common_api_types::APIIVec2>::sse_encode(self.extent, serializer);
    }
}

impl SseEncode for crate::api::structure_designer::structure_designer_api_types::APIRegPolyData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.num_sides, serializer);
        <i32>::sse_encode(self.radius, serializer);
    }
}

impl SseEncode for crate::api::common_api_types::APIResult {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.success, serializer);
        <String>::sse_encode(self.error_message, serializer);
    }
}

impl SseEncode
    for crate::api::structure_designer::structure_designer_api_types::APIRotationalSymmetry
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::common_api_types::APIVec3>::sse_encode(self.axis, serializer);
        <u32>::sse_encode(self.n_fold, serializer);
    }
}

impl SseEncode for crate::api::structure_designer::structure_designer_api_types::APISphereData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::common_api_types::APIIVec3>::sse_encode(self.center, serializer);
        <i32>::sse_encode(self.radius, serializer);
    }
}

impl SseEncode for crate::api::structure_designer::structure_designer_api_types::APIStringData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.value, serializer);
    }
}

impl SseEncode for crate::api::common_api_types::APITransform {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::common_api_types::APIVec3>::sse_encode(self.translation, serializer);
        <crate::api::common_api_types::APIVec3>::sse_encode(self.rotation, serializer);
    }
}

impl SseEncode for crate::api::structure_designer::structure_designer_api_types::APIUnitCellData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <f64>::sse_encode(self.cell_length_a, serializer);
        <f64>::sse_encode(self.cell_length_b, serializer);
        <f64>::sse_encode(self.cell_length_c, serializer);
        <f64>::sse_encode(self.cell_angle_alpha, serializer);
        <f64>::sse_encode(self.cell_angle_beta, serializer);
        <f64>::sse_encode(self.cell_angle_gamma, serializer);
        <String>::sse_encode(self.crystal_system, serializer);
    }
}

impl SseEncode for crate::api::common_api_types::APIVec2 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <f64>::sse_encode(self.x, serializer);
        <f64>::sse_encode(self.y, serializer);
    }
}

impl SseEncode for crate::api::structure_designer::structure_designer_api_types::APIVec2Data {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::common_api_types::APIVec2>::sse_encode(self.value, serializer);
    }
}

impl SseEncode for crate::api::common_api_types::APIVec3 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <f64>::sse_encode(self.x, serializer);
        <f64>::sse_encode(self.y, serializer);
        <f64>::sse_encode(self.z, serializer);
    }
}

impl SseEncode for crate::api::structure_designer::structure_designer_api_types::APIVec3Data {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::common_api_types::APIVec3>::sse_encode(self.value, serializer);
    }
}

impl SseEncode for crate::api::common_api_types::APIIVec2 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.x, serializer);
        <i32>::sse_encode(self.y, serializer);
    }
}

impl SseEncode for crate::api::structure_designer::structure_designer_api_types::APIIVec2Data {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::common_api_types::APIIVec2>::sse_encode(self.value, serializer);
    }
}

impl SseEncode for crate::api::common_api_types::APIIVec3 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.x, serializer);
        <i32>::sse_encode(self.y, serializer);
        <i32>::sse_encode(self.z, serializer);
    }
}

impl SseEncode for crate::api::structure_designer::structure_designer_api_types::APIIVec3Data {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::common_api_types::APIIVec3>::sse_encode(self.value, serializer);
    }
}

impl SseEncode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self as _).unwrap();
    }
}

impl SseEncode for crate::api::common_api_types::ElementSummary {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.atomic_number, serializer);
        <String>::sse_encode(self.element_name, serializer);
    }
}

impl SseEncode for f64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_f64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode
    for crate::api::structure_designer::structure_designer_preferences::GeometryVisualization
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(match self {crate::api::structure_designer::structure_designer_preferences::GeometryVisualization::SurfaceSplatting => { 0 }
crate::api::structure_designer::structure_designer_preferences::GeometryVisualization::DualContouring => { 1 }
crate::api::structure_designer::structure_designer_preferences::GeometryVisualization::ExplicitMesh => { 2 }
 _ => { unimplemented!(""); }}, serializer);
    }
}

impl SseEncode for crate::api::structure_designer::structure_designer_preferences::GeometryVisualizationPreferences {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<crate::api::structure_designer::structure_designer_preferences::GeometryVisualization>::sse_encode(self.geometry_visualization, serializer);
<bool>::sse_encode(self.wireframe_geometry, serializer);
<i32>::sse_encode(self.samples_per_unit_cell, serializer);
<f64>::sse_encode(self.sharpness_angle_threshold_degree, serializer);
<crate::api::structure_designer::structure_designer_preferences::MeshSmoothing>::sse_encode(self.mesh_smoothing, serializer);
<bool>::sse_encode(self.display_camera_target, serializer);}
                }

impl SseEncode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for crate::api::structure_designer::structure_designer_api_types::InputPinView {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.name, serializer);
        <String>::sse_encode(self.data_type, serializer);
        <bool>::sse_encode(self.multi, serializer);
    }
}

impl SseEncode for Vec<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <String>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode
    for Vec<crate::api::structure_designer::structure_designer_api_types::APICrystalTypeInfo>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::structure_designer::structure_designer_api_types::APICrystalTypeInfo>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode
    for Vec<crate::api::structure_designer::structure_designer_api_types::APIExprParameter>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::structure_designer::structure_designer_api_types::APIExprParameter>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::structure_designer::structure_designer_api_types::APIFacet> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::structure_designer::structure_designer_api_types::APIFacet>::sse_encode(
                item, serializer,
            );
        }
    }
}

impl SseEncode for Vec<crate::api::structure_designer::structure_designer_api_types::APINetworkWithValidationErrors> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<i32>::sse_encode(self.len() as _, serializer);
        for item in self { <crate::api::structure_designer::structure_designer_api_types::APINetworkWithValidationErrors>::sse_encode(item, serializer); }}
                }

impl SseEncode
    for Vec<crate::api::structure_designer::structure_designer_api_types::APIRotationalSymmetry>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::structure_designer::structure_designer_api_types::APIRotationalSymmetry>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::common_api_types::ElementSummary> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::common_api_types::ElementSummary>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::structure_designer::structure_designer_api_types::InputPinView> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::structure_designer::structure_designer_api_types::InputPinView>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <u8>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode
    for Vec<(
        u64,
        crate::api::structure_designer::structure_designer_api_types::NodeView,
    )>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <(
                u64,
                crate::api::structure_designer::structure_designer_api_types::NodeView,
            )>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::structure_designer::structure_designer_api_types::WireView> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::structure_designer::structure_designer_api_types::WireView>::sse_encode(
                item, serializer,
            );
        }
    }
}

impl SseEncode for crate::api::structure_designer::structure_designer_preferences::MeshSmoothing {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(match self {crate::api::structure_designer::structure_designer_preferences::MeshSmoothing::Smooth => { 0 }
crate::api::structure_designer::structure_designer_preferences::MeshSmoothing::Sharp => { 1 }
crate::api::structure_designer::structure_designer_preferences::MeshSmoothing::SmoothingGroupBased => { 2 }
 _ => { unimplemented!(""); }}, serializer);
    }
}

impl SseEncode
    for crate::api::structure_designer::structure_designer_preferences::NodeDisplayPolicy
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(match self {crate::api::structure_designer::structure_designer_preferences::NodeDisplayPolicy::Manual => { 0 }
crate::api::structure_designer::structure_designer_preferences::NodeDisplayPolicy::PreferSelected => { 1 }
crate::api::structure_designer::structure_designer_preferences::NodeDisplayPolicy::PreferFrontier => { 2 }
 _ => { unimplemented!(""); }}, serializer);
    }
}

impl SseEncode
    for crate::api::structure_designer::structure_designer_preferences::NodeDisplayPreferences
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::structure_designer::structure_designer_preferences::NodeDisplayPolicy>::sse_encode(self.display_policy, serializer);
    }
}

impl SseEncode for crate::api::structure_designer::structure_designer_api_types::NodeNetworkView {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.name, serializer);
        <std::collections::HashMap<
            u64,
            crate::api::structure_designer::structure_designer_api_types::NodeView,
        >>::sse_encode(self.nodes, serializer);
        <Vec<crate::api::structure_designer::structure_designer_api_types::WireView>>::sse_encode(
            self.wires, serializer,
        );
    }
}

impl SseEncode for crate::api::structure_designer::structure_designer_api_types::NodeView {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u64>::sse_encode(self.id, serializer);
        <String>::sse_encode(self.node_type_name, serializer);
        <crate::api::common_api_types::APIVec2>::sse_encode(self.position, serializer);
        <Vec<crate::api::structure_designer::structure_designer_api_types::InputPinView>>::sse_encode(self.input_pins, serializer);
        <String>::sse_encode(self.output_type, serializer);
        <String>::sse_encode(self.function_type, serializer);
        <bool>::sse_encode(self.selected, serializer);
        <bool>::sse_encode(self.displayed, serializer);
        <bool>::sse_encode(self.return_node, serializer);
        <Option<String>>::sse_encode(self.error, serializer);
        <Option<String>>::sse_encode(self.output_string, serializer);
        <Option<String>>::sse_encode(self.subtitle, serializer);
    }
}

impl SseEncode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <String>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode
    for Option<crate::api::structure_designer::structure_designer_api_types::APIAtomCutData>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::structure_designer::structure_designer_api_types::APIAtomCutData>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode
    for Option<crate::api::structure_designer::structure_designer_api_types::APIAtomFillData>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::structure_designer::structure_designer_api_types::APIAtomFillData>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode
    for Option<crate::api::structure_designer::structure_designer_api_types::APIAtomTransData>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::structure_designer::structure_designer_api_types::APIAtomTransData>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode
    for Option<crate::api::structure_designer::structure_designer_api_types::APIBoolData>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::structure_designer::structure_designer_api_types::APIBoolData>::sse_encode(
                value, serializer,
            );
        }
    }
}

impl SseEncode for Option<crate::api::common_api_types::APICamera> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::common_api_types::APICamera>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode
    for Option<crate::api::structure_designer::structure_designer_api_types::APICircleData>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::structure_designer::structure_designer_api_types::APICircleData>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode
    for Option<crate::api::structure_designer::structure_designer_api_types::APICuboidData>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::structure_designer::structure_designer_api_types::APICuboidData>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode
    for Option<crate::api::structure_designer::structure_designer_api_types::APIDataType>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::structure_designer::structure_designer_api_types::APIDataType>::sse_encode(
                value, serializer,
            );
        }
    }
}

impl SseEncode
    for Option<crate::api::structure_designer::structure_designer_api_types::APIEditAtomData>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::structure_designer::structure_designer_api_types::APIEditAtomData>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode
    for Option<crate::api::structure_designer::structure_designer_api_types::APIEditAtomTool>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::structure_designer::structure_designer_api_types::APIEditAtomTool>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode
    for Option<crate::api::structure_designer::structure_designer_api_types::APIExportXYZData>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::structure_designer::structure_designer_api_types::APIExportXYZData>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode
    for Option<crate::api::structure_designer::structure_designer_api_types::APIExprData>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::structure_designer::structure_designer_api_types::APIExprData>::sse_encode(
                value, serializer,
            );
        }
    }
}

impl SseEncode
    for Option<crate::api::structure_designer::structure_designer_api_types::APIExtrudeData>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::structure_designer::structure_designer_api_types::APIExtrudeData>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode
    for Option<crate::api::structure_designer::structure_designer_api_types::APIFacetShellData>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::structure_designer::structure_designer_api_types::APIFacetShellData>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode
    for Option<crate::api::structure_designer::structure_designer_api_types::APIFloatData>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::structure_designer::structure_designer_api_types::APIFloatData>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode
    for Option<crate::api::structure_designer::structure_designer_api_types::APIGeoToAtomData>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::structure_designer::structure_designer_api_types::APIGeoToAtomData>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode
    for Option<crate::api::structure_designer::structure_designer_api_types::APIGeoTransData>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::structure_designer::structure_designer_api_types::APIGeoTransData>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode
    for Option<crate::api::structure_designer::structure_designer_api_types::APIHalfPlaneData>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::structure_designer::structure_designer_api_types::APIHalfPlaneData>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode
    for Option<crate::api::structure_designer::structure_designer_api_types::APIHalfSpaceData>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::structure_designer::structure_designer_api_types::APIHalfSpaceData>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode
    for Option<crate::api::structure_designer::structure_designer_api_types::APIImportXYZData>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::structure_designer::structure_designer_api_types::APIImportXYZData>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode
    for Option<crate::api::structure_designer::structure_designer_api_types::APIIntData>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::structure_designer::structure_designer_api_types::APIIntData>::sse_encode(
                value, serializer,
            );
        }
    }
}

impl SseEncode
    for Option<crate::api::structure_designer::structure_designer_api_types::APILatticeSymopData>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::structure_designer::structure_designer_api_types::APILatticeSymopData>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode
    for Option<crate::api::structure_designer::structure_designer_api_types::APIMapData>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::structure_designer::structure_designer_api_types::APIMapData>::sse_encode(
                value, serializer,
            );
        }
    }
}

impl SseEncode
    for Option<crate::api::structure_designer::structure_designer_api_types::APIMotifData>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::structure_designer::structure_designer_api_types::APIMotifData>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode
    for Option<crate::api::structure_designer::structure_designer_api_types::APIParameterData>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::structure_designer::structure_designer_api_types::APIParameterData>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode
    for Option<crate::api::structure_designer::structure_designer_api_types::APIRangeData>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::structure_designer::structure_designer_api_types::APIRangeData>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode
    for Option<crate::api::structure_designer::structure_designer_api_types::APIRectData>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::structure_designer::structure_designer_api_types::APIRectData>::sse_encode(
                value, serializer,
            );
        }
    }
}

impl SseEncode
    for Option<crate::api::structure_designer::structure_designer_api_types::APIRegPolyData>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::structure_designer::structure_designer_api_types::APIRegPolyData>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode
    for Option<crate::api::structure_designer::structure_designer_api_types::APISphereData>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::structure_designer::structure_designer_api_types::APISphereData>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode
    for Option<crate::api::structure_designer::structure_designer_api_types::APIStringData>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::structure_designer::structure_designer_api_types::APIStringData>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::common_api_types::APITransform> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::common_api_types::APITransform>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode
    for Option<crate::api::structure_designer::structure_designer_api_types::APIUnitCellData>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::structure_designer::structure_designer_api_types::APIUnitCellData>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode
    for Option<crate::api::structure_designer::structure_designer_api_types::APIVec2Data>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::structure_designer::structure_designer_api_types::APIVec2Data>::sse_encode(
                value, serializer,
            );
        }
    }
}

impl SseEncode for Option<crate::api::common_api_types::APIVec3> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::common_api_types::APIVec3>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode
    for Option<crate::api::structure_designer::structure_designer_api_types::APIVec3Data>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::structure_designer::structure_designer_api_types::APIVec3Data>::sse_encode(
                value, serializer,
            );
        }
    }
}

impl SseEncode
    for Option<crate::api::structure_designer::structure_designer_api_types::APIIVec2Data>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::structure_designer::structure_designer_api_types::APIIVec2Data>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode
    for Option<crate::api::structure_designer::structure_designer_api_types::APIIVec3Data>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::structure_designer::structure_designer_api_types::APIIVec3Data>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<i32> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <i32>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode
    for Option<crate::api::structure_designer::structure_designer_api_types::NodeNetworkView>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::structure_designer::structure_designer_api_types::NodeNetworkView>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::structure_designer::structure_designer_preferences::StructureDesignerPreferences> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<bool>::sse_encode(self.is_some(), serializer);
                if let Some(value) = self {
                    <crate::api::structure_designer::structure_designer_preferences::StructureDesignerPreferences>::sse_encode(value, serializer);
                }}
                }

impl SseEncode for Option<u64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <u64>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<usize> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <usize>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<Vec<String>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Vec<String>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<Vec<crate::api::structure_designer::structure_designer_api_types::APINetworkWithValidationErrors>> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<bool>::sse_encode(self.is_some(), serializer);
                if let Some(value) = self {
                    <Vec<crate::api::structure_designer::structure_designer_api_types::APINetworkWithValidationErrors>>::sse_encode(value, serializer);
                }}
                }

impl SseEncode
    for (
        u64,
        crate::api::structure_designer::structure_designer_api_types::NodeView,
    )
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u64>::sse_encode(self.0, serializer);
        <crate::api::structure_designer::structure_designer_api_types::NodeView>::sse_encode(
            self.1, serializer,
        );
    }
}

impl SseEncode for crate::api::common_api_types::SelectModifier {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::api::common_api_types::SelectModifier::Replace => 0,
                crate::api::common_api_types::SelectModifier::Toggle => 1,
                crate::api::common_api_types::SelectModifier::Expand => 2,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode
    for crate::api::structure_designer::structure_designer_preferences::StructureDesignerPreferences
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::structure_designer::structure_designer_preferences::GeometryVisualizationPreferences>::sse_encode(self.geometry_visualization_preferences, serializer);
        <crate::api::structure_designer::structure_designer_preferences::NodeDisplayPreferences>::sse_encode(self.node_display_preferences, serializer);
    }
}

impl SseEncode for u32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for u64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self).unwrap();
    }
}

impl SseEncode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer
            .cursor
            .write_u64::<NativeEndian>(self as _)
            .unwrap();
    }
}

impl SseEncode for crate::api::structure_designer::structure_designer_api_types::WireView {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u64>::sse_encode(self.source_node_id, serializer);
        <i32>::sse_encode(self.source_output_pin_index, serializer);
        <u64>::sse_encode(self.dest_node_id, serializer);
        <usize>::sse_encode(self.dest_param_index, serializer);
        <bool>::sse_encode(self.selected, serializer);
    }
}

#[cfg(not(target_family = "wasm"))]
mod io {
    // This file is automatically generated, so please do not edit it.
    // @generated by `flutter_rust_bridge`@ 2.10.0.

    // Section: imports

    use super::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
    use flutter_rust_bridge::{Handler, IntoIntoDart};

    // Section: boilerplate

    flutter_rust_bridge::frb_generated_boilerplate_io!();
}
#[cfg(not(target_family = "wasm"))]
pub use io::*;

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
mod web {
    // This file is automatically generated, so please do not edit it.
    // @generated by `flutter_rust_bridge`@ 2.10.0.

    // Section: imports

    use super::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::wasm_bindgen;
    use flutter_rust_bridge::for_generated::wasm_bindgen::prelude::*;
    use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
    use flutter_rust_bridge::{Handler, IntoIntoDart};

    // Section: boilerplate

    flutter_rust_bridge::frb_generated_boilerplate_web!();
}
#[cfg(target_family = "wasm")]
pub use web::*;
