// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.7.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Mat4>>
abstract class Mat4 implements RustOpaqueInterface {}

class Camera {
  final Vec3 eye;
  final Vec3 target;
  final Vec3 up;
  final double aspect;
  final double fovy;
  final double znear;
  final double zfar;

  const Camera({
    required this.eye,
    required this.target,
    required this.up,
    required this.aspect,
    required this.fovy,
    required this.znear,
    required this.zfar,
  });

  Future<Mat4> buildViewProjectionMatrix() =>
      RustLib.instance.api.crateRendererCameraCameraBuildViewProjectionMatrix(
        that: this,
      );

  @override
  int get hashCode =>
      eye.hashCode ^
      target.hashCode ^
      up.hashCode ^
      aspect.hashCode ^
      fovy.hashCode ^
      znear.hashCode ^
      zfar.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Camera &&
          runtimeType == other.runtimeType &&
          eye == other.eye &&
          target == other.target &&
          up == other.up &&
          aspect == other.aspect &&
          fovy == other.fovy &&
          znear == other.znear &&
          zfar == other.zfar;
}

class Vec3 {
  final double x;
  final double y;
  final double z;

  const Vec3({
    required this.x,
    required this.y,
    required this.z,
  });

  @override
  int get hashCode => x.hashCode ^ y.hashCode ^ z.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Vec3 &&
          runtimeType == other.runtimeType &&
          x == other.x &&
          y == other.y &&
          z == other.z;
}
