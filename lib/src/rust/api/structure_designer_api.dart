// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.7.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'common_api_types.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'structure_designer_api_types.dart';

void addAtom({required int atomicNumber, required APIVec3 position}) =>
    RustLib.instance.api.crateApiStructureDesignerApiAddAtom(
        atomicNumber: atomicNumber, position: position);

NodeNetworkView? getNodeNetworkView({required String nodeNetworkName}) =>
    RustLib.instance.api.crateApiStructureDesignerApiGetNodeNetworkView(
        nodeNetworkName: nodeNetworkName);

void moveNode({required BigInt nodeId, required APIVec2 position}) => RustLib
    .instance.api
    .crateApiStructureDesignerApiMoveNode(nodeId: nodeId, position: position);

BigInt addNode({required String nodeTypeName, required APIVec2 position}) =>
    RustLib.instance.api.crateApiStructureDesignerApiAddNode(
        nodeTypeName: nodeTypeName, position: position);

void connectNodes(
        {required BigInt sourceNodeId,
        required BigInt destNodeId,
        required BigInt destParamIndex}) =>
    RustLib.instance.api.crateApiStructureDesignerApiConnectNodes(
        sourceNodeId: sourceNodeId,
        destNodeId: destNodeId,
        destParamIndex: destParamIndex);

List<String>? getNodeTypeNames() =>
    RustLib.instance.api.crateApiStructureDesignerApiGetNodeTypeNames();

List<String>? getNodeNetworkNames() =>
    RustLib.instance.api.crateApiStructureDesignerApiGetNodeNetworkNames();

void setActiveNodeNetwork({required String nodeNetworkName}) =>
    RustLib.instance.api.crateApiStructureDesignerApiSetActiveNodeNetwork(
        nodeNetworkName: nodeNetworkName);

void setNodeDisplay({required BigInt nodeId, required bool isDisplayed}) =>
    RustLib.instance.api.crateApiStructureDesignerApiSetNodeDisplay(
        nodeId: nodeId, isDisplayed: isDisplayed);

bool selectNode({required BigInt nodeId}) =>
    RustLib.instance.api.crateApiStructureDesignerApiSelectNode(nodeId: nodeId);

bool selectWire(
        {required BigInt sourceNodeId,
        required BigInt destinationNodeId,
        required BigInt destinationArgumentIndex}) =>
    RustLib.instance.api.crateApiStructureDesignerApiSelectWire(
        sourceNodeId: sourceNodeId,
        destinationNodeId: destinationNodeId,
        destinationArgumentIndex: destinationArgumentIndex);

void clearSelection() =>
    RustLib.instance.api.crateApiStructureDesignerApiClearSelection();

APICuboidData? getCuboidData({required BigInt nodeId}) => RustLib.instance.api
    .crateApiStructureDesignerApiGetCuboidData(nodeId: nodeId);

APISphereData? getSphereData({required BigInt nodeId}) => RustLib.instance.api
    .crateApiStructureDesignerApiGetSphereData(nodeId: nodeId);

APIHalfSpaceData? getHalfSpaceData({required BigInt nodeId}) =>
    RustLib.instance.api
        .crateApiStructureDesignerApiGetHalfSpaceData(nodeId: nodeId);

APIGeoTransData? getGeoTransData({required BigInt nodeId}) =>
    RustLib.instance.api
        .crateApiStructureDesignerApiGetGeoTransData(nodeId: nodeId);

APIAtomTransData? getAtomTransData({required BigInt nodeId}) =>
    RustLib.instance.api
        .crateApiStructureDesignerApiGetAtomTransData(nodeId: nodeId);

void setCuboidData({required BigInt nodeId, required APICuboidData data}) =>
    RustLib.instance.api
        .crateApiStructureDesignerApiSetCuboidData(nodeId: nodeId, data: data);

void setSphereData({required BigInt nodeId, required APISphereData data}) =>
    RustLib.instance.api
        .crateApiStructureDesignerApiSetSphereData(nodeId: nodeId, data: data);

void setHalfSpaceData(
        {required BigInt nodeId, required APIHalfSpaceData data}) =>
    RustLib.instance.api.crateApiStructureDesignerApiSetHalfSpaceData(
        nodeId: nodeId, data: data);

void setGeoTransData({required BigInt nodeId, required APIGeoTransData data}) =>
    RustLib.instance.api.crateApiStructureDesignerApiSetGeoTransData(
        nodeId: nodeId, data: data);

void setAtomTransData(
        {required BigInt nodeId, required APIAtomTransData data}) =>
    RustLib.instance.api.crateApiStructureDesignerApiSetAtomTransData(
        nodeId: nodeId, data: data);

void deleteSelected() =>
    RustLib.instance.api.crateApiStructureDesignerApiDeleteSelected();
