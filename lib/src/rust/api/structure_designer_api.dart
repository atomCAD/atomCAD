// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.7.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'common_api_types.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'structure_designer_api_types.dart';

void addAtom({required int atomicNumber, required APIVec3 position}) =>
    RustLib.instance.api.crateApiStructureDesignerApiAddAtom(
        atomicNumber: atomicNumber, position: position);

NodeNetworkView? getNodeNetworkView({required String nodeNetworkName}) =>
    RustLib.instance.api.crateApiStructureDesignerApiGetNodeNetworkView(
        nodeNetworkName: nodeNetworkName);

void moveNode(
        {required String nodeNetworkName,
        required BigInt nodeId,
        required APIVec2 position}) =>
    RustLib.instance.api.crateApiStructureDesignerApiMoveNode(
        nodeNetworkName: nodeNetworkName, nodeId: nodeId, position: position);

BigInt addNode(
        {required String nodeNetworkName,
        required String nodeTypeName,
        required APIVec2 position}) =>
    RustLib.instance.api.crateApiStructureDesignerApiAddNode(
        nodeNetworkName: nodeNetworkName,
        nodeTypeName: nodeTypeName,
        position: position);

void connectNodes(
        {required String nodeNetworkName,
        required BigInt sourceNodeId,
        required BigInt destNodeId,
        required BigInt destParamIndex}) =>
    RustLib.instance.api.crateApiStructureDesignerApiConnectNodes(
        nodeNetworkName: nodeNetworkName,
        sourceNodeId: sourceNodeId,
        destNodeId: destNodeId,
        destParamIndex: destParamIndex);

List<String>? getNodeTypeNames() =>
    RustLib.instance.api.crateApiStructureDesignerApiGetNodeTypeNames();

List<String>? getNodeNetworkNames() =>
    RustLib.instance.api.crateApiStructureDesignerApiGetNodeNetworkNames();

void setNodeDisplay(
        {required String nodeNetworkName,
        required BigInt nodeId,
        required bool isDisplayed}) =>
    RustLib.instance.api.crateApiStructureDesignerApiSetNodeDisplay(
        nodeNetworkName: nodeNetworkName,
        nodeId: nodeId,
        isDisplayed: isDisplayed);

bool selectNode({required String nodeNetworkName, required BigInt nodeId}) =>
    RustLib.instance.api.crateApiStructureDesignerApiSelectNode(
        nodeNetworkName: nodeNetworkName, nodeId: nodeId);

bool selectWire(
        {required String nodeNetworkName,
        required BigInt sourceNodeId,
        required BigInt destinationNodeId,
        required BigInt destinationArgumentIndex}) =>
    RustLib.instance.api.crateApiStructureDesignerApiSelectWire(
        nodeNetworkName: nodeNetworkName,
        sourceNodeId: sourceNodeId,
        destinationNodeId: destinationNodeId,
        destinationArgumentIndex: destinationArgumentIndex);

void clearSelection({required String nodeNetworkName}) =>
    RustLib.instance.api.crateApiStructureDesignerApiClearSelection(
        nodeNetworkName: nodeNetworkName);

APICuboidData? getCuboidData(
        {required String nodeNetworkName, required BigInt nodeId}) =>
    RustLib.instance.api.crateApiStructureDesignerApiGetCuboidData(
        nodeNetworkName: nodeNetworkName, nodeId: nodeId);

APISphereData? getSphereData(
        {required String nodeNetworkName, required BigInt nodeId}) =>
    RustLib.instance.api.crateApiStructureDesignerApiGetSphereData(
        nodeNetworkName: nodeNetworkName, nodeId: nodeId);

APIHalfSpaceData? getHalfSpaceData(
        {required String nodeNetworkName, required BigInt nodeId}) =>
    RustLib.instance.api.crateApiStructureDesignerApiGetHalfSpaceData(
        nodeNetworkName: nodeNetworkName, nodeId: nodeId);

APIGeoTransData? getGeoTransData(
        {required String nodeNetworkName, required BigInt nodeId}) =>
    RustLib.instance.api.crateApiStructureDesignerApiGetGeoTransData(
        nodeNetworkName: nodeNetworkName, nodeId: nodeId);

APIAtomTransData? getAtomTransData(
        {required String nodeNetworkName, required BigInt nodeId}) =>
    RustLib.instance.api.crateApiStructureDesignerApiGetAtomTransData(
        nodeNetworkName: nodeNetworkName, nodeId: nodeId);

void setCuboidData(
        {required String nodeNetworkName,
        required BigInt nodeId,
        required APICuboidData data}) =>
    RustLib.instance.api.crateApiStructureDesignerApiSetCuboidData(
        nodeNetworkName: nodeNetworkName, nodeId: nodeId, data: data);

void setSphereData(
        {required String nodeNetworkName,
        required BigInt nodeId,
        required APISphereData data}) =>
    RustLib.instance.api.crateApiStructureDesignerApiSetSphereData(
        nodeNetworkName: nodeNetworkName, nodeId: nodeId, data: data);

void setHalfSpaceData(
        {required String nodeNetworkName,
        required BigInt nodeId,
        required APIHalfSpaceData data}) =>
    RustLib.instance.api.crateApiStructureDesignerApiSetHalfSpaceData(
        nodeNetworkName: nodeNetworkName, nodeId: nodeId, data: data);

void setGeoTransData(
        {required String nodeNetworkName,
        required BigInt nodeId,
        required APIGeoTransData data}) =>
    RustLib.instance.api.crateApiStructureDesignerApiSetGeoTransData(
        nodeNetworkName: nodeNetworkName, nodeId: nodeId, data: data);

void setAtomTransData(
        {required String nodeNetworkName,
        required BigInt nodeId,
        required APIAtomTransData data}) =>
    RustLib.instance.api.crateApiStructureDesignerApiSetAtomTransData(
        nodeNetworkName: nodeNetworkName, nodeId: nodeId, data: data);

void deleteSelected({required String nodeNetworkName}) =>
    RustLib.instance.api.crateApiStructureDesignerApiDeleteSelected(
        nodeNetworkName: nodeNetworkName);
