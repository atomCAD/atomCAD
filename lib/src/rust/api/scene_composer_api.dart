// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.7.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'common_api_types.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'scene_composer_api_types.dart';

bool sceneComposerUndo() =>
    RustLib.instance.api.crateApiSceneComposerApiSceneComposerUndo();

bool sceneComposerRedo() =>
    RustLib.instance.api.crateApiSceneComposerApiSceneComposerRedo();

SceneComposerView? getSceneComposerView() =>
    RustLib.instance.api.crateApiSceneComposerApiGetSceneComposerView();

APITransform? getSelectedFrameTransform() =>
    RustLib.instance.api.crateApiSceneComposerApiGetSelectedFrameTransform();

void setSelectedFrameTransform({required APITransform transform}) => RustLib
    .instance.api
    .crateApiSceneComposerApiSetSelectedFrameTransform(transform: transform);

void sceneComposerRenameCluster(
        {required BigInt clusterId, required String newName}) =>
    RustLib.instance.api.crateApiSceneComposerApiSceneComposerRenameCluster(
        clusterId: clusterId, newName: newName);

void importXyz({required String filePath}) =>
    RustLib.instance.api.crateApiSceneComposerApiImportXyz(filePath: filePath);

bool exportXyz({required String filePath}) =>
    RustLib.instance.api.crateApiSceneComposerApiExportXyz(filePath: filePath);

BigInt? selectClusterByRay(
        {required APIVec3 rayStart,
        required APIVec3 rayDir,
        required SelectModifier selectModifier}) =>
    RustLib.instance.api.crateApiSceneComposerApiSelectClusterByRay(
        rayStart: rayStart, rayDir: rayDir, selectModifier: selectModifier);

void selectClusterById(
        {required BigInt clusterId, required SelectModifier selectModifier}) =>
    RustLib.instance.api.crateApiSceneComposerApiSelectClusterById(
        clusterId: clusterId, selectModifier: selectModifier);

void translateAlongLocalAxis(
        {required int axisIndex, required double translation}) =>
    RustLib.instance.api.crateApiSceneComposerApiTranslateAlongLocalAxis(
        axisIndex: axisIndex, translation: translation);

void rotateAroundLocalAxis(
        {required int axisIndex, required double angleDegrees}) =>
    RustLib.instance.api.crateApiSceneComposerApiRotateAroundLocalAxis(
        axisIndex: axisIndex, angleDegrees: angleDegrees);

bool isFrameLockedToAtoms() =>
    RustLib.instance.api.crateApiSceneComposerApiIsFrameLockedToAtoms();

void setFrameLockedToAtoms({required bool locked}) => RustLib.instance.api
    .crateApiSceneComposerApiSetFrameLockedToAtoms(locked: locked);

BigInt? selectAlignAtomByRay(
        {required APIVec3 rayStart, required APIVec3 rayDir}) =>
    RustLib.instance.api.crateApiSceneComposerApiSelectAlignAtomByRay(
        rayStart: rayStart, rayDir: rayDir);

void setActiveSceneComposerTool({required APISceneComposerTool tool}) =>
    RustLib.instance.api
        .crateApiSceneComposerApiSetActiveSceneComposerTool(tool: tool);

String getAlignToolStateText() =>
    RustLib.instance.api.crateApiSceneComposerApiGetAlignToolStateText();

String getDistanceToolStateText() =>
    RustLib.instance.api.crateApiSceneComposerApiGetDistanceToolStateText();

BigInt? selectAtomInfoAtomByRay(
        {required APIVec3 rayStart, required APIVec3 rayDir}) =>
    RustLib.instance.api.crateApiSceneComposerApiSelectAtomInfoAtomByRay(
        rayStart: rayStart, rayDir: rayDir);

AtomView? getSceneComposerAtomInfo() =>
    RustLib.instance.api.crateApiSceneComposerApiGetSceneComposerAtomInfo();

BigInt? selectDistanceAtomByRay(
        {required APIVec3 rayStart, required APIVec3 rayDir}) =>
    RustLib.instance.api.crateApiSceneComposerApiSelectDistanceAtomByRay(
        rayStart: rayStart, rayDir: rayDir);

void sceneComposerNewModel() =>
    RustLib.instance.api.crateApiSceneComposerApiSceneComposerNewModel();
