// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.10.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import '../common_api_types.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'structure_designer_api_types.dart';
import 'structure_designer_preferences.dart';

// These functions are ignored because they are not marked as `pub`: `api_data_type_to_data_type`, `data_type_to_api_data_type`

NodeNetworkView? getNodeNetworkView() => RustLib.instance.api
    .crateApiStructureDesignerStructureDesignerApiGetNodeNetworkView();

void moveNode({required BigInt nodeId, required APIVec2 position}) =>
    RustLib.instance.api.crateApiStructureDesignerStructureDesignerApiMoveNode(
        nodeId: nodeId, position: position);

BigInt addNode({required String nodeTypeName, required APIVec2 position}) =>
    RustLib.instance.api.crateApiStructureDesignerStructureDesignerApiAddNode(
        nodeTypeName: nodeTypeName, position: position);

bool canConnectNodes(
        {required BigInt sourceNodeId,
        required int sourceOutputPinIndex,
        required BigInt destNodeId,
        required BigInt destParamIndex}) =>
    RustLib.instance.api
        .crateApiStructureDesignerStructureDesignerApiCanConnectNodes(
            sourceNodeId: sourceNodeId,
            sourceOutputPinIndex: sourceOutputPinIndex,
            destNodeId: destNodeId,
            destParamIndex: destParamIndex);

void connectNodes(
        {required BigInt sourceNodeId,
        required int sourceOutputPinIndex,
        required BigInt destNodeId,
        required BigInt destParamIndex}) =>
    RustLib.instance.api
        .crateApiStructureDesignerStructureDesignerApiConnectNodes(
            sourceNodeId: sourceNodeId,
            sourceOutputPinIndex: sourceOutputPinIndex,
            destNodeId: destNodeId,
            destParamIndex: destParamIndex);

List<String>? getNodeTypeNames() => RustLib.instance.api
    .crateApiStructureDesignerStructureDesignerApiGetNodeTypeNames();

List<String>? getNodeNetworkNames() => RustLib.instance.api
    .crateApiStructureDesignerStructureDesignerApiGetNodeNetworkNames();

List<APINetworkWithValidationErrors>? getNodeNetworksWithValidation() => RustLib
    .instance.api
    .crateApiStructureDesignerStructureDesignerApiGetNodeNetworksWithValidation();

void addNewNodeNetwork() => RustLib.instance.api
    .crateApiStructureDesignerStructureDesignerApiAddNewNodeNetwork();

void setActiveNodeNetwork({required String nodeNetworkName}) => RustLib
    .instance.api
    .crateApiStructureDesignerStructureDesignerApiSetActiveNodeNetwork(
        nodeNetworkName: nodeNetworkName);

bool renameNodeNetwork({required String oldName, required String newName}) =>
    RustLib.instance.api
        .crateApiStructureDesignerStructureDesignerApiRenameNodeNetwork(
            oldName: oldName, newName: newName);

void setNodeDisplay({required BigInt nodeId, required bool isDisplayed}) =>
    RustLib.instance.api
        .crateApiStructureDesignerStructureDesignerApiSetNodeDisplay(
            nodeId: nodeId, isDisplayed: isDisplayed);

bool selectNode({required BigInt nodeId}) => RustLib.instance.api
    .crateApiStructureDesignerStructureDesignerApiSelectNode(nodeId: nodeId);

bool selectWire(
        {required BigInt sourceNodeId,
        required int sourceOutputPinIndex,
        required BigInt destinationNodeId,
        required BigInt destinationArgumentIndex}) =>
    RustLib.instance.api
        .crateApiStructureDesignerStructureDesignerApiSelectWire(
            sourceNodeId: sourceNodeId,
            sourceOutputPinIndex: sourceOutputPinIndex,
            destinationNodeId: destinationNodeId,
            destinationArgumentIndex: destinationArgumentIndex);

void clearSelection() => RustLib.instance.api
    .crateApiStructureDesignerStructureDesignerApiClearSelection();

APIExtrudeData? getExtrudeData({required BigInt nodeId}) => RustLib.instance.api
    .crateApiStructureDesignerStructureDesignerApiGetExtrudeData(
        nodeId: nodeId);

APIIntData? getIntData({required BigInt nodeId}) => RustLib.instance.api
    .crateApiStructureDesignerStructureDesignerApiGetIntData(nodeId: nodeId);

APIStringData? getStringData({required BigInt nodeId}) => RustLib.instance.api
    .crateApiStructureDesignerStructureDesignerApiGetStringData(nodeId: nodeId);

APIBoolData? getBoolData({required BigInt nodeId}) => RustLib.instance.api
    .crateApiStructureDesignerStructureDesignerApiGetBoolData(nodeId: nodeId);

APIFloatData? getFloatData({required BigInt nodeId}) => RustLib.instance.api
    .crateApiStructureDesignerStructureDesignerApiGetFloatData(nodeId: nodeId);

APIIVec2Data? getIvec2Data({required BigInt nodeId}) => RustLib.instance.api
    .crateApiStructureDesignerStructureDesignerApiGetIvec2Data(nodeId: nodeId);

APIIVec3Data? getIvec3Data({required BigInt nodeId}) => RustLib.instance.api
    .crateApiStructureDesignerStructureDesignerApiGetIvec3Data(nodeId: nodeId);

APIRangeData? getRangeData({required BigInt nodeId}) => RustLib.instance.api
    .crateApiStructureDesignerStructureDesignerApiGetRangeData(nodeId: nodeId);

APIVec2Data? getVec2Data({required BigInt nodeId}) => RustLib.instance.api
    .crateApiStructureDesignerStructureDesignerApiGetVec2Data(nodeId: nodeId);

APIVec3Data? getVec3Data({required BigInt nodeId}) => RustLib.instance.api
    .crateApiStructureDesignerStructureDesignerApiGetVec3Data(nodeId: nodeId);

APIRectData? getRectData({required BigInt nodeId}) => RustLib.instance.api
    .crateApiStructureDesignerStructureDesignerApiGetRectData(nodeId: nodeId);

APIRegPolyData? getRegPolyData({required BigInt nodeId}) => RustLib.instance.api
    .crateApiStructureDesignerStructureDesignerApiGetRegPolyData(
        nodeId: nodeId);

APICircleData? getCircleData({required BigInt nodeId}) => RustLib.instance.api
    .crateApiStructureDesignerStructureDesignerApiGetCircleData(nodeId: nodeId);

APIHalfPlaneData? getHalfPlaneData({required BigInt nodeId}) => RustLib
    .instance.api
    .crateApiStructureDesignerStructureDesignerApiGetHalfPlaneData(
        nodeId: nodeId);

APICuboidData? getCuboidData({required BigInt nodeId}) => RustLib.instance.api
    .crateApiStructureDesignerStructureDesignerApiGetCuboidData(nodeId: nodeId);

APIAnchorData? getAnchorData({required BigInt nodeId}) => RustLib.instance.api
    .crateApiStructureDesignerStructureDesignerApiGetAnchorData(nodeId: nodeId);

APIAtomCutData? getAtomCutData({required BigInt nodeId}) => RustLib.instance.api
    .crateApiStructureDesignerStructureDesignerApiGetAtomCutData(
        nodeId: nodeId);

APIImportXYZData? getImportXyzData({required BigInt nodeId}) => RustLib
    .instance.api
    .crateApiStructureDesignerStructureDesignerApiGetImportXyzData(
        nodeId: nodeId);

APIExportXYZData? getExportXyzData({required BigInt nodeId}) => RustLib
    .instance.api
    .crateApiStructureDesignerStructureDesignerApiGetExportXyzData(
        nodeId: nodeId);

APISphereData? getSphereData({required BigInt nodeId}) => RustLib.instance.api
    .crateApiStructureDesignerStructureDesignerApiGetSphereData(nodeId: nodeId);

APIHalfSpaceData? getHalfSpaceData({required BigInt nodeId}) => RustLib
    .instance.api
    .crateApiStructureDesignerStructureDesignerApiGetHalfSpaceData(
        nodeId: nodeId);

APIGeoTransData? getGeoTransData({required BigInt nodeId}) =>
    RustLib.instance.api
        .crateApiStructureDesignerStructureDesignerApiGetGeoTransData(
            nodeId: nodeId);

APIGeoToAtomData? getGeoToAtomData({required BigInt nodeId}) => RustLib
    .instance.api
    .crateApiStructureDesignerStructureDesignerApiGetGeoToAtomData(
        nodeId: nodeId);

bool setGeoToAtomData(
        {required BigInt nodeId, required APIGeoToAtomData data}) =>
    RustLib.instance.api
        .crateApiStructureDesignerStructureDesignerApiSetGeoToAtomData(
            nodeId: nodeId, data: data);

APIAtomTransData? getAtomTransData({required BigInt nodeId}) => RustLib
    .instance.api
    .crateApiStructureDesignerStructureDesignerApiGetAtomTransData(
        nodeId: nodeId);

APIEditAtomData? getEditAtomData({required BigInt nodeId}) =>
    RustLib.instance.api
        .crateApiStructureDesignerStructureDesignerApiGetEditAtomData(
            nodeId: nodeId);

APIParameterData? getParameterData({required BigInt nodeId}) => RustLib
    .instance.api
    .crateApiStructureDesignerStructureDesignerApiGetParameterData(
        nodeId: nodeId);

APIExprData? getExprData({required BigInt nodeId}) => RustLib.instance.api
    .crateApiStructureDesignerStructureDesignerApiGetExprData(nodeId: nodeId);

APIMapData? getMapData({required BigInt nodeId}) => RustLib.instance.api
    .crateApiStructureDesignerStructureDesignerApiGetMapData(nodeId: nodeId);

void setIntData({required BigInt nodeId, required APIIntData data}) =>
    RustLib.instance.api
        .crateApiStructureDesignerStructureDesignerApiSetIntData(
            nodeId: nodeId, data: data);

void setStringData({required BigInt nodeId, required APIStringData data}) =>
    RustLib.instance.api
        .crateApiStructureDesignerStructureDesignerApiSetStringData(
            nodeId: nodeId, data: data);

void setBoolData({required BigInt nodeId, required APIBoolData data}) =>
    RustLib.instance.api
        .crateApiStructureDesignerStructureDesignerApiSetBoolData(
            nodeId: nodeId, data: data);

void setFloatData({required BigInt nodeId, required APIFloatData data}) =>
    RustLib.instance.api
        .crateApiStructureDesignerStructureDesignerApiSetFloatData(
            nodeId: nodeId, data: data);

void setVec2Data({required BigInt nodeId, required APIVec2Data data}) =>
    RustLib.instance.api
        .crateApiStructureDesignerStructureDesignerApiSetVec2Data(
            nodeId: nodeId, data: data);

void setVec3Data({required BigInt nodeId, required APIVec3Data data}) =>
    RustLib.instance.api
        .crateApiStructureDesignerStructureDesignerApiSetVec3Data(
            nodeId: nodeId, data: data);

void setIvec2Data({required BigInt nodeId, required APIIVec2Data data}) =>
    RustLib.instance.api
        .crateApiStructureDesignerStructureDesignerApiSetIvec2Data(
            nodeId: nodeId, data: data);

void setIvec3Data({required BigInt nodeId, required APIIVec3Data data}) =>
    RustLib.instance.api
        .crateApiStructureDesignerStructureDesignerApiSetIvec3Data(
            nodeId: nodeId, data: data);

void setRangeData({required BigInt nodeId, required APIRangeData data}) =>
    RustLib.instance.api
        .crateApiStructureDesignerStructureDesignerApiSetRangeData(
            nodeId: nodeId, data: data);

void setRectData({required BigInt nodeId, required APIRectData data}) =>
    RustLib.instance.api
        .crateApiStructureDesignerStructureDesignerApiSetRectData(
            nodeId: nodeId, data: data);

void setRegPolyData({required BigInt nodeId, required APIRegPolyData data}) =>
    RustLib.instance.api
        .crateApiStructureDesignerStructureDesignerApiSetRegPolyData(
            nodeId: nodeId, data: data);

void setCircleData({required BigInt nodeId, required APICircleData data}) =>
    RustLib.instance.api
        .crateApiStructureDesignerStructureDesignerApiSetCircleData(
            nodeId: nodeId, data: data);

void setHalfPlaneData(
        {required BigInt nodeId, required APIHalfPlaneData data}) =>
    RustLib.instance.api
        .crateApiStructureDesignerStructureDesignerApiSetHalfPlaneData(
            nodeId: nodeId, data: data);

void setExtrudeData({required BigInt nodeId, required APIExtrudeData data}) =>
    RustLib.instance.api
        .crateApiStructureDesignerStructureDesignerApiSetExtrudeData(
            nodeId: nodeId, data: data);

void setCuboidData({required BigInt nodeId, required APICuboidData data}) =>
    RustLib.instance.api
        .crateApiStructureDesignerStructureDesignerApiSetCuboidData(
            nodeId: nodeId, data: data);

void setSphereData({required BigInt nodeId, required APISphereData data}) =>
    RustLib.instance.api
        .crateApiStructureDesignerStructureDesignerApiSetSphereData(
            nodeId: nodeId, data: data);

void setHalfSpaceData(
        {required BigInt nodeId, required APIHalfSpaceData data}) =>
    RustLib.instance.api
        .crateApiStructureDesignerStructureDesignerApiSetHalfSpaceData(
            nodeId: nodeId, data: data);

void setGeoTransData({required BigInt nodeId, required APIGeoTransData data}) =>
    RustLib.instance.api
        .crateApiStructureDesignerStructureDesignerApiSetGeoTransData(
            nodeId: nodeId, data: data);

void setAtomTransData(
        {required BigInt nodeId, required APIAtomTransData data}) =>
    RustLib.instance.api
        .crateApiStructureDesignerStructureDesignerApiSetAtomTransData(
            nodeId: nodeId, data: data);

void setAtomCutData({required BigInt nodeId, required APIAtomCutData data}) =>
    RustLib.instance.api
        .crateApiStructureDesignerStructureDesignerApiSetAtomCutData(
            nodeId: nodeId, data: data);

void setImportXyzData(
        {required BigInt nodeId, required APIImportXYZData data}) =>
    RustLib.instance.api
        .crateApiStructureDesignerStructureDesignerApiSetImportXyzData(
            nodeId: nodeId, data: data);

void setExportXyzData(
        {required BigInt nodeId, required APIExportXYZData data}) =>
    RustLib.instance.api
        .crateApiStructureDesignerStructureDesignerApiSetExportXyzData(
            nodeId: nodeId, data: data);

void setParameterData(
        {required BigInt nodeId, required APIParameterData data}) =>
    RustLib.instance.api
        .crateApiStructureDesignerStructureDesignerApiSetParameterData(
            nodeId: nodeId, data: data);

void setMapData({required BigInt nodeId, required APIMapData data}) =>
    RustLib.instance.api
        .crateApiStructureDesignerStructureDesignerApiSetMapData(
            nodeId: nodeId, data: data);

APIResult setExprData({required BigInt nodeId, required APIExprData data}) =>
    RustLib.instance.api
        .crateApiStructureDesignerStructureDesignerApiSetExprData(
            nodeId: nodeId, data: data);

void deleteSelected() => RustLib.instance.api
    .crateApiStructureDesignerStructureDesignerApiDeleteSelected();

bool setReturnNodeId({BigInt? nodeId}) => RustLib.instance.api
    .crateApiStructureDesignerStructureDesignerApiSetReturnNodeId(
        nodeId: nodeId);

bool saveNodeNetworks({required String filePath}) => RustLib.instance.api
    .crateApiStructureDesignerStructureDesignerApiSaveNodeNetworks(
        filePath: filePath);

APIResult loadNodeNetworks({required String filePath}) => RustLib.instance.api
    .crateApiStructureDesignerStructureDesignerApiLoadNodeNetworks(
        filePath: filePath);

bool isNodeTypeActive({required String nodeType}) => RustLib.instance.api
    .crateApiStructureDesignerStructureDesignerApiIsNodeTypeActive(
        nodeType: nodeType);

String getApiDataTypeDisplayName({required APIDataType apiDataType}) =>
    RustLib.instance.api
        .crateApiStructureDesignerStructureDesignerApiGetApiDataTypeDisplayName(
            apiDataType: apiDataType);

StructureDesignerPreferences? getStructureDesignerPreferences() => RustLib
    .instance.api
    .crateApiStructureDesignerStructureDesignerApiGetStructureDesignerPreferences();

void setStructureDesignerPreferences(
        {required StructureDesignerPreferences preferences}) =>
    RustLib.instance.api
        .crateApiStructureDesignerStructureDesignerApiSetStructureDesignerPreferences(
            preferences: preferences);

APIResult exportVisibleAtomicStructuresAsXyz({required String filePath}) => RustLib
    .instance.api
    .crateApiStructureDesignerStructureDesignerApiExportVisibleAtomicStructuresAsXyz(
        filePath: filePath);
