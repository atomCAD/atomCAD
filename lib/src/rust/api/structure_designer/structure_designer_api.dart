// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.7.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import '../common_api_types.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'structure_designer_api_types.dart';

NodeNetworkView? getNodeNetworkView() => RustLib.instance.api
    .crateApiStructureDesignerStructureDesignerApiGetNodeNetworkView();

void moveNode({required BigInt nodeId, required APIVec2 position}) =>
    RustLib.instance.api.crateApiStructureDesignerStructureDesignerApiMoveNode(
        nodeId: nodeId, position: position);

BigInt addNode({required String nodeTypeName, required APIVec2 position}) =>
    RustLib.instance.api.crateApiStructureDesignerStructureDesignerApiAddNode(
        nodeTypeName: nodeTypeName, position: position);

void connectNodes(
        {required BigInt sourceNodeId,
        required BigInt destNodeId,
        required BigInt destParamIndex}) =>
    RustLib.instance.api
        .crateApiStructureDesignerStructureDesignerApiConnectNodes(
            sourceNodeId: sourceNodeId,
            destNodeId: destNodeId,
            destParamIndex: destParamIndex);

List<String>? getNodeTypeNames() => RustLib.instance.api
    .crateApiStructureDesignerStructureDesignerApiGetNodeTypeNames();

List<String>? getNodeNetworkNames() => RustLib.instance.api
    .crateApiStructureDesignerStructureDesignerApiGetNodeNetworkNames();

void addNewNodeNetwork() => RustLib.instance.api
    .crateApiStructureDesignerStructureDesignerApiAddNewNodeNetwork();

void setActiveNodeNetwork({required String nodeNetworkName}) => RustLib
    .instance.api
    .crateApiStructureDesignerStructureDesignerApiSetActiveNodeNetwork(
        nodeNetworkName: nodeNetworkName);

bool renameNodeNetwork({required String oldName, required String newName}) =>
    RustLib.instance.api
        .crateApiStructureDesignerStructureDesignerApiRenameNodeNetwork(
            oldName: oldName, newName: newName);

void setNodeDisplay({required BigInt nodeId, required bool isDisplayed}) =>
    RustLib.instance.api
        .crateApiStructureDesignerStructureDesignerApiSetNodeDisplay(
            nodeId: nodeId, isDisplayed: isDisplayed);

bool selectNode({required BigInt nodeId}) => RustLib.instance.api
    .crateApiStructureDesignerStructureDesignerApiSelectNode(nodeId: nodeId);

bool selectWire(
        {required BigInt sourceNodeId,
        required BigInt destinationNodeId,
        required BigInt destinationArgumentIndex}) =>
    RustLib.instance.api
        .crateApiStructureDesignerStructureDesignerApiSelectWire(
            sourceNodeId: sourceNodeId,
            destinationNodeId: destinationNodeId,
            destinationArgumentIndex: destinationArgumentIndex);

void clearSelection() => RustLib.instance.api
    .crateApiStructureDesignerStructureDesignerApiClearSelection();

APICuboidData? getCuboidData({required BigInt nodeId}) => RustLib.instance.api
    .crateApiStructureDesignerStructureDesignerApiGetCuboidData(nodeId: nodeId);

APIAnchorData? getAnchorData({required BigInt nodeId}) => RustLib.instance.api
    .crateApiStructureDesignerStructureDesignerApiGetAnchorData(nodeId: nodeId);

APISphereData? getSphereData({required BigInt nodeId}) => RustLib.instance.api
    .crateApiStructureDesignerStructureDesignerApiGetSphereData(nodeId: nodeId);

APIHalfSpaceData? getHalfSpaceData({required BigInt nodeId}) => RustLib
    .instance.api
    .crateApiStructureDesignerStructureDesignerApiGetHalfSpaceData(
        nodeId: nodeId);

APIGeoTransData? getGeoTransData({required BigInt nodeId}) =>
    RustLib.instance.api
        .crateApiStructureDesignerStructureDesignerApiGetGeoTransData(
            nodeId: nodeId);

APIGeoToAtomData? getGeoToAtomData({required BigInt nodeId}) => RustLib
    .instance.api
    .crateApiStructureDesignerStructureDesignerApiGetGeoToAtomData(
        nodeId: nodeId);

bool setGeoToAtomData(
        {required BigInt nodeId, required APIGeoToAtomData data}) =>
    RustLib.instance.api
        .crateApiStructureDesignerStructureDesignerApiSetGeoToAtomData(
            nodeId: nodeId, data: data);

APIAtomTransData? getAtomTransData({required BigInt nodeId}) => RustLib
    .instance.api
    .crateApiStructureDesignerStructureDesignerApiGetAtomTransData(
        nodeId: nodeId);

APIEditAtomData? getEditAtomData({required BigInt nodeId}) =>
    RustLib.instance.api
        .crateApiStructureDesignerStructureDesignerApiGetEditAtomData(
            nodeId: nodeId);

void setCuboidData({required BigInt nodeId, required APICuboidData data}) =>
    RustLib.instance.api
        .crateApiStructureDesignerStructureDesignerApiSetCuboidData(
            nodeId: nodeId, data: data);

void setSphereData({required BigInt nodeId, required APISphereData data}) =>
    RustLib.instance.api
        .crateApiStructureDesignerStructureDesignerApiSetSphereData(
            nodeId: nodeId, data: data);

void setHalfSpaceData(
        {required BigInt nodeId, required APIHalfSpaceData data}) =>
    RustLib.instance.api
        .crateApiStructureDesignerStructureDesignerApiSetHalfSpaceData(
            nodeId: nodeId, data: data);

void setGeoTransData({required BigInt nodeId, required APIGeoTransData data}) =>
    RustLib.instance.api
        .crateApiStructureDesignerStructureDesignerApiSetGeoTransData(
            nodeId: nodeId, data: data);

void setAtomTransData(
        {required BigInt nodeId, required APIAtomTransData data}) =>
    RustLib.instance.api
        .crateApiStructureDesignerStructureDesignerApiSetAtomTransData(
            nodeId: nodeId, data: data);

void deleteSelected() => RustLib.instance.api
    .crateApiStructureDesignerStructureDesignerApiDeleteSelected();

bool setReturnNodeId({BigInt? nodeId}) => RustLib.instance.api
    .crateApiStructureDesignerStructureDesignerApiSetReturnNodeId(
        nodeId: nodeId);

bool saveNodeNetworks({required String filePath}) => RustLib.instance.api
    .crateApiStructureDesignerStructureDesignerApiSaveNodeNetworks(
        filePath: filePath);

bool loadNodeNetworks({required String filePath}) => RustLib.instance.api
    .crateApiStructureDesignerStructureDesignerApiLoadNodeNetworks(
        filePath: filePath);

bool isNodeTypeActive({required String nodeType}) => RustLib.instance.api
    .crateApiStructureDesignerStructureDesignerApiIsNodeTypeActive(
        nodeType: nodeType);
