// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.10.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import '../common_api_types.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`, `clone`, `fmt`

class APIAnchorData {
  final APIIVec3? position;

  const APIAnchorData({
    this.position,
  });

  @override
  int get hashCode => position.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is APIAnchorData &&
          runtimeType == other.runtimeType &&
          position == other.position;
}

class APIAtomTransData {
  final APIVec3 translation;
  final APIVec3 rotation;

  const APIAtomTransData({
    required this.translation,
    required this.rotation,
  });

  @override
  int get hashCode => translation.hashCode ^ rotation.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is APIAtomTransData &&
          runtimeType == other.runtimeType &&
          translation == other.translation &&
          rotation == other.rotation;
}

class APICircleData {
  final APIIVec2 center;
  final int radius;

  const APICircleData({
    required this.center,
    required this.radius,
  });

  @override
  int get hashCode => center.hashCode ^ radius.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is APICircleData &&
          runtimeType == other.runtimeType &&
          center == other.center &&
          radius == other.radius;
}

class APICrystalTypeInfo {
  final int primaryAtomicNumber;
  final int secondaryAtomicNumber;
  final double unitCellSize;
  final String name;

  const APICrystalTypeInfo({
    required this.primaryAtomicNumber,
    required this.secondaryAtomicNumber,
    required this.unitCellSize,
    required this.name,
  });

  @override
  int get hashCode =>
      primaryAtomicNumber.hashCode ^
      secondaryAtomicNumber.hashCode ^
      unitCellSize.hashCode ^
      name.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is APICrystalTypeInfo &&
          runtimeType == other.runtimeType &&
          primaryAtomicNumber == other.primaryAtomicNumber &&
          secondaryAtomicNumber == other.secondaryAtomicNumber &&
          unitCellSize == other.unitCellSize &&
          name == other.name;
}

class APICuboidData {
  final APIIVec3 minCorner;
  final APIIVec3 extent;

  const APICuboidData({
    required this.minCorner,
    required this.extent,
  });

  @override
  int get hashCode => minCorner.hashCode ^ extent.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is APICuboidData &&
          runtimeType == other.runtimeType &&
          minCorner == other.minCorner &&
          extent == other.extent;
}

class APIEditAtomData {
  final APIEditAtomTool activeTool;
  final bool canUndo;
  final bool canRedo;
  final BigInt? bondToolLastAtomId;
  final int? replacementAtomicNumber;
  final int? addAtomToolAtomicNumber;
  final bool hasSelectedAtoms;
  final bool hasSelection;
  final APITransform? selectionTransform;

  const APIEditAtomData({
    required this.activeTool,
    required this.canUndo,
    required this.canRedo,
    this.bondToolLastAtomId,
    this.replacementAtomicNumber,
    this.addAtomToolAtomicNumber,
    required this.hasSelectedAtoms,
    required this.hasSelection,
    this.selectionTransform,
  });

  @override
  int get hashCode =>
      activeTool.hashCode ^
      canUndo.hashCode ^
      canRedo.hashCode ^
      bondToolLastAtomId.hashCode ^
      replacementAtomicNumber.hashCode ^
      addAtomToolAtomicNumber.hashCode ^
      hasSelectedAtoms.hashCode ^
      hasSelection.hashCode ^
      selectionTransform.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is APIEditAtomData &&
          runtimeType == other.runtimeType &&
          activeTool == other.activeTool &&
          canUndo == other.canUndo &&
          canRedo == other.canRedo &&
          bondToolLastAtomId == other.bondToolLastAtomId &&
          replacementAtomicNumber == other.replacementAtomicNumber &&
          addAtomToolAtomicNumber == other.addAtomToolAtomicNumber &&
          hasSelectedAtoms == other.hasSelectedAtoms &&
          hasSelection == other.hasSelection &&
          selectionTransform == other.selectionTransform;
}

enum APIEditAtomTool {
  default_,
  addAtom,
  addBond,
  ;
}

class APIExtrudeData {
  final int height;

  const APIExtrudeData({
    required this.height,
  });

  @override
  int get hashCode => height.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is APIExtrudeData &&
          runtimeType == other.runtimeType &&
          height == other.height;
}

class APIGeoToAtomData {
  final int primaryAtomicNumber;
  final int secondaryAtomicNumber;

  const APIGeoToAtomData({
    required this.primaryAtomicNumber,
    required this.secondaryAtomicNumber,
  });

  @override
  int get hashCode =>
      primaryAtomicNumber.hashCode ^ secondaryAtomicNumber.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is APIGeoToAtomData &&
          runtimeType == other.runtimeType &&
          primaryAtomicNumber == other.primaryAtomicNumber &&
          secondaryAtomicNumber == other.secondaryAtomicNumber;
}

class APIGeoTransData {
  final APIIVec3 translation;
  final APIIVec3 rotation;
  final bool transformOnlyFrame;

  const APIGeoTransData({
    required this.translation,
    required this.rotation,
    required this.transformOnlyFrame,
  });

  @override
  int get hashCode =>
      translation.hashCode ^ rotation.hashCode ^ transformOnlyFrame.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is APIGeoTransData &&
          runtimeType == other.runtimeType &&
          translation == other.translation &&
          rotation == other.rotation &&
          transformOnlyFrame == other.transformOnlyFrame;
}

class APIHalfPlaneData {
  final APIIVec2 point1;
  final APIIVec2 point2;

  const APIHalfPlaneData({
    required this.point1,
    required this.point2,
  });

  @override
  int get hashCode => point1.hashCode ^ point2.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is APIHalfPlaneData &&
          runtimeType == other.runtimeType &&
          point1 == other.point1 &&
          point2 == other.point2;
}

class APIHalfSpaceData {
  final APIIVec3 millerIndex;
  final APIIVec3 center;

  const APIHalfSpaceData({
    required this.millerIndex,
    required this.center,
  });

  @override
  int get hashCode => millerIndex.hashCode ^ center.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is APIHalfSpaceData &&
          runtimeType == other.runtimeType &&
          millerIndex == other.millerIndex &&
          center == other.center;
}

class APIPolygonData {
  final int numSides;
  final int radius;

  const APIPolygonData({
    required this.numSides,
    required this.radius,
  });

  @override
  int get hashCode => numSides.hashCode ^ radius.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is APIPolygonData &&
          runtimeType == other.runtimeType &&
          numSides == other.numSides &&
          radius == other.radius;
}

class APIRectData {
  final APIIVec2 minCorner;
  final APIIVec2 extent;

  const APIRectData({
    required this.minCorner,
    required this.extent,
  });

  @override
  int get hashCode => minCorner.hashCode ^ extent.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is APIRectData &&
          runtimeType == other.runtimeType &&
          minCorner == other.minCorner &&
          extent == other.extent;
}

class APISphereData {
  final APIIVec3 center;
  final int radius;

  const APISphereData({
    required this.center,
    required this.radius,
  });

  @override
  int get hashCode => center.hashCode ^ radius.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is APISphereData &&
          runtimeType == other.runtimeType &&
          center == other.center &&
          radius == other.radius;
}

class APIStampPlacement {
  final APIIVec3 position;
  final int rotation;

  const APIStampPlacement({
    required this.position,
    required this.rotation,
  });

  @override
  int get hashCode => position.hashCode ^ rotation.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is APIStampPlacement &&
          runtimeType == other.runtimeType &&
          position == other.position &&
          rotation == other.rotation;
}

class APIStampView {
  final APIStampPlacement? selectedStampPlacement;

  const APIStampView({
    this.selectedStampPlacement,
  });

  @override
  int get hashCode => selectedStampPlacement.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is APIStampView &&
          runtimeType == other.runtimeType &&
          selectedStampPlacement == other.selectedStampPlacement;
}

class InputPinView {
  final String name;
  final String dataType;
  final bool multi;

  const InputPinView({
    required this.name,
    required this.dataType,
    required this.multi,
  });

  @override
  int get hashCode => name.hashCode ^ dataType.hashCode ^ multi.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is InputPinView &&
          runtimeType == other.runtimeType &&
          name == other.name &&
          dataType == other.dataType &&
          multi == other.multi;
}

class NodeNetworkView {
  final String name;
  final Map<BigInt, NodeView> nodes;
  final List<WireView> wires;

  const NodeNetworkView({
    required this.name,
    required this.nodes,
    required this.wires,
  });

  @override
  int get hashCode => name.hashCode ^ nodes.hashCode ^ wires.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is NodeNetworkView &&
          runtimeType == other.runtimeType &&
          name == other.name &&
          nodes == other.nodes &&
          wires == other.wires;
}

class NodeView {
  final BigInt id;
  final String nodeTypeName;
  APIVec2 position;
  final List<InputPinView> inputPins;
  final String outputType;
  final bool selected;
  final bool displayed;
  final bool returnNode;
  final String? error;

  NodeView({
    required this.id,
    required this.nodeTypeName,
    required this.position,
    required this.inputPins,
    required this.outputType,
    required this.selected,
    required this.displayed,
    required this.returnNode,
    this.error,
  });

  @override
  int get hashCode =>
      id.hashCode ^
      nodeTypeName.hashCode ^
      position.hashCode ^
      inputPins.hashCode ^
      outputType.hashCode ^
      selected.hashCode ^
      displayed.hashCode ^
      returnNode.hashCode ^
      error.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is NodeView &&
          runtimeType == other.runtimeType &&
          id == other.id &&
          nodeTypeName == other.nodeTypeName &&
          position == other.position &&
          inputPins == other.inputPins &&
          outputType == other.outputType &&
          selected == other.selected &&
          displayed == other.displayed &&
          returnNode == other.returnNode &&
          error == other.error;
}

class WireView {
  final BigInt sourceNodeId;
  final BigInt destNodeId;
  final BigInt destParamIndex;
  final bool selected;

  const WireView({
    required this.sourceNodeId,
    required this.destNodeId,
    required this.destParamIndex,
    required this.selected,
  });

  @override
  int get hashCode =>
      sourceNodeId.hashCode ^
      destNodeId.hashCode ^
      destParamIndex.hashCode ^
      selected.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is WireView &&
          runtimeType == other.runtimeType &&
          sourceNodeId == other.sourceNodeId &&
          destNodeId == other.destNodeId &&
          destParamIndex == other.destParamIndex &&
          selected == other.selected;
}
