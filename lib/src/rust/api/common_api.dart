// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.7.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'common_api_types.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These functions are ignored because they are not marked as `pub`: `generate_mock_image`, `initialize_cad_instance_async`, `send_texture`
// These types are ignored because they are not used by any `pub` functions: `RGBA_FUNCTION`, `TEXTURE_RGBA_RENDERER_PLUGIN`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `deref`, `deref`, `initialize`, `initialize`

/// Set the viewport size for rendering
Future<void> setViewportSize({required int width, required int height}) =>
    RustLib.instance.api
        .crateApiCommonApiSetViewportSize(width: width, height: height);

void setActiveEditor({required Editor editor}) =>
    RustLib.instance.api.crateApiCommonApiSetActiveEditor(editor: editor);

double provideTexture({required int texturePtr}) => RustLib.instance.api
    .crateApiCommonApiProvideTexture(texturePtr: texturePtr);

APICamera? getCamera() => RustLib.instance.api.crateApiCommonApiGetCamera();

void moveCamera(
        {required APIVec3 eye, required APIVec3 target, required APIVec3 up}) =>
    RustLib.instance.api
        .crateApiCommonApiMoveCamera(eye: eye, target: target, up: up);

APIVec3 findPivotPoint({required APIVec3 rayStart, required APIVec3 rayDir}) =>
    RustLib.instance.api
        .crateApiCommonApiFindPivotPoint(rayStart: rayStart, rayDir: rayDir);

int? gadgetHitTest(
        {required APIVec3 rayOrigin, required APIVec3 rayDirection}) =>
    RustLib.instance.api.crateApiCommonApiGadgetHitTest(
        rayOrigin: rayOrigin, rayDirection: rayDirection);

void gadgetStartDrag(
        {required int handleIndex,
        required APIVec3 rayOrigin,
        required APIVec3 rayDirection}) =>
    RustLib.instance.api.crateApiCommonApiGadgetStartDrag(
        handleIndex: handleIndex,
        rayOrigin: rayOrigin,
        rayDirection: rayDirection);

void gadgetDrag(
        {required int handleIndex,
        required APIVec3 rayOrigin,
        required APIVec3 rayDirection}) =>
    RustLib.instance.api.crateApiCommonApiGadgetDrag(
        handleIndex: handleIndex,
        rayOrigin: rayOrigin,
        rayDirection: rayDirection);

void gadgetEndDrag() => RustLib.instance.api.crateApiCommonApiGadgetEndDrag();

bool syncGadgetData() => RustLib.instance.api.crateApiCommonApiSyncGadgetData();

APITransform getCameraTransform() =>
    RustLib.instance.api.crateApiCommonApiGetCameraTransform();

void setCameraTransform({required APITransform transform}) =>
    RustLib.instance.api
        .crateApiCommonApiSetCameraTransform(transform: transform);

String greet({required String name}) =>
    RustLib.instance.api.crateApiCommonApiGreet(name: name);
