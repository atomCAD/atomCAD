// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.7.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'common_api_types.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These functions are ignored because they are not marked as `pub`: `generate_mock_image`, `initialize_cad_instance_async`, `send_texture`
// These types are ignored because they are not used by any `pub` functions: `RGBA_FUNCTION`, `TEXTURE_RGBA_RENDERER_PLUGIN`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `deref`, `deref`, `initialize`, `initialize`

/// Set the viewport size for rendering
Future<void> setViewportSize({required int width, required int height}) =>
    RustLib.instance.api
        .crateApiCommonApiSetViewportSize(width: width, height: height);

void setActiveEditor({required Editor editor}) =>
    RustLib.instance.api.crateApiCommonApiSetActiveEditor(editor: editor);

double provideTexture({required int texturePtr}) => RustLib.instance.api
    .crateApiCommonApiProvideTexture(texturePtr: texturePtr);

APICamera? getCamera() => RustLib.instance.api.crateApiCommonApiGetCamera();

void moveCamera(
        {required APIVec3 eye, required APIVec3 target, required APIVec3 up}) =>
    RustLib.instance.api
        .crateApiCommonApiMoveCamera(eye: eye, target: target, up: up);

APIVec3 findPivotPoint({required APIVec3 rayStart, required APIVec3 rayDir}) =>
    RustLib.instance.api
        .crateApiCommonApiFindPivotPoint(rayStart: rayStart, rayDir: rayDir);

int? gadgetHitTest(
        {required APIVec3 rayOrigin, required APIVec3 rayDirection}) =>
    RustLib.instance.api.crateApiCommonApiGadgetHitTest(
        rayOrigin: rayOrigin, rayDirection: rayDirection);

void gadgetStartDrag(
        {required int handleIndex,
        required APIVec3 rayOrigin,
        required APIVec3 rayDirection}) =>
    RustLib.instance.api.crateApiCommonApiGadgetStartDrag(
        handleIndex: handleIndex,
        rayOrigin: rayOrigin,
        rayDirection: rayDirection);

void gadgetDrag(
        {required int handleIndex,
        required APIVec3 rayOrigin,
        required APIVec3 rayDirection}) =>
    RustLib.instance.api.crateApiCommonApiGadgetDrag(
        handleIndex: handleIndex,
        rayOrigin: rayOrigin,
        rayDirection: rayDirection);

void gadgetEndDrag() => RustLib.instance.api.crateApiCommonApiGadgetEndDrag();

bool syncGadgetData() => RustLib.instance.api.crateApiCommonApiSyncGadgetData();

APITransform getCameraTransform() =>
    RustLib.instance.api.crateApiCommonApiGetCameraTransform();

/// Adjusts the camera target based on a raycast into the scene
///
/// This function performs the following steps:
/// 1. Traces a ray into the scene based on the active editor
/// 2. If the ray hits something, calculates the camera target depth
/// 3. Adjusts the camera target point while maintaining its direction from the eye
///
/// # Arguments
///
/// * `ray_origin` - The origin point of the ray in world space
/// * `ray_direction` - The direction vector of the ray (does not need to be normalized)
///
/// # Returns
///
/// `true` if the camera target was adjusted, `false` otherwise
Future<bool> adjustCameraTarget(
        {required APIVec3 rayOrigin, required APIVec3 rayDirection}) =>
    RustLib.instance.api.crateApiCommonApiAdjustCameraTarget(
        rayOrigin: rayOrigin, rayDirection: rayDirection);

void setCameraTransform({required APITransform transform}) =>
    RustLib.instance.api
        .crateApiCommonApiSetCameraTransform(transform: transform);

/// Set the camera to use orthographic or perspective projection
void setOrthographicMode({required bool orthographic}) => RustLib.instance.api
    .crateApiCommonApiSetOrthographicMode(orthographic: orthographic);

/// Get whether the camera is using orthographic projection
bool isOrthographic() => RustLib.instance.api.crateApiCommonApiIsOrthographic();

/// Set the orthographic half height (controls zoom level in orthographic mode)
void setOrthoHalfHeight({required double halfHeight}) => RustLib.instance.api
    .crateApiCommonApiSetOrthoHalfHeight(halfHeight: halfHeight);

/// Get the current orthographic half height
double getOrthoHalfHeight() =>
    RustLib.instance.api.crateApiCommonApiGetOrthoHalfHeight();

String greet({required String name}) =>
    RustLib.instance.api.crateApiCommonApiGreet(name: name);

/// Returns a list of all chemical elements with their atomic numbers and names,
/// ordered by atomic number
List<ElementSummary> getAllElements() =>
    RustLib.instance.api.crateApiCommonApiGetAllElements();
