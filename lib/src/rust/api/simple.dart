// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.7.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These functions are ignored because they are not marked as `pub`: `add_sample_model`, `from_api_vec3`, `generate_mock_image`, `initialize_cad_instance_async`, `send_texture`, `to_api_vec3`
// These types are ignored because they are not used by any `pub` functions: `CADInstance`, `RGBA_FUNCTION`, `TEXTURE_RGBA_RENDERER_PLUGIN`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `deref`, `deref`, `initialize`, `initialize`

double provideTexture({required int texturePtr}) =>
    RustLib.instance.api.crateApiSimpleProvideTexture(texturePtr: texturePtr);

APICamera? getCamera() => RustLib.instance.api.crateApiSimpleGetCamera();

void moveCamera(
        {required APIVec3 eye, required APIVec3 target, required APIVec3 up}) =>
    RustLib.instance.api
        .crateApiSimpleMoveCamera(eye: eye, target: target, up: up);

void addAtom({required int atomicNumber, required APIVec3 position}) =>
    RustLib.instance.api
        .crateApiSimpleAddAtom(atomicNumber: atomicNumber, position: position);

APIVec3 findPivotPoint({required APIVec3 rayStart, required APIVec3 rayDir}) =>
    RustLib.instance.api
        .crateApiSimpleFindPivotPoint(rayStart: rayStart, rayDir: rayDir);

String greet({required String name}) =>
    RustLib.instance.api.crateApiSimpleGreet(name: name);

class APICamera {
  final APIVec3 eye;
  final APIVec3 target;
  final APIVec3 up;
  final double aspect;
  final double fovy;
  final double znear;
  final double zfar;

  const APICamera({
    required this.eye,
    required this.target,
    required this.up,
    required this.aspect,
    required this.fovy,
    required this.znear,
    required this.zfar,
  });

  @override
  int get hashCode =>
      eye.hashCode ^
      target.hashCode ^
      up.hashCode ^
      aspect.hashCode ^
      fovy.hashCode ^
      znear.hashCode ^
      zfar.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is APICamera &&
          runtimeType == other.runtimeType &&
          eye == other.eye &&
          target == other.target &&
          up == other.up &&
          aspect == other.aspect &&
          fovy == other.fovy &&
          znear == other.znear &&
          zfar == other.zfar;
}

class APIVec3 {
  final double x;
  final double y;
  final double z;

  const APIVec3({
    required this.x,
    required this.y,
    required this.z,
  });

  @override
  int get hashCode => x.hashCode ^ y.hashCode ^ z.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is APIVec3 &&
          runtimeType == other.runtimeType &&
          x == other.x &&
          y == other.y &&
          z == other.z;
}
