// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.7.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `assert_receiver_is_total_eq`, `clone`, `clone`, `eq`, `fmt`, `fmt`

class APICamera {
  final APIVec3 eye;
  final APIVec3 target;
  final APIVec3 up;
  final double aspect;
  final double fovy;
  final double znear;
  final double zfar;
  final bool orthographic;
  final double orthoHalfHeight;

  const APICamera({
    required this.eye,
    required this.target,
    required this.up,
    required this.aspect,
    required this.fovy,
    required this.znear,
    required this.zfar,
    required this.orthographic,
    required this.orthoHalfHeight,
  });

  @override
  int get hashCode =>
      eye.hashCode ^
      target.hashCode ^
      up.hashCode ^
      aspect.hashCode ^
      fovy.hashCode ^
      znear.hashCode ^
      zfar.hashCode ^
      orthographic.hashCode ^
      orthoHalfHeight.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is APICamera &&
          runtimeType == other.runtimeType &&
          eye == other.eye &&
          target == other.target &&
          up == other.up &&
          aspect == other.aspect &&
          fovy == other.fovy &&
          znear == other.znear &&
          zfar == other.zfar &&
          orthographic == other.orthographic &&
          orthoHalfHeight == other.orthoHalfHeight;
}

class APITransform {
  final APIVec3 translation;
  final APIVec3 rotation;

  const APITransform({
    required this.translation,
    required this.rotation,
  });

  @override
  int get hashCode => translation.hashCode ^ rotation.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is APITransform &&
          runtimeType == other.runtimeType &&
          translation == other.translation &&
          rotation == other.rotation;
}

class APIVec2 {
  final double x;
  final double y;

  const APIVec2({
    required this.x,
    required this.y,
  });

  @override
  int get hashCode => x.hashCode ^ y.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is APIVec2 &&
          runtimeType == other.runtimeType &&
          x == other.x &&
          y == other.y;
}

class APIVec3 {
  final double x;
  final double y;
  final double z;

  const APIVec3({
    required this.x,
    required this.y,
    required this.z,
  });

  @override
  int get hashCode => x.hashCode ^ y.hashCode ^ z.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is APIVec3 &&
          runtimeType == other.runtimeType &&
          x == other.x &&
          y == other.y &&
          z == other.z;
}

class APIIVec2 {
  final int x;
  final int y;

  const APIIVec2({
    required this.x,
    required this.y,
  });

  @override
  int get hashCode => x.hashCode ^ y.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is APIIVec2 &&
          runtimeType == other.runtimeType &&
          x == other.x &&
          y == other.y;
}

class APIIVec3 {
  final int x;
  final int y;
  final int z;

  const APIIVec3({
    required this.x,
    required this.y,
    required this.z,
  });

  @override
  int get hashCode => x.hashCode ^ y.hashCode ^ z.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is APIIVec3 &&
          runtimeType == other.runtimeType &&
          x == other.x &&
          y == other.y &&
          z == other.z;
}

enum Editor {
  none,
  structureDesigner,
  sceneComposer,
  ;
}

class ElementSummary {
  final int atomicNumber;
  final String elementName;

  const ElementSummary({
    required this.atomicNumber,
    required this.elementName,
  });

  @override
  int get hashCode => atomicNumber.hashCode ^ elementName.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is ElementSummary &&
          runtimeType == other.runtimeType &&
          atomicNumber == other.atomicNumber &&
          elementName == other.elementName;
}

enum SelectModifier {
  replace,
  toggle,
  expand,
  ;
}
