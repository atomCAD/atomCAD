// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.7.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/common_api.dart';
import 'api/common_api_types.dart';
import 'api/scene_composer_api.dart';
import 'api/scene_composer_api_types.dart';
import 'api/structure_designer_api.dart';
import 'api/structure_designer_api_types.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required RustLibApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiCommonApiInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.7.0';

  @override
  int get rustContentHash => 1367472127;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'rust_lib_flutter_cad',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  void crateApiStructureDesignerApiAddAtomByRay(
      {required int atomicNumber,
      required APIVec3 planeNormal,
      required APIVec3 rayStart,
      required APIVec3 rayDir});

  void crateApiStructureDesignerApiAddNewNodeNetwork();

  BigInt crateApiStructureDesignerApiAddNode(
      {required String nodeTypeName, required APIVec2 position});

  void crateApiStructureDesignerApiClearSelection();

  void crateApiStructureDesignerApiConnectNodes(
      {required BigInt sourceNodeId,
      required BigInt destNodeId,
      required BigInt destParamIndex});

  void crateApiStructureDesignerApiDeleteSelected();

  void crateApiStructureDesignerApiDeleteSelectedAtomsAndBonds();

  void crateApiStructureDesignerApiDrawBondByRay(
      {required APIVec3 rayStart, required APIVec3 rayDir});

  void crateApiStructureDesignerApiEditAtomRedo();

  void crateApiStructureDesignerApiEditAtomUndo();

  bool crateApiSceneComposerApiExportXyz({required String filePath});

  APIVec3 crateApiCommonApiFindPivotPoint(
      {required APIVec3 rayStart, required APIVec3 rayDir});

  void crateApiCommonApiGadgetDrag(
      {required int handleIndex,
      required APIVec3 rayOrigin,
      required APIVec3 rayDirection});

  void crateApiCommonApiGadgetEndDrag();

  int? crateApiCommonApiGadgetHitTest(
      {required APIVec3 rayOrigin, required APIVec3 rayDirection});

  void crateApiCommonApiGadgetStartDrag(
      {required int handleIndex,
      required APIVec3 rayOrigin,
      required APIVec3 rayDirection});

  APIEditAtomTool? crateApiStructureDesignerApiGetActiveEditAtomTool();

  String crateApiSceneComposerApiGetAlignToolStateText();

  List<ElementSummary> crateApiCommonApiGetAllElements();

  APIAtomTransData? crateApiStructureDesignerApiGetAtomTransData(
      {required BigInt nodeId});

  APICamera? crateApiCommonApiGetCamera();

  APITransform crateApiCommonApiGetCameraTransform();

  APICuboidData? crateApiStructureDesignerApiGetCuboidData(
      {required BigInt nodeId});

  String crateApiSceneComposerApiGetDistanceToolStateText();

  APIEditAtomData? crateApiStructureDesignerApiGetEditAtomData(
      {required BigInt nodeId});

  APIGeoTransData? crateApiStructureDesignerApiGetGeoTransData(
      {required BigInt nodeId});

  APIHalfSpaceData? crateApiStructureDesignerApiGetHalfSpaceData(
      {required BigInt nodeId});

  List<String>? crateApiStructureDesignerApiGetNodeNetworkNames();

  NodeNetworkView? crateApiStructureDesignerApiGetNodeNetworkView();

  List<String>? crateApiStructureDesignerApiGetNodeTypeNames();

  AtomView? crateApiSceneComposerApiGetSceneComposerAtomInfo();

  SceneComposerView? crateApiSceneComposerApiGetSceneComposerView();

  APITransform? crateApiSceneComposerApiGetSelectedFrameTransform();

  APISphereData? crateApiStructureDesignerApiGetSphereData(
      {required BigInt nodeId});

  String crateApiCommonApiGreet({required String name});

  void crateApiSceneComposerApiImportXyz({required String filePath});

  Future<void> crateApiCommonApiInitApp();

  bool crateApiStructureDesignerApiIsEditAtomActive();

  bool crateApiSceneComposerApiIsFrameLockedToAtoms();

  bool crateApiStructureDesignerApiLoadNodeNetworks({required String filePath});

  void crateApiCommonApiMoveCamera(
      {required APIVec3 eye, required APIVec3 target, required APIVec3 up});

  void crateApiStructureDesignerApiMoveNode(
      {required BigInt nodeId, required APIVec2 position});

  double crateApiCommonApiProvideTexture({required int texturePtr});

  bool crateApiStructureDesignerApiRenameNodeNetwork(
      {required String oldName, required String newName});

  void crateApiStructureDesignerApiReplaceSelectedAtoms(
      {required int atomicNumber});

  void crateApiSceneComposerApiRotateAroundLocalAxis(
      {required int axisIndex, required double angleDegrees});

  bool crateApiStructureDesignerApiSaveNodeNetworks({required String filePath});

  void crateApiSceneComposerApiSceneComposerNewModel();

  bool crateApiSceneComposerApiSceneComposerRedo();

  void crateApiSceneComposerApiSceneComposerRenameCluster(
      {required BigInt clusterId, required String newName});

  bool crateApiSceneComposerApiSceneComposerUndo();

  BigInt? crateApiSceneComposerApiSelectAlignAtomByRay(
      {required APIVec3 rayStart, required APIVec3 rayDir});

  BigInt? crateApiSceneComposerApiSelectAtomInfoAtomByRay(
      {required APIVec3 rayStart, required APIVec3 rayDir});

  bool crateApiStructureDesignerApiSelectAtomOrBondByRay(
      {required APIVec3 rayStart,
      required APIVec3 rayDir,
      required SelectModifier selectModifier});

  void crateApiSceneComposerApiSelectClusterById(
      {required BigInt clusterId, required SelectModifier selectModifier});

  BigInt? crateApiSceneComposerApiSelectClusterByRay(
      {required APIVec3 rayStart,
      required APIVec3 rayDir,
      required SelectModifier selectModifier});

  BigInt? crateApiSceneComposerApiSelectDistanceAtomByRay(
      {required APIVec3 rayStart, required APIVec3 rayDir});

  bool crateApiStructureDesignerApiSelectNode({required BigInt nodeId});

  bool crateApiStructureDesignerApiSelectWire(
      {required BigInt sourceNodeId,
      required BigInt destinationNodeId,
      required BigInt destinationArgumentIndex});

  bool crateApiStructureDesignerApiSetActiveEditAtomTool(
      {required APIEditAtomTool tool});

  void crateApiCommonApiSetActiveEditor({required Editor editor});

  void crateApiStructureDesignerApiSetActiveNodeNetwork(
      {required String nodeNetworkName});

  void crateApiSceneComposerApiSetActiveSceneComposerTool(
      {required APISceneComposerTool tool});

  void crateApiStructureDesignerApiSetAtomTransData(
      {required BigInt nodeId, required APIAtomTransData data});

  void crateApiCommonApiSetCameraTransform({required APITransform transform});

  void crateApiStructureDesignerApiSetCuboidData(
      {required BigInt nodeId, required APICuboidData data});

  bool crateApiStructureDesignerApiSetEditAtomAddAtomData(
      {required int atomicNumber});

  bool crateApiStructureDesignerApiSetEditAtomDefaultData(
      {required int replacementAtomicNumber});

  void crateApiSceneComposerApiSetFrameLockedToAtoms({required bool locked});

  void crateApiStructureDesignerApiSetGeoTransData(
      {required BigInt nodeId, required APIGeoTransData data});

  void crateApiStructureDesignerApiSetHalfSpaceData(
      {required BigInt nodeId, required APIHalfSpaceData data});

  void crateApiStructureDesignerApiSetNodeDisplay(
      {required BigInt nodeId, required bool isDisplayed});

  bool crateApiStructureDesignerApiSetReturnNodeId({BigInt? nodeId});

  void crateApiSceneComposerApiSetSelectedFrameTransform(
      {required APITransform transform});

  void crateApiStructureDesignerApiSetSphereData(
      {required BigInt nodeId, required APISphereData data});

  Future<void> crateApiCommonApiSetViewportSize(
      {required int width, required int height});

  bool crateApiCommonApiSyncGadgetData();

  void crateApiStructureDesignerApiTransformSelected(
      {required APITransform absTransform});

  void crateApiSceneComposerApiTranslateAlongLocalAxis(
      {required int axisIndex, required double translation});
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  void crateApiStructureDesignerApiAddAtomByRay(
      {required int atomicNumber,
      required APIVec3 planeNormal,
      required APIVec3 rayStart,
      required APIVec3 rayDir}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(atomicNumber, serializer);
        sse_encode_box_autoadd_api_vec_3(planeNormal, serializer);
        sse_encode_box_autoadd_api_vec_3(rayStart, serializer);
        sse_encode_box_autoadd_api_vec_3(rayDir, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiStructureDesignerApiAddAtomByRayConstMeta,
      argValues: [atomicNumber, planeNormal, rayStart, rayDir],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiStructureDesignerApiAddAtomByRayConstMeta =>
      const TaskConstMeta(
        debugName: "add_atom_by_ray",
        argNames: ["atomicNumber", "planeNormal", "rayStart", "rayDir"],
      );

  @override
  void crateApiStructureDesignerApiAddNewNodeNetwork() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 2)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiStructureDesignerApiAddNewNodeNetworkConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiStructureDesignerApiAddNewNodeNetworkConstMeta =>
      const TaskConstMeta(
        debugName: "add_new_node_network",
        argNames: [],
      );

  @override
  BigInt crateApiStructureDesignerApiAddNode(
      {required String nodeTypeName, required APIVec2 position}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(nodeTypeName, serializer);
        sse_encode_box_autoadd_api_vec_2(position, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 3)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_64,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiStructureDesignerApiAddNodeConstMeta,
      argValues: [nodeTypeName, position],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiStructureDesignerApiAddNodeConstMeta =>
      const TaskConstMeta(
        debugName: "add_node",
        argNames: ["nodeTypeName", "position"],
      );

  @override
  void crateApiStructureDesignerApiClearSelection() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 4)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiStructureDesignerApiClearSelectionConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiStructureDesignerApiClearSelectionConstMeta =>
      const TaskConstMeta(
        debugName: "clear_selection",
        argNames: [],
      );

  @override
  void crateApiStructureDesignerApiConnectNodes(
      {required BigInt sourceNodeId,
      required BigInt destNodeId,
      required BigInt destParamIndex}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_64(sourceNodeId, serializer);
        sse_encode_u_64(destNodeId, serializer);
        sse_encode_usize(destParamIndex, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 5)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiStructureDesignerApiConnectNodesConstMeta,
      argValues: [sourceNodeId, destNodeId, destParamIndex],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiStructureDesignerApiConnectNodesConstMeta =>
      const TaskConstMeta(
        debugName: "connect_nodes",
        argNames: ["sourceNodeId", "destNodeId", "destParamIndex"],
      );

  @override
  void crateApiStructureDesignerApiDeleteSelected() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 6)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiStructureDesignerApiDeleteSelectedConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiStructureDesignerApiDeleteSelectedConstMeta =>
      const TaskConstMeta(
        debugName: "delete_selected",
        argNames: [],
      );

  @override
  void crateApiStructureDesignerApiDeleteSelectedAtomsAndBonds() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 7)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiStructureDesignerApiDeleteSelectedAtomsAndBondsConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiStructureDesignerApiDeleteSelectedAtomsAndBondsConstMeta =>
          const TaskConstMeta(
            debugName: "delete_selected_atoms_and_bonds",
            argNames: [],
          );

  @override
  void crateApiStructureDesignerApiDrawBondByRay(
      {required APIVec3 rayStart, required APIVec3 rayDir}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_api_vec_3(rayStart, serializer);
        sse_encode_box_autoadd_api_vec_3(rayDir, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 8)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiStructureDesignerApiDrawBondByRayConstMeta,
      argValues: [rayStart, rayDir],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiStructureDesignerApiDrawBondByRayConstMeta =>
      const TaskConstMeta(
        debugName: "draw_bond_by_ray",
        argNames: ["rayStart", "rayDir"],
      );

  @override
  void crateApiStructureDesignerApiEditAtomRedo() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 9)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiStructureDesignerApiEditAtomRedoConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiStructureDesignerApiEditAtomRedoConstMeta =>
      const TaskConstMeta(
        debugName: "edit_atom_redo",
        argNames: [],
      );

  @override
  void crateApiStructureDesignerApiEditAtomUndo() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 10)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiStructureDesignerApiEditAtomUndoConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiStructureDesignerApiEditAtomUndoConstMeta =>
      const TaskConstMeta(
        debugName: "edit_atom_undo",
        argNames: [],
      );

  @override
  bool crateApiSceneComposerApiExportXyz({required String filePath}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(filePath, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 11)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSceneComposerApiExportXyzConstMeta,
      argValues: [filePath],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSceneComposerApiExportXyzConstMeta =>
      const TaskConstMeta(
        debugName: "export_xyz",
        argNames: ["filePath"],
      );

  @override
  APIVec3 crateApiCommonApiFindPivotPoint(
      {required APIVec3 rayStart, required APIVec3 rayDir}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_api_vec_3(rayStart, serializer);
        sse_encode_box_autoadd_api_vec_3(rayDir, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 12)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_api_vec_3,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiCommonApiFindPivotPointConstMeta,
      argValues: [rayStart, rayDir],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiCommonApiFindPivotPointConstMeta =>
      const TaskConstMeta(
        debugName: "find_pivot_point",
        argNames: ["rayStart", "rayDir"],
      );

  @override
  void crateApiCommonApiGadgetDrag(
      {required int handleIndex,
      required APIVec3 rayOrigin,
      required APIVec3 rayDirection}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(handleIndex, serializer);
        sse_encode_box_autoadd_api_vec_3(rayOrigin, serializer);
        sse_encode_box_autoadd_api_vec_3(rayDirection, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 13)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiCommonApiGadgetDragConstMeta,
      argValues: [handleIndex, rayOrigin, rayDirection],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiCommonApiGadgetDragConstMeta =>
      const TaskConstMeta(
        debugName: "gadget_drag",
        argNames: ["handleIndex", "rayOrigin", "rayDirection"],
      );

  @override
  void crateApiCommonApiGadgetEndDrag() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 14)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiCommonApiGadgetEndDragConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiCommonApiGadgetEndDragConstMeta =>
      const TaskConstMeta(
        debugName: "gadget_end_drag",
        argNames: [],
      );

  @override
  int? crateApiCommonApiGadgetHitTest(
      {required APIVec3 rayOrigin, required APIVec3 rayDirection}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_api_vec_3(rayOrigin, serializer);
        sse_encode_box_autoadd_api_vec_3(rayDirection, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 15)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_i_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiCommonApiGadgetHitTestConstMeta,
      argValues: [rayOrigin, rayDirection],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiCommonApiGadgetHitTestConstMeta =>
      const TaskConstMeta(
        debugName: "gadget_hit_test",
        argNames: ["rayOrigin", "rayDirection"],
      );

  @override
  void crateApiCommonApiGadgetStartDrag(
      {required int handleIndex,
      required APIVec3 rayOrigin,
      required APIVec3 rayDirection}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(handleIndex, serializer);
        sse_encode_box_autoadd_api_vec_3(rayOrigin, serializer);
        sse_encode_box_autoadd_api_vec_3(rayDirection, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 16)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiCommonApiGadgetStartDragConstMeta,
      argValues: [handleIndex, rayOrigin, rayDirection],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiCommonApiGadgetStartDragConstMeta =>
      const TaskConstMeta(
        debugName: "gadget_start_drag",
        argNames: ["handleIndex", "rayOrigin", "rayDirection"],
      );

  @override
  APIEditAtomTool? crateApiStructureDesignerApiGetActiveEditAtomTool() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 17)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_api_edit_atom_tool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiStructureDesignerApiGetActiveEditAtomToolConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiStructureDesignerApiGetActiveEditAtomToolConstMeta =>
          const TaskConstMeta(
            debugName: "get_active_edit_atom_tool",
            argNames: [],
          );

  @override
  String crateApiSceneComposerApiGetAlignToolStateText() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 18)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSceneComposerApiGetAlignToolStateTextConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSceneComposerApiGetAlignToolStateTextConstMeta =>
      const TaskConstMeta(
        debugName: "get_align_tool_state_text",
        argNames: [],
      );

  @override
  List<ElementSummary> crateApiCommonApiGetAllElements() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 19)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_element_summary,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiCommonApiGetAllElementsConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiCommonApiGetAllElementsConstMeta =>
      const TaskConstMeta(
        debugName: "get_all_elements",
        argNames: [],
      );

  @override
  APIAtomTransData? crateApiStructureDesignerApiGetAtomTransData(
      {required BigInt nodeId}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_64(nodeId, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 20)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_api_atom_trans_data,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiStructureDesignerApiGetAtomTransDataConstMeta,
      argValues: [nodeId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiStructureDesignerApiGetAtomTransDataConstMeta =>
      const TaskConstMeta(
        debugName: "get_atom_trans_data",
        argNames: ["nodeId"],
      );

  @override
  APICamera? crateApiCommonApiGetCamera() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 21)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_api_camera,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiCommonApiGetCameraConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiCommonApiGetCameraConstMeta => const TaskConstMeta(
        debugName: "get_camera",
        argNames: [],
      );

  @override
  APITransform crateApiCommonApiGetCameraTransform() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 22)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_api_transform,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiCommonApiGetCameraTransformConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiCommonApiGetCameraTransformConstMeta =>
      const TaskConstMeta(
        debugName: "get_camera_transform",
        argNames: [],
      );

  @override
  APICuboidData? crateApiStructureDesignerApiGetCuboidData(
      {required BigInt nodeId}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_64(nodeId, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 23)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_api_cuboid_data,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiStructureDesignerApiGetCuboidDataConstMeta,
      argValues: [nodeId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiStructureDesignerApiGetCuboidDataConstMeta =>
      const TaskConstMeta(
        debugName: "get_cuboid_data",
        argNames: ["nodeId"],
      );

  @override
  String crateApiSceneComposerApiGetDistanceToolStateText() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 24)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSceneComposerApiGetDistanceToolStateTextConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiSceneComposerApiGetDistanceToolStateTextConstMeta =>
          const TaskConstMeta(
            debugName: "get_distance_tool_state_text",
            argNames: [],
          );

  @override
  APIEditAtomData? crateApiStructureDesignerApiGetEditAtomData(
      {required BigInt nodeId}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_64(nodeId, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 25)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_api_edit_atom_data,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiStructureDesignerApiGetEditAtomDataConstMeta,
      argValues: [nodeId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiStructureDesignerApiGetEditAtomDataConstMeta =>
      const TaskConstMeta(
        debugName: "get_edit_atom_data",
        argNames: ["nodeId"],
      );

  @override
  APIGeoTransData? crateApiStructureDesignerApiGetGeoTransData(
      {required BigInt nodeId}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_64(nodeId, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 26)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_api_geo_trans_data,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiStructureDesignerApiGetGeoTransDataConstMeta,
      argValues: [nodeId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiStructureDesignerApiGetGeoTransDataConstMeta =>
      const TaskConstMeta(
        debugName: "get_geo_trans_data",
        argNames: ["nodeId"],
      );

  @override
  APIHalfSpaceData? crateApiStructureDesignerApiGetHalfSpaceData(
      {required BigInt nodeId}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_64(nodeId, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 27)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_api_half_space_data,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiStructureDesignerApiGetHalfSpaceDataConstMeta,
      argValues: [nodeId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiStructureDesignerApiGetHalfSpaceDataConstMeta =>
      const TaskConstMeta(
        debugName: "get_half_space_data",
        argNames: ["nodeId"],
      );

  @override
  List<String>? crateApiStructureDesignerApiGetNodeNetworkNames() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 28)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_list_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiStructureDesignerApiGetNodeNetworkNamesConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiStructureDesignerApiGetNodeNetworkNamesConstMeta =>
      const TaskConstMeta(
        debugName: "get_node_network_names",
        argNames: [],
      );

  @override
  NodeNetworkView? crateApiStructureDesignerApiGetNodeNetworkView() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 29)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_node_network_view,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiStructureDesignerApiGetNodeNetworkViewConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiStructureDesignerApiGetNodeNetworkViewConstMeta =>
      const TaskConstMeta(
        debugName: "get_node_network_view",
        argNames: [],
      );

  @override
  List<String>? crateApiStructureDesignerApiGetNodeTypeNames() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 30)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_list_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiStructureDesignerApiGetNodeTypeNamesConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiStructureDesignerApiGetNodeTypeNamesConstMeta =>
      const TaskConstMeta(
        debugName: "get_node_type_names",
        argNames: [],
      );

  @override
  AtomView? crateApiSceneComposerApiGetSceneComposerAtomInfo() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 31)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_atom_view,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSceneComposerApiGetSceneComposerAtomInfoConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiSceneComposerApiGetSceneComposerAtomInfoConstMeta =>
          const TaskConstMeta(
            debugName: "get_scene_composer_atom_info",
            argNames: [],
          );

  @override
  SceneComposerView? crateApiSceneComposerApiGetSceneComposerView() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 32)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_scene_composer_view,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSceneComposerApiGetSceneComposerViewConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSceneComposerApiGetSceneComposerViewConstMeta =>
      const TaskConstMeta(
        debugName: "get_scene_composer_view",
        argNames: [],
      );

  @override
  APITransform? crateApiSceneComposerApiGetSelectedFrameTransform() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 33)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_api_transform,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSceneComposerApiGetSelectedFrameTransformConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiSceneComposerApiGetSelectedFrameTransformConstMeta =>
          const TaskConstMeta(
            debugName: "get_selected_frame_transform",
            argNames: [],
          );

  @override
  APISphereData? crateApiStructureDesignerApiGetSphereData(
      {required BigInt nodeId}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_64(nodeId, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 34)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_api_sphere_data,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiStructureDesignerApiGetSphereDataConstMeta,
      argValues: [nodeId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiStructureDesignerApiGetSphereDataConstMeta =>
      const TaskConstMeta(
        debugName: "get_sphere_data",
        argNames: ["nodeId"],
      );

  @override
  String crateApiCommonApiGreet({required String name}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(name, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 35)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiCommonApiGreetConstMeta,
      argValues: [name],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiCommonApiGreetConstMeta => const TaskConstMeta(
        debugName: "greet",
        argNames: ["name"],
      );

  @override
  void crateApiSceneComposerApiImportXyz({required String filePath}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(filePath, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 36)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSceneComposerApiImportXyzConstMeta,
      argValues: [filePath],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSceneComposerApiImportXyzConstMeta =>
      const TaskConstMeta(
        debugName: "import_xyz",
        argNames: ["filePath"],
      );

  @override
  Future<void> crateApiCommonApiInitApp() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 37, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiCommonApiInitAppConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiCommonApiInitAppConstMeta => const TaskConstMeta(
        debugName: "init_app",
        argNames: [],
      );

  @override
  bool crateApiStructureDesignerApiIsEditAtomActive() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 38)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiStructureDesignerApiIsEditAtomActiveConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiStructureDesignerApiIsEditAtomActiveConstMeta =>
      const TaskConstMeta(
        debugName: "is_edit_atom_active",
        argNames: [],
      );

  @override
  bool crateApiSceneComposerApiIsFrameLockedToAtoms() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 39)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSceneComposerApiIsFrameLockedToAtomsConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSceneComposerApiIsFrameLockedToAtomsConstMeta =>
      const TaskConstMeta(
        debugName: "is_frame_locked_to_atoms",
        argNames: [],
      );

  @override
  bool crateApiStructureDesignerApiLoadNodeNetworks(
      {required String filePath}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(filePath, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 40)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiStructureDesignerApiLoadNodeNetworksConstMeta,
      argValues: [filePath],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiStructureDesignerApiLoadNodeNetworksConstMeta =>
      const TaskConstMeta(
        debugName: "load_node_networks",
        argNames: ["filePath"],
      );

  @override
  void crateApiCommonApiMoveCamera(
      {required APIVec3 eye, required APIVec3 target, required APIVec3 up}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_api_vec_3(eye, serializer);
        sse_encode_box_autoadd_api_vec_3(target, serializer);
        sse_encode_box_autoadd_api_vec_3(up, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 41)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiCommonApiMoveCameraConstMeta,
      argValues: [eye, target, up],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiCommonApiMoveCameraConstMeta =>
      const TaskConstMeta(
        debugName: "move_camera",
        argNames: ["eye", "target", "up"],
      );

  @override
  void crateApiStructureDesignerApiMoveNode(
      {required BigInt nodeId, required APIVec2 position}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_64(nodeId, serializer);
        sse_encode_box_autoadd_api_vec_2(position, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 42)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiStructureDesignerApiMoveNodeConstMeta,
      argValues: [nodeId, position],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiStructureDesignerApiMoveNodeConstMeta =>
      const TaskConstMeta(
        debugName: "move_node",
        argNames: ["nodeId", "position"],
      );

  @override
  double crateApiCommonApiProvideTexture({required int texturePtr}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_CastedPrimitive_u_64(texturePtr, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 43)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_f_64,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiCommonApiProvideTextureConstMeta,
      argValues: [texturePtr],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiCommonApiProvideTextureConstMeta =>
      const TaskConstMeta(
        debugName: "provide_texture",
        argNames: ["texturePtr"],
      );

  @override
  bool crateApiStructureDesignerApiRenameNodeNetwork(
      {required String oldName, required String newName}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(oldName, serializer);
        sse_encode_String(newName, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 44)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiStructureDesignerApiRenameNodeNetworkConstMeta,
      argValues: [oldName, newName],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiStructureDesignerApiRenameNodeNetworkConstMeta =>
      const TaskConstMeta(
        debugName: "rename_node_network",
        argNames: ["oldName", "newName"],
      );

  @override
  void crateApiStructureDesignerApiReplaceSelectedAtoms(
      {required int atomicNumber}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(atomicNumber, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 45)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiStructureDesignerApiReplaceSelectedAtomsConstMeta,
      argValues: [atomicNumber],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiStructureDesignerApiReplaceSelectedAtomsConstMeta =>
          const TaskConstMeta(
            debugName: "replace_selected_atoms",
            argNames: ["atomicNumber"],
          );

  @override
  void crateApiSceneComposerApiRotateAroundLocalAxis(
      {required int axisIndex, required double angleDegrees}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(axisIndex, serializer);
        sse_encode_f_64(angleDegrees, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 46)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSceneComposerApiRotateAroundLocalAxisConstMeta,
      argValues: [axisIndex, angleDegrees],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSceneComposerApiRotateAroundLocalAxisConstMeta =>
      const TaskConstMeta(
        debugName: "rotate_around_local_axis",
        argNames: ["axisIndex", "angleDegrees"],
      );

  @override
  bool crateApiStructureDesignerApiSaveNodeNetworks(
      {required String filePath}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(filePath, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 47)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiStructureDesignerApiSaveNodeNetworksConstMeta,
      argValues: [filePath],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiStructureDesignerApiSaveNodeNetworksConstMeta =>
      const TaskConstMeta(
        debugName: "save_node_networks",
        argNames: ["filePath"],
      );

  @override
  void crateApiSceneComposerApiSceneComposerNewModel() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 48)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSceneComposerApiSceneComposerNewModelConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSceneComposerApiSceneComposerNewModelConstMeta =>
      const TaskConstMeta(
        debugName: "scene_composer_new_model",
        argNames: [],
      );

  @override
  bool crateApiSceneComposerApiSceneComposerRedo() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 49)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSceneComposerApiSceneComposerRedoConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSceneComposerApiSceneComposerRedoConstMeta =>
      const TaskConstMeta(
        debugName: "scene_composer_redo",
        argNames: [],
      );

  @override
  void crateApiSceneComposerApiSceneComposerRenameCluster(
      {required BigInt clusterId, required String newName}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_64(clusterId, serializer);
        sse_encode_String(newName, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 50)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSceneComposerApiSceneComposerRenameClusterConstMeta,
      argValues: [clusterId, newName],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiSceneComposerApiSceneComposerRenameClusterConstMeta =>
          const TaskConstMeta(
            debugName: "scene_composer_rename_cluster",
            argNames: ["clusterId", "newName"],
          );

  @override
  bool crateApiSceneComposerApiSceneComposerUndo() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 51)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSceneComposerApiSceneComposerUndoConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSceneComposerApiSceneComposerUndoConstMeta =>
      const TaskConstMeta(
        debugName: "scene_composer_undo",
        argNames: [],
      );

  @override
  BigInt? crateApiSceneComposerApiSelectAlignAtomByRay(
      {required APIVec3 rayStart, required APIVec3 rayDir}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_api_vec_3(rayStart, serializer);
        sse_encode_box_autoadd_api_vec_3(rayDir, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 52)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_u_64,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSceneComposerApiSelectAlignAtomByRayConstMeta,
      argValues: [rayStart, rayDir],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSceneComposerApiSelectAlignAtomByRayConstMeta =>
      const TaskConstMeta(
        debugName: "select_align_atom_by_ray",
        argNames: ["rayStart", "rayDir"],
      );

  @override
  BigInt? crateApiSceneComposerApiSelectAtomInfoAtomByRay(
      {required APIVec3 rayStart, required APIVec3 rayDir}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_api_vec_3(rayStart, serializer);
        sse_encode_box_autoadd_api_vec_3(rayDir, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 53)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_u_64,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSceneComposerApiSelectAtomInfoAtomByRayConstMeta,
      argValues: [rayStart, rayDir],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSceneComposerApiSelectAtomInfoAtomByRayConstMeta =>
      const TaskConstMeta(
        debugName: "select_atom_info_atom_by_ray",
        argNames: ["rayStart", "rayDir"],
      );

  @override
  bool crateApiStructureDesignerApiSelectAtomOrBondByRay(
      {required APIVec3 rayStart,
      required APIVec3 rayDir,
      required SelectModifier selectModifier}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_api_vec_3(rayStart, serializer);
        sse_encode_box_autoadd_api_vec_3(rayDir, serializer);
        sse_encode_select_modifier(selectModifier, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 54)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiStructureDesignerApiSelectAtomOrBondByRayConstMeta,
      argValues: [rayStart, rayDir, selectModifier],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiStructureDesignerApiSelectAtomOrBondByRayConstMeta =>
          const TaskConstMeta(
            debugName: "select_atom_or_bond_by_ray",
            argNames: ["rayStart", "rayDir", "selectModifier"],
          );

  @override
  void crateApiSceneComposerApiSelectClusterById(
      {required BigInt clusterId, required SelectModifier selectModifier}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_64(clusterId, serializer);
        sse_encode_select_modifier(selectModifier, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 55)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSceneComposerApiSelectClusterByIdConstMeta,
      argValues: [clusterId, selectModifier],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSceneComposerApiSelectClusterByIdConstMeta =>
      const TaskConstMeta(
        debugName: "select_cluster_by_id",
        argNames: ["clusterId", "selectModifier"],
      );

  @override
  BigInt? crateApiSceneComposerApiSelectClusterByRay(
      {required APIVec3 rayStart,
      required APIVec3 rayDir,
      required SelectModifier selectModifier}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_api_vec_3(rayStart, serializer);
        sse_encode_box_autoadd_api_vec_3(rayDir, serializer);
        sse_encode_select_modifier(selectModifier, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 56)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_u_64,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSceneComposerApiSelectClusterByRayConstMeta,
      argValues: [rayStart, rayDir, selectModifier],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSceneComposerApiSelectClusterByRayConstMeta =>
      const TaskConstMeta(
        debugName: "select_cluster_by_ray",
        argNames: ["rayStart", "rayDir", "selectModifier"],
      );

  @override
  BigInt? crateApiSceneComposerApiSelectDistanceAtomByRay(
      {required APIVec3 rayStart, required APIVec3 rayDir}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_api_vec_3(rayStart, serializer);
        sse_encode_box_autoadd_api_vec_3(rayDir, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 57)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_u_64,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSceneComposerApiSelectDistanceAtomByRayConstMeta,
      argValues: [rayStart, rayDir],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSceneComposerApiSelectDistanceAtomByRayConstMeta =>
      const TaskConstMeta(
        debugName: "select_distance_atom_by_ray",
        argNames: ["rayStart", "rayDir"],
      );

  @override
  bool crateApiStructureDesignerApiSelectNode({required BigInt nodeId}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_64(nodeId, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 58)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiStructureDesignerApiSelectNodeConstMeta,
      argValues: [nodeId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiStructureDesignerApiSelectNodeConstMeta =>
      const TaskConstMeta(
        debugName: "select_node",
        argNames: ["nodeId"],
      );

  @override
  bool crateApiStructureDesignerApiSelectWire(
      {required BigInt sourceNodeId,
      required BigInt destinationNodeId,
      required BigInt destinationArgumentIndex}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_64(sourceNodeId, serializer);
        sse_encode_u_64(destinationNodeId, serializer);
        sse_encode_usize(destinationArgumentIndex, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 59)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiStructureDesignerApiSelectWireConstMeta,
      argValues: [sourceNodeId, destinationNodeId, destinationArgumentIndex],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiStructureDesignerApiSelectWireConstMeta =>
      const TaskConstMeta(
        debugName: "select_wire",
        argNames: [
          "sourceNodeId",
          "destinationNodeId",
          "destinationArgumentIndex"
        ],
      );

  @override
  bool crateApiStructureDesignerApiSetActiveEditAtomTool(
      {required APIEditAtomTool tool}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_api_edit_atom_tool(tool, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 60)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiStructureDesignerApiSetActiveEditAtomToolConstMeta,
      argValues: [tool],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiStructureDesignerApiSetActiveEditAtomToolConstMeta =>
          const TaskConstMeta(
            debugName: "set_active_edit_atom_tool",
            argNames: ["tool"],
          );

  @override
  void crateApiCommonApiSetActiveEditor({required Editor editor}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_editor(editor, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 61)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiCommonApiSetActiveEditorConstMeta,
      argValues: [editor],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiCommonApiSetActiveEditorConstMeta =>
      const TaskConstMeta(
        debugName: "set_active_editor",
        argNames: ["editor"],
      );

  @override
  void crateApiStructureDesignerApiSetActiveNodeNetwork(
      {required String nodeNetworkName}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(nodeNetworkName, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 62)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiStructureDesignerApiSetActiveNodeNetworkConstMeta,
      argValues: [nodeNetworkName],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiStructureDesignerApiSetActiveNodeNetworkConstMeta =>
          const TaskConstMeta(
            debugName: "set_active_node_network",
            argNames: ["nodeNetworkName"],
          );

  @override
  void crateApiSceneComposerApiSetActiveSceneComposerTool(
      {required APISceneComposerTool tool}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_api_scene_composer_tool(tool, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 63)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSceneComposerApiSetActiveSceneComposerToolConstMeta,
      argValues: [tool],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiSceneComposerApiSetActiveSceneComposerToolConstMeta =>
          const TaskConstMeta(
            debugName: "set_active_scene_composer_tool",
            argNames: ["tool"],
          );

  @override
  void crateApiStructureDesignerApiSetAtomTransData(
      {required BigInt nodeId, required APIAtomTransData data}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_64(nodeId, serializer);
        sse_encode_box_autoadd_api_atom_trans_data(data, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 64)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiStructureDesignerApiSetAtomTransDataConstMeta,
      argValues: [nodeId, data],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiStructureDesignerApiSetAtomTransDataConstMeta =>
      const TaskConstMeta(
        debugName: "set_atom_trans_data",
        argNames: ["nodeId", "data"],
      );

  @override
  void crateApiCommonApiSetCameraTransform({required APITransform transform}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_api_transform(transform, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 65)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiCommonApiSetCameraTransformConstMeta,
      argValues: [transform],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiCommonApiSetCameraTransformConstMeta =>
      const TaskConstMeta(
        debugName: "set_camera_transform",
        argNames: ["transform"],
      );

  @override
  void crateApiStructureDesignerApiSetCuboidData(
      {required BigInt nodeId, required APICuboidData data}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_64(nodeId, serializer);
        sse_encode_box_autoadd_api_cuboid_data(data, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 66)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiStructureDesignerApiSetCuboidDataConstMeta,
      argValues: [nodeId, data],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiStructureDesignerApiSetCuboidDataConstMeta =>
      const TaskConstMeta(
        debugName: "set_cuboid_data",
        argNames: ["nodeId", "data"],
      );

  @override
  bool crateApiStructureDesignerApiSetEditAtomAddAtomData(
      {required int atomicNumber}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(atomicNumber, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 67)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiStructureDesignerApiSetEditAtomAddAtomDataConstMeta,
      argValues: [atomicNumber],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiStructureDesignerApiSetEditAtomAddAtomDataConstMeta =>
          const TaskConstMeta(
            debugName: "set_edit_atom_add_atom_data",
            argNames: ["atomicNumber"],
          );

  @override
  bool crateApiStructureDesignerApiSetEditAtomDefaultData(
      {required int replacementAtomicNumber}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(replacementAtomicNumber, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 68)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiStructureDesignerApiSetEditAtomDefaultDataConstMeta,
      argValues: [replacementAtomicNumber],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiStructureDesignerApiSetEditAtomDefaultDataConstMeta =>
          const TaskConstMeta(
            debugName: "set_edit_atom_default_data",
            argNames: ["replacementAtomicNumber"],
          );

  @override
  void crateApiSceneComposerApiSetFrameLockedToAtoms({required bool locked}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_bool(locked, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 69)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSceneComposerApiSetFrameLockedToAtomsConstMeta,
      argValues: [locked],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSceneComposerApiSetFrameLockedToAtomsConstMeta =>
      const TaskConstMeta(
        debugName: "set_frame_locked_to_atoms",
        argNames: ["locked"],
      );

  @override
  void crateApiStructureDesignerApiSetGeoTransData(
      {required BigInt nodeId, required APIGeoTransData data}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_64(nodeId, serializer);
        sse_encode_box_autoadd_api_geo_trans_data(data, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 70)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiStructureDesignerApiSetGeoTransDataConstMeta,
      argValues: [nodeId, data],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiStructureDesignerApiSetGeoTransDataConstMeta =>
      const TaskConstMeta(
        debugName: "set_geo_trans_data",
        argNames: ["nodeId", "data"],
      );

  @override
  void crateApiStructureDesignerApiSetHalfSpaceData(
      {required BigInt nodeId, required APIHalfSpaceData data}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_64(nodeId, serializer);
        sse_encode_box_autoadd_api_half_space_data(data, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 71)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiStructureDesignerApiSetHalfSpaceDataConstMeta,
      argValues: [nodeId, data],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiStructureDesignerApiSetHalfSpaceDataConstMeta =>
      const TaskConstMeta(
        debugName: "set_half_space_data",
        argNames: ["nodeId", "data"],
      );

  @override
  void crateApiStructureDesignerApiSetNodeDisplay(
      {required BigInt nodeId, required bool isDisplayed}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_64(nodeId, serializer);
        sse_encode_bool(isDisplayed, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 72)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiStructureDesignerApiSetNodeDisplayConstMeta,
      argValues: [nodeId, isDisplayed],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiStructureDesignerApiSetNodeDisplayConstMeta =>
      const TaskConstMeta(
        debugName: "set_node_display",
        argNames: ["nodeId", "isDisplayed"],
      );

  @override
  bool crateApiStructureDesignerApiSetReturnNodeId({BigInt? nodeId}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_u_64(nodeId, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 73)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiStructureDesignerApiSetReturnNodeIdConstMeta,
      argValues: [nodeId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiStructureDesignerApiSetReturnNodeIdConstMeta =>
      const TaskConstMeta(
        debugName: "set_return_node_id",
        argNames: ["nodeId"],
      );

  @override
  void crateApiSceneComposerApiSetSelectedFrameTransform(
      {required APITransform transform}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_api_transform(transform, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 74)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSceneComposerApiSetSelectedFrameTransformConstMeta,
      argValues: [transform],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiSceneComposerApiSetSelectedFrameTransformConstMeta =>
          const TaskConstMeta(
            debugName: "set_selected_frame_transform",
            argNames: ["transform"],
          );

  @override
  void crateApiStructureDesignerApiSetSphereData(
      {required BigInt nodeId, required APISphereData data}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_64(nodeId, serializer);
        sse_encode_box_autoadd_api_sphere_data(data, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 75)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiStructureDesignerApiSetSphereDataConstMeta,
      argValues: [nodeId, data],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiStructureDesignerApiSetSphereDataConstMeta =>
      const TaskConstMeta(
        debugName: "set_sphere_data",
        argNames: ["nodeId", "data"],
      );

  @override
  Future<void> crateApiCommonApiSetViewportSize(
      {required int width, required int height}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(width, serializer);
        sse_encode_u_32(height, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 76, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiCommonApiSetViewportSizeConstMeta,
      argValues: [width, height],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiCommonApiSetViewportSizeConstMeta =>
      const TaskConstMeta(
        debugName: "set_viewport_size",
        argNames: ["width", "height"],
      );

  @override
  bool crateApiCommonApiSyncGadgetData() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 77)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiCommonApiSyncGadgetDataConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiCommonApiSyncGadgetDataConstMeta =>
      const TaskConstMeta(
        debugName: "sync_gadget_data",
        argNames: [],
      );

  @override
  void crateApiStructureDesignerApiTransformSelected(
      {required APITransform absTransform}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_api_transform(absTransform, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 78)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiStructureDesignerApiTransformSelectedConstMeta,
      argValues: [absTransform],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiStructureDesignerApiTransformSelectedConstMeta =>
      const TaskConstMeta(
        debugName: "transform_selected",
        argNames: ["absTransform"],
      );

  @override
  void crateApiSceneComposerApiTranslateAlongLocalAxis(
      {required int axisIndex, required double translation}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(axisIndex, serializer);
        sse_encode_f_64(translation, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 79)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSceneComposerApiTranslateAlongLocalAxisConstMeta,
      argValues: [axisIndex, translation],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSceneComposerApiTranslateAlongLocalAxisConstMeta =>
      const TaskConstMeta(
        debugName: "translate_along_local_axis",
        argNames: ["axisIndex", "translation"],
      );

  @protected
  int dco_decode_CastedPrimitive_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError(
        'Not implemented in this codec, please use the other one');
  }

  @protected
  Map<BigInt, NodeView> dco_decode_Map_u_64_node_view(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(dco_decode_list_record_u_64_node_view(raw)
        .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  APIAtomTransData dco_decode_api_atom_trans_data(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return APIAtomTransData(
      translation: dco_decode_api_vec_3(arr[0]),
      rotation: dco_decode_api_vec_3(arr[1]),
    );
  }

  @protected
  APICamera dco_decode_api_camera(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 7)
      throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
    return APICamera(
      eye: dco_decode_api_vec_3(arr[0]),
      target: dco_decode_api_vec_3(arr[1]),
      up: dco_decode_api_vec_3(arr[2]),
      aspect: dco_decode_f_64(arr[3]),
      fovy: dco_decode_f_64(arr[4]),
      znear: dco_decode_f_64(arr[5]),
      zfar: dco_decode_f_64(arr[6]),
    );
  }

  @protected
  APICuboidData dco_decode_api_cuboid_data(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return APICuboidData(
      minCorner: dco_decode_apii_vec_3(arr[0]),
      extent: dco_decode_apii_vec_3(arr[1]),
    );
  }

  @protected
  APIEditAtomData dco_decode_api_edit_atom_data(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 9)
      throw Exception('unexpected arr length: expect 9 but see ${arr.length}');
    return APIEditAtomData(
      activeTool: dco_decode_api_edit_atom_tool(arr[0]),
      canUndo: dco_decode_bool(arr[1]),
      canRedo: dco_decode_bool(arr[2]),
      bondToolLastAtomId: dco_decode_opt_box_autoadd_u_64(arr[3]),
      replacementAtomicNumber: dco_decode_opt_box_autoadd_i_32(arr[4]),
      addAtomToolAtomicNumber: dco_decode_opt_box_autoadd_i_32(arr[5]),
      hasSelectedAtoms: dco_decode_bool(arr[6]),
      hasSelection: dco_decode_bool(arr[7]),
      selectionTransform: dco_decode_opt_box_autoadd_api_transform(arr[8]),
    );
  }

  @protected
  APIEditAtomTool dco_decode_api_edit_atom_tool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return APIEditAtomTool.values[raw as int];
  }

  @protected
  APIGeoTransData dco_decode_api_geo_trans_data(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return APIGeoTransData(
      translation: dco_decode_apii_vec_3(arr[0]),
      rotation: dco_decode_apii_vec_3(arr[1]),
      transformOnlyFrame: dco_decode_bool(arr[2]),
    );
  }

  @protected
  APIHalfSpaceData dco_decode_api_half_space_data(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return APIHalfSpaceData(
      millerIndex: dco_decode_apii_vec_3(arr[0]),
      shift: dco_decode_i_32(arr[1]),
    );
  }

  @protected
  APISceneComposerTool dco_decode_api_scene_composer_tool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return APISceneComposerTool.values[raw as int];
  }

  @protected
  APISphereData dco_decode_api_sphere_data(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return APISphereData(
      center: dco_decode_apii_vec_3(arr[0]),
      radius: dco_decode_i_32(arr[1]),
    );
  }

  @protected
  APITransform dco_decode_api_transform(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return APITransform(
      translation: dco_decode_api_vec_3(arr[0]),
      rotation: dco_decode_api_vec_3(arr[1]),
    );
  }

  @protected
  APIVec2 dco_decode_api_vec_2(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return APIVec2(
      x: dco_decode_f_64(arr[0]),
      y: dco_decode_f_64(arr[1]),
    );
  }

  @protected
  APIVec3 dco_decode_api_vec_3(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return APIVec3(
      x: dco_decode_f_64(arr[0]),
      y: dco_decode_f_64(arr[1]),
      z: dco_decode_f_64(arr[2]),
    );
  }

  @protected
  APIIVec3 dco_decode_apii_vec_3(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return APIIVec3(
      x: dco_decode_i_32(arr[0]),
      y: dco_decode_i_32(arr[1]),
      z: dco_decode_i_32(arr[2]),
    );
  }

  @protected
  AtomView dco_decode_atom_view(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 8)
      throw Exception('unexpected arr length: expect 8 but see ${arr.length}');
    return AtomView(
      id: dco_decode_u_64(arr[0]),
      atomicNumber: dco_decode_i_32(arr[1]),
      symbol: dco_decode_String(arr[2]),
      clusterId: dco_decode_u_64(arr[3]),
      clusterName: dco_decode_String(arr[4]),
      position: dco_decode_api_vec_3(arr[5]),
      elementName: dco_decode_String(arr[6]),
      covalentRadius: dco_decode_f_64(arr[7]),
    );
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  APIAtomTransData dco_decode_box_autoadd_api_atom_trans_data(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_api_atom_trans_data(raw);
  }

  @protected
  APICamera dco_decode_box_autoadd_api_camera(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_api_camera(raw);
  }

  @protected
  APICuboidData dco_decode_box_autoadd_api_cuboid_data(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_api_cuboid_data(raw);
  }

  @protected
  APIEditAtomData dco_decode_box_autoadd_api_edit_atom_data(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_api_edit_atom_data(raw);
  }

  @protected
  APIEditAtomTool dco_decode_box_autoadd_api_edit_atom_tool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_api_edit_atom_tool(raw);
  }

  @protected
  APIGeoTransData dco_decode_box_autoadd_api_geo_trans_data(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_api_geo_trans_data(raw);
  }

  @protected
  APIHalfSpaceData dco_decode_box_autoadd_api_half_space_data(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_api_half_space_data(raw);
  }

  @protected
  APISphereData dco_decode_box_autoadd_api_sphere_data(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_api_sphere_data(raw);
  }

  @protected
  APITransform dco_decode_box_autoadd_api_transform(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_api_transform(raw);
  }

  @protected
  APIVec2 dco_decode_box_autoadd_api_vec_2(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_api_vec_2(raw);
  }

  @protected
  APIVec3 dco_decode_box_autoadd_api_vec_3(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_api_vec_3(raw);
  }

  @protected
  AtomView dco_decode_box_autoadd_atom_view(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_atom_view(raw);
  }

  @protected
  int dco_decode_box_autoadd_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  NodeNetworkView dco_decode_box_autoadd_node_network_view(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_node_network_view(raw);
  }

  @protected
  SceneComposerView dco_decode_box_autoadd_scene_composer_view(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_scene_composer_view(raw);
  }

  @protected
  BigInt dco_decode_box_autoadd_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_u_64(raw);
  }

  @protected
  ClusterView dco_decode_cluster_view(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return ClusterView(
      id: dco_decode_u_64(arr[0]),
      name: dco_decode_String(arr[1]),
      selected: dco_decode_bool(arr[2]),
    );
  }

  @protected
  Editor dco_decode_editor(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Editor.values[raw as int];
  }

  @protected
  ElementSummary dco_decode_element_summary(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return ElementSummary(
      atomicNumber: dco_decode_i_32(arr[0]),
      elementName: dco_decode_String(arr[1]),
    );
  }

  @protected
  double dco_decode_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  InputPinView dco_decode_input_pin_view(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return InputPinView(
      name: dco_decode_String(arr[0]),
      dataType: dco_decode_String(arr[1]),
      multi: dco_decode_bool(arr[2]),
    );
  }

  @protected
  List<String> dco_decode_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_String).toList();
  }

  @protected
  List<APISceneComposerTool> dco_decode_list_api_scene_composer_tool(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_api_scene_composer_tool)
        .toList();
  }

  @protected
  List<ClusterView> dco_decode_list_cluster_view(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_cluster_view).toList();
  }

  @protected
  List<ElementSummary> dco_decode_list_element_summary(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_element_summary).toList();
  }

  @protected
  List<InputPinView> dco_decode_list_input_pin_view(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_input_pin_view).toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<(BigInt, NodeView)> dco_decode_list_record_u_64_node_view(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_record_u_64_node_view)
        .toList();
  }

  @protected
  List<WireView> dco_decode_list_wire_view(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_wire_view).toList();
  }

  @protected
  NodeNetworkView dco_decode_node_network_view(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return NodeNetworkView(
      name: dco_decode_String(arr[0]),
      nodes: dco_decode_Map_u_64_node_view(arr[1]),
      wires: dco_decode_list_wire_view(arr[2]),
    );
  }

  @protected
  NodeView dco_decode_node_view(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 8)
      throw Exception('unexpected arr length: expect 8 but see ${arr.length}');
    return NodeView(
      id: dco_decode_u_64(arr[0]),
      nodeTypeName: dco_decode_String(arr[1]),
      position: dco_decode_api_vec_2(arr[2]),
      inputPins: dco_decode_list_input_pin_view(arr[3]),
      outputType: dco_decode_String(arr[4]),
      selected: dco_decode_bool(arr[5]),
      displayed: dco_decode_bool(arr[6]),
      returnNode: dco_decode_bool(arr[7]),
    );
  }

  @protected
  APIAtomTransData? dco_decode_opt_box_autoadd_api_atom_trans_data(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_api_atom_trans_data(raw);
  }

  @protected
  APICamera? dco_decode_opt_box_autoadd_api_camera(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_api_camera(raw);
  }

  @protected
  APICuboidData? dco_decode_opt_box_autoadd_api_cuboid_data(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_api_cuboid_data(raw);
  }

  @protected
  APIEditAtomData? dco_decode_opt_box_autoadd_api_edit_atom_data(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_api_edit_atom_data(raw);
  }

  @protected
  APIEditAtomTool? dco_decode_opt_box_autoadd_api_edit_atom_tool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_api_edit_atom_tool(raw);
  }

  @protected
  APIGeoTransData? dco_decode_opt_box_autoadd_api_geo_trans_data(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_api_geo_trans_data(raw);
  }

  @protected
  APIHalfSpaceData? dco_decode_opt_box_autoadd_api_half_space_data(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_api_half_space_data(raw);
  }

  @protected
  APISphereData? dco_decode_opt_box_autoadd_api_sphere_data(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_api_sphere_data(raw);
  }

  @protected
  APITransform? dco_decode_opt_box_autoadd_api_transform(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_api_transform(raw);
  }

  @protected
  AtomView? dco_decode_opt_box_autoadd_atom_view(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_atom_view(raw);
  }

  @protected
  int? dco_decode_opt_box_autoadd_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_i_32(raw);
  }

  @protected
  NodeNetworkView? dco_decode_opt_box_autoadd_node_network_view(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_node_network_view(raw);
  }

  @protected
  SceneComposerView? dco_decode_opt_box_autoadd_scene_composer_view(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_scene_composer_view(raw);
  }

  @protected
  BigInt? dco_decode_opt_box_autoadd_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_64(raw);
  }

  @protected
  List<String>? dco_decode_opt_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_String(raw);
  }

  @protected
  (BigInt, NodeView) dco_decode_record_u_64_node_view(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_u_64(arr[0]),
      dco_decode_node_view(arr[1]),
    );
  }

  @protected
  SceneComposerView dco_decode_scene_composer_view(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return SceneComposerView(
      clusters: dco_decode_list_cluster_view(arr[0]),
      activeTool: dco_decode_api_scene_composer_tool(arr[1]),
      availableTools: dco_decode_list_api_scene_composer_tool(arr[2]),
      isUndoAvailable: dco_decode_bool(arr[3]),
      isRedoAvailable: dco_decode_bool(arr[4]),
    );
  }

  @protected
  SelectModifier dco_decode_select_modifier(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SelectModifier.values[raw as int];
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  BigInt dco_decode_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  WireView dco_decode_wire_view(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return WireView(
      sourceNodeId: dco_decode_u_64(arr[0]),
      destNodeId: dco_decode_u_64(arr[1]),
      destParamIndex: dco_decode_usize(arr[2]),
      selected: dco_decode_bool(arr[3]),
    );
  }

  @protected
  int sse_decode_CastedPrimitive_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_u_64(deserializer);
    return inner.toInt();
  }

  @protected
  Map<BigInt, NodeView> sse_decode_Map_u_64_node_view(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_u_64_node_view(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  APIAtomTransData sse_decode_api_atom_trans_data(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_translation = sse_decode_api_vec_3(deserializer);
    var var_rotation = sse_decode_api_vec_3(deserializer);
    return APIAtomTransData(
        translation: var_translation, rotation: var_rotation);
  }

  @protected
  APICamera sse_decode_api_camera(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_eye = sse_decode_api_vec_3(deserializer);
    var var_target = sse_decode_api_vec_3(deserializer);
    var var_up = sse_decode_api_vec_3(deserializer);
    var var_aspect = sse_decode_f_64(deserializer);
    var var_fovy = sse_decode_f_64(deserializer);
    var var_znear = sse_decode_f_64(deserializer);
    var var_zfar = sse_decode_f_64(deserializer);
    return APICamera(
        eye: var_eye,
        target: var_target,
        up: var_up,
        aspect: var_aspect,
        fovy: var_fovy,
        znear: var_znear,
        zfar: var_zfar);
  }

  @protected
  APICuboidData sse_decode_api_cuboid_data(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_minCorner = sse_decode_apii_vec_3(deserializer);
    var var_extent = sse_decode_apii_vec_3(deserializer);
    return APICuboidData(minCorner: var_minCorner, extent: var_extent);
  }

  @protected
  APIEditAtomData sse_decode_api_edit_atom_data(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_activeTool = sse_decode_api_edit_atom_tool(deserializer);
    var var_canUndo = sse_decode_bool(deserializer);
    var var_canRedo = sse_decode_bool(deserializer);
    var var_bondToolLastAtomId = sse_decode_opt_box_autoadd_u_64(deserializer);
    var var_replacementAtomicNumber =
        sse_decode_opt_box_autoadd_i_32(deserializer);
    var var_addAtomToolAtomicNumber =
        sse_decode_opt_box_autoadd_i_32(deserializer);
    var var_hasSelectedAtoms = sse_decode_bool(deserializer);
    var var_hasSelection = sse_decode_bool(deserializer);
    var var_selectionTransform =
        sse_decode_opt_box_autoadd_api_transform(deserializer);
    return APIEditAtomData(
        activeTool: var_activeTool,
        canUndo: var_canUndo,
        canRedo: var_canRedo,
        bondToolLastAtomId: var_bondToolLastAtomId,
        replacementAtomicNumber: var_replacementAtomicNumber,
        addAtomToolAtomicNumber: var_addAtomToolAtomicNumber,
        hasSelectedAtoms: var_hasSelectedAtoms,
        hasSelection: var_hasSelection,
        selectionTransform: var_selectionTransform);
  }

  @protected
  APIEditAtomTool sse_decode_api_edit_atom_tool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return APIEditAtomTool.values[inner];
  }

  @protected
  APIGeoTransData sse_decode_api_geo_trans_data(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_translation = sse_decode_apii_vec_3(deserializer);
    var var_rotation = sse_decode_apii_vec_3(deserializer);
    var var_transformOnlyFrame = sse_decode_bool(deserializer);
    return APIGeoTransData(
        translation: var_translation,
        rotation: var_rotation,
        transformOnlyFrame: var_transformOnlyFrame);
  }

  @protected
  APIHalfSpaceData sse_decode_api_half_space_data(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_millerIndex = sse_decode_apii_vec_3(deserializer);
    var var_shift = sse_decode_i_32(deserializer);
    return APIHalfSpaceData(millerIndex: var_millerIndex, shift: var_shift);
  }

  @protected
  APISceneComposerTool sse_decode_api_scene_composer_tool(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return APISceneComposerTool.values[inner];
  }

  @protected
  APISphereData sse_decode_api_sphere_data(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_center = sse_decode_apii_vec_3(deserializer);
    var var_radius = sse_decode_i_32(deserializer);
    return APISphereData(center: var_center, radius: var_radius);
  }

  @protected
  APITransform sse_decode_api_transform(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_translation = sse_decode_api_vec_3(deserializer);
    var var_rotation = sse_decode_api_vec_3(deserializer);
    return APITransform(translation: var_translation, rotation: var_rotation);
  }

  @protected
  APIVec2 sse_decode_api_vec_2(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_x = sse_decode_f_64(deserializer);
    var var_y = sse_decode_f_64(deserializer);
    return APIVec2(x: var_x, y: var_y);
  }

  @protected
  APIVec3 sse_decode_api_vec_3(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_x = sse_decode_f_64(deserializer);
    var var_y = sse_decode_f_64(deserializer);
    var var_z = sse_decode_f_64(deserializer);
    return APIVec3(x: var_x, y: var_y, z: var_z);
  }

  @protected
  APIIVec3 sse_decode_apii_vec_3(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_x = sse_decode_i_32(deserializer);
    var var_y = sse_decode_i_32(deserializer);
    var var_z = sse_decode_i_32(deserializer);
    return APIIVec3(x: var_x, y: var_y, z: var_z);
  }

  @protected
  AtomView sse_decode_atom_view(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_u_64(deserializer);
    var var_atomicNumber = sse_decode_i_32(deserializer);
    var var_symbol = sse_decode_String(deserializer);
    var var_clusterId = sse_decode_u_64(deserializer);
    var var_clusterName = sse_decode_String(deserializer);
    var var_position = sse_decode_api_vec_3(deserializer);
    var var_elementName = sse_decode_String(deserializer);
    var var_covalentRadius = sse_decode_f_64(deserializer);
    return AtomView(
        id: var_id,
        atomicNumber: var_atomicNumber,
        symbol: var_symbol,
        clusterId: var_clusterId,
        clusterName: var_clusterName,
        position: var_position,
        elementName: var_elementName,
        covalentRadius: var_covalentRadius);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  APIAtomTransData sse_decode_box_autoadd_api_atom_trans_data(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_api_atom_trans_data(deserializer));
  }

  @protected
  APICamera sse_decode_box_autoadd_api_camera(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_api_camera(deserializer));
  }

  @protected
  APICuboidData sse_decode_box_autoadd_api_cuboid_data(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_api_cuboid_data(deserializer));
  }

  @protected
  APIEditAtomData sse_decode_box_autoadd_api_edit_atom_data(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_api_edit_atom_data(deserializer));
  }

  @protected
  APIEditAtomTool sse_decode_box_autoadd_api_edit_atom_tool(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_api_edit_atom_tool(deserializer));
  }

  @protected
  APIGeoTransData sse_decode_box_autoadd_api_geo_trans_data(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_api_geo_trans_data(deserializer));
  }

  @protected
  APIHalfSpaceData sse_decode_box_autoadd_api_half_space_data(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_api_half_space_data(deserializer));
  }

  @protected
  APISphereData sse_decode_box_autoadd_api_sphere_data(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_api_sphere_data(deserializer));
  }

  @protected
  APITransform sse_decode_box_autoadd_api_transform(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_api_transform(deserializer));
  }

  @protected
  APIVec2 sse_decode_box_autoadd_api_vec_2(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_api_vec_2(deserializer));
  }

  @protected
  APIVec3 sse_decode_box_autoadd_api_vec_3(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_api_vec_3(deserializer));
  }

  @protected
  AtomView sse_decode_box_autoadd_atom_view(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_atom_view(deserializer));
  }

  @protected
  int sse_decode_box_autoadd_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_i_32(deserializer));
  }

  @protected
  NodeNetworkView sse_decode_box_autoadd_node_network_view(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_node_network_view(deserializer));
  }

  @protected
  SceneComposerView sse_decode_box_autoadd_scene_composer_view(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_scene_composer_view(deserializer));
  }

  @protected
  BigInt sse_decode_box_autoadd_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_64(deserializer));
  }

  @protected
  ClusterView sse_decode_cluster_view(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_u_64(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_selected = sse_decode_bool(deserializer);
    return ClusterView(id: var_id, name: var_name, selected: var_selected);
  }

  @protected
  Editor sse_decode_editor(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return Editor.values[inner];
  }

  @protected
  ElementSummary sse_decode_element_summary(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_atomicNumber = sse_decode_i_32(deserializer);
    var var_elementName = sse_decode_String(deserializer);
    return ElementSummary(
        atomicNumber: var_atomicNumber, elementName: var_elementName);
  }

  @protected
  double sse_decode_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat64();
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  InputPinView sse_decode_input_pin_view(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_name = sse_decode_String(deserializer);
    var var_dataType = sse_decode_String(deserializer);
    var var_multi = sse_decode_bool(deserializer);
    return InputPinView(
        name: var_name, dataType: var_dataType, multi: var_multi);
  }

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_String(deserializer));
    }
    return ans_;
  }

  @protected
  List<APISceneComposerTool> sse_decode_list_api_scene_composer_tool(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <APISceneComposerTool>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_api_scene_composer_tool(deserializer));
    }
    return ans_;
  }

  @protected
  List<ClusterView> sse_decode_list_cluster_view(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <ClusterView>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_cluster_view(deserializer));
    }
    return ans_;
  }

  @protected
  List<ElementSummary> sse_decode_list_element_summary(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <ElementSummary>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_element_summary(deserializer));
    }
    return ans_;
  }

  @protected
  List<InputPinView> sse_decode_list_input_pin_view(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <InputPinView>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_input_pin_view(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<(BigInt, NodeView)> sse_decode_list_record_u_64_node_view(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(BigInt, NodeView)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_u_64_node_view(deserializer));
    }
    return ans_;
  }

  @protected
  List<WireView> sse_decode_list_wire_view(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <WireView>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_wire_view(deserializer));
    }
    return ans_;
  }

  @protected
  NodeNetworkView sse_decode_node_network_view(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_name = sse_decode_String(deserializer);
    var var_nodes = sse_decode_Map_u_64_node_view(deserializer);
    var var_wires = sse_decode_list_wire_view(deserializer);
    return NodeNetworkView(name: var_name, nodes: var_nodes, wires: var_wires);
  }

  @protected
  NodeView sse_decode_node_view(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_u_64(deserializer);
    var var_nodeTypeName = sse_decode_String(deserializer);
    var var_position = sse_decode_api_vec_2(deserializer);
    var var_inputPins = sse_decode_list_input_pin_view(deserializer);
    var var_outputType = sse_decode_String(deserializer);
    var var_selected = sse_decode_bool(deserializer);
    var var_displayed = sse_decode_bool(deserializer);
    var var_returnNode = sse_decode_bool(deserializer);
    return NodeView(
        id: var_id,
        nodeTypeName: var_nodeTypeName,
        position: var_position,
        inputPins: var_inputPins,
        outputType: var_outputType,
        selected: var_selected,
        displayed: var_displayed,
        returnNode: var_returnNode);
  }

  @protected
  APIAtomTransData? sse_decode_opt_box_autoadd_api_atom_trans_data(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_api_atom_trans_data(deserializer));
    } else {
      return null;
    }
  }

  @protected
  APICamera? sse_decode_opt_box_autoadd_api_camera(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_api_camera(deserializer));
    } else {
      return null;
    }
  }

  @protected
  APICuboidData? sse_decode_opt_box_autoadd_api_cuboid_data(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_api_cuboid_data(deserializer));
    } else {
      return null;
    }
  }

  @protected
  APIEditAtomData? sse_decode_opt_box_autoadd_api_edit_atom_data(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_api_edit_atom_data(deserializer));
    } else {
      return null;
    }
  }

  @protected
  APIEditAtomTool? sse_decode_opt_box_autoadd_api_edit_atom_tool(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_api_edit_atom_tool(deserializer));
    } else {
      return null;
    }
  }

  @protected
  APIGeoTransData? sse_decode_opt_box_autoadd_api_geo_trans_data(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_api_geo_trans_data(deserializer));
    } else {
      return null;
    }
  }

  @protected
  APIHalfSpaceData? sse_decode_opt_box_autoadd_api_half_space_data(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_api_half_space_data(deserializer));
    } else {
      return null;
    }
  }

  @protected
  APISphereData? sse_decode_opt_box_autoadd_api_sphere_data(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_api_sphere_data(deserializer));
    } else {
      return null;
    }
  }

  @protected
  APITransform? sse_decode_opt_box_autoadd_api_transform(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_api_transform(deserializer));
    } else {
      return null;
    }
  }

  @protected
  AtomView? sse_decode_opt_box_autoadd_atom_view(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_atom_view(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_i_32(deserializer));
    } else {
      return null;
    }
  }

  @protected
  NodeNetworkView? sse_decode_opt_box_autoadd_node_network_view(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_node_network_view(deserializer));
    } else {
      return null;
    }
  }

  @protected
  SceneComposerView? sse_decode_opt_box_autoadd_scene_composer_view(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_scene_composer_view(deserializer));
    } else {
      return null;
    }
  }

  @protected
  BigInt? sse_decode_opt_box_autoadd_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_64(deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<String>? sse_decode_opt_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  (BigInt, NodeView) sse_decode_record_u_64_node_view(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_u_64(deserializer);
    var var_field1 = sse_decode_node_view(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  SceneComposerView sse_decode_scene_composer_view(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_clusters = sse_decode_list_cluster_view(deserializer);
    var var_activeTool = sse_decode_api_scene_composer_tool(deserializer);
    var var_availableTools =
        sse_decode_list_api_scene_composer_tool(deserializer);
    var var_isUndoAvailable = sse_decode_bool(deserializer);
    var var_isRedoAvailable = sse_decode_bool(deserializer);
    return SceneComposerView(
        clusters: var_clusters,
        activeTool: var_activeTool,
        availableTools: var_availableTools,
        isUndoAvailable: var_isUndoAvailable,
        isRedoAvailable: var_isRedoAvailable);
  }

  @protected
  SelectModifier sse_decode_select_modifier(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return SelectModifier.values[inner];
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  BigInt sse_decode_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  WireView sse_decode_wire_view(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_sourceNodeId = sse_decode_u_64(deserializer);
    var var_destNodeId = sse_decode_u_64(deserializer);
    var var_destParamIndex = sse_decode_usize(deserializer);
    var var_selected = sse_decode_bool(deserializer);
    return WireView(
        sourceNodeId: var_sourceNodeId,
        destNodeId: var_destNodeId,
        destParamIndex: var_destParamIndex,
        selected: var_selected);
  }

  @protected
  void sse_encode_CastedPrimitive_u_64(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_64(sseEncodeCastedPrimitiveU64(self), serializer);
  }

  @protected
  void sse_encode_Map_u_64_node_view(
      Map<BigInt, NodeView> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_u_64_node_view(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_api_atom_trans_data(
      APIAtomTransData self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_api_vec_3(self.translation, serializer);
    sse_encode_api_vec_3(self.rotation, serializer);
  }

  @protected
  void sse_encode_api_camera(APICamera self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_api_vec_3(self.eye, serializer);
    sse_encode_api_vec_3(self.target, serializer);
    sse_encode_api_vec_3(self.up, serializer);
    sse_encode_f_64(self.aspect, serializer);
    sse_encode_f_64(self.fovy, serializer);
    sse_encode_f_64(self.znear, serializer);
    sse_encode_f_64(self.zfar, serializer);
  }

  @protected
  void sse_encode_api_cuboid_data(
      APICuboidData self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_apii_vec_3(self.minCorner, serializer);
    sse_encode_apii_vec_3(self.extent, serializer);
  }

  @protected
  void sse_encode_api_edit_atom_data(
      APIEditAtomData self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_api_edit_atom_tool(self.activeTool, serializer);
    sse_encode_bool(self.canUndo, serializer);
    sse_encode_bool(self.canRedo, serializer);
    sse_encode_opt_box_autoadd_u_64(self.bondToolLastAtomId, serializer);
    sse_encode_opt_box_autoadd_i_32(self.replacementAtomicNumber, serializer);
    sse_encode_opt_box_autoadd_i_32(self.addAtomToolAtomicNumber, serializer);
    sse_encode_bool(self.hasSelectedAtoms, serializer);
    sse_encode_bool(self.hasSelection, serializer);
    sse_encode_opt_box_autoadd_api_transform(
        self.selectionTransform, serializer);
  }

  @protected
  void sse_encode_api_edit_atom_tool(
      APIEditAtomTool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_api_geo_trans_data(
      APIGeoTransData self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_apii_vec_3(self.translation, serializer);
    sse_encode_apii_vec_3(self.rotation, serializer);
    sse_encode_bool(self.transformOnlyFrame, serializer);
  }

  @protected
  void sse_encode_api_half_space_data(
      APIHalfSpaceData self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_apii_vec_3(self.millerIndex, serializer);
    sse_encode_i_32(self.shift, serializer);
  }

  @protected
  void sse_encode_api_scene_composer_tool(
      APISceneComposerTool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_api_sphere_data(
      APISphereData self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_apii_vec_3(self.center, serializer);
    sse_encode_i_32(self.radius, serializer);
  }

  @protected
  void sse_encode_api_transform(APITransform self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_api_vec_3(self.translation, serializer);
    sse_encode_api_vec_3(self.rotation, serializer);
  }

  @protected
  void sse_encode_api_vec_2(APIVec2 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_f_64(self.x, serializer);
    sse_encode_f_64(self.y, serializer);
  }

  @protected
  void sse_encode_api_vec_3(APIVec3 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_f_64(self.x, serializer);
    sse_encode_f_64(self.y, serializer);
    sse_encode_f_64(self.z, serializer);
  }

  @protected
  void sse_encode_apii_vec_3(APIIVec3 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.x, serializer);
    sse_encode_i_32(self.y, serializer);
    sse_encode_i_32(self.z, serializer);
  }

  @protected
  void sse_encode_atom_view(AtomView self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_64(self.id, serializer);
    sse_encode_i_32(self.atomicNumber, serializer);
    sse_encode_String(self.symbol, serializer);
    sse_encode_u_64(self.clusterId, serializer);
    sse_encode_String(self.clusterName, serializer);
    sse_encode_api_vec_3(self.position, serializer);
    sse_encode_String(self.elementName, serializer);
    sse_encode_f_64(self.covalentRadius, serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_api_atom_trans_data(
      APIAtomTransData self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_api_atom_trans_data(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_api_camera(
      APICamera self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_api_camera(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_api_cuboid_data(
      APICuboidData self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_api_cuboid_data(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_api_edit_atom_data(
      APIEditAtomData self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_api_edit_atom_data(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_api_edit_atom_tool(
      APIEditAtomTool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_api_edit_atom_tool(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_api_geo_trans_data(
      APIGeoTransData self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_api_geo_trans_data(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_api_half_space_data(
      APIHalfSpaceData self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_api_half_space_data(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_api_sphere_data(
      APISphereData self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_api_sphere_data(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_api_transform(
      APITransform self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_api_transform(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_api_vec_2(
      APIVec2 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_api_vec_2(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_api_vec_3(
      APIVec3 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_api_vec_3(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_atom_view(
      AtomView self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_atom_view(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_node_network_view(
      NodeNetworkView self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_node_network_view(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_scene_composer_view(
      SceneComposerView self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_scene_composer_view(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_64(self, serializer);
  }

  @protected
  void sse_encode_cluster_view(ClusterView self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_64(self.id, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_bool(self.selected, serializer);
  }

  @protected
  void sse_encode_editor(Editor self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_element_summary(
      ElementSummary self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.atomicNumber, serializer);
    sse_encode_String(self.elementName, serializer);
  }

  @protected
  void sse_encode_f_64(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat64(self);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_input_pin_view(InputPinView self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.name, serializer);
    sse_encode_String(self.dataType, serializer);
    sse_encode_bool(self.multi, serializer);
  }

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_api_scene_composer_tool(
      List<APISceneComposerTool> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_api_scene_composer_tool(item, serializer);
    }
  }

  @protected
  void sse_encode_list_cluster_view(
      List<ClusterView> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_cluster_view(item, serializer);
    }
  }

  @protected
  void sse_encode_list_element_summary(
      List<ElementSummary> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_element_summary(item, serializer);
    }
  }

  @protected
  void sse_encode_list_input_pin_view(
      List<InputPinView> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_input_pin_view(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_record_u_64_node_view(
      List<(BigInt, NodeView)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_u_64_node_view(item, serializer);
    }
  }

  @protected
  void sse_encode_list_wire_view(
      List<WireView> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_wire_view(item, serializer);
    }
  }

  @protected
  void sse_encode_node_network_view(
      NodeNetworkView self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.name, serializer);
    sse_encode_Map_u_64_node_view(self.nodes, serializer);
    sse_encode_list_wire_view(self.wires, serializer);
  }

  @protected
  void sse_encode_node_view(NodeView self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_64(self.id, serializer);
    sse_encode_String(self.nodeTypeName, serializer);
    sse_encode_api_vec_2(self.position, serializer);
    sse_encode_list_input_pin_view(self.inputPins, serializer);
    sse_encode_String(self.outputType, serializer);
    sse_encode_bool(self.selected, serializer);
    sse_encode_bool(self.displayed, serializer);
    sse_encode_bool(self.returnNode, serializer);
  }

  @protected
  void sse_encode_opt_box_autoadd_api_atom_trans_data(
      APIAtomTransData? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_api_atom_trans_data(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_api_camera(
      APICamera? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_api_camera(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_api_cuboid_data(
      APICuboidData? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_api_cuboid_data(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_api_edit_atom_data(
      APIEditAtomData? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_api_edit_atom_data(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_api_edit_atom_tool(
      APIEditAtomTool? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_api_edit_atom_tool(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_api_geo_trans_data(
      APIGeoTransData? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_api_geo_trans_data(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_api_half_space_data(
      APIHalfSpaceData? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_api_half_space_data(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_api_sphere_data(
      APISphereData? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_api_sphere_data(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_api_transform(
      APITransform? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_api_transform(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_atom_view(
      AtomView? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_atom_view(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_i_32(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_i_32(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_node_network_view(
      NodeNetworkView? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_node_network_view(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_scene_composer_view(
      SceneComposerView? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_scene_composer_view(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_64(BigInt? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_64(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_String(
      List<String>? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_String(self, serializer);
    }
  }

  @protected
  void sse_encode_record_u_64_node_view(
      (BigInt, NodeView) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_64(self.$1, serializer);
    sse_encode_node_view(self.$2, serializer);
  }

  @protected
  void sse_encode_scene_composer_view(
      SceneComposerView self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_cluster_view(self.clusters, serializer);
    sse_encode_api_scene_composer_tool(self.activeTool, serializer);
    sse_encode_list_api_scene_composer_tool(self.availableTools, serializer);
    sse_encode_bool(self.isUndoAvailable, serializer);
    sse_encode_bool(self.isRedoAvailable, serializer);
  }

  @protected
  void sse_encode_select_modifier(
      SelectModifier self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_wire_view(WireView self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_64(self.sourceNodeId, serializer);
    sse_encode_u_64(self.destNodeId, serializer);
    sse_encode_usize(self.destParamIndex, serializer);
    sse_encode_bool(self.selected, serializer);
  }
}
